!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
A	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^impl<'de, 'a, A> MapAccess<'de> for &'a mut A$/;"	c
A	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^impl<'de, 'a, A> SeqAccess<'de> for &'a mut A$/;"	c
Action	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/tests/hashset.rs	/^enum Action<A> {$/;"	g
Action	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/tests/ordset.rs	/^enum Action<A> {$/;"	g
Action	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/tests/vector.rs	/^enum Action<A> {$/;"	g
Actions	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/tests/hashset.rs	/^impl<A> Debug for Actions<A>$/;"	c
Actions	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/tests/hashset.rs	/^struct Actions<A>(Vec<Action<A>>)$/;"	s
Actions	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/tests/ordset.rs	/^impl<A> Debug for Actions<A>$/;"	c
Actions	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/tests/ordset.rs	/^struct Actions<A>(Vec<Action<A>>)$/;"	s
Actions	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/tests/vector.rs	/^impl<A> Debug for Actions<A>$/;"	c
Actions	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/tests/vector.rs	/^struct Actions<A>(Vec<Action<A>>)$/;"	s
Add	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    Add(&'a A),$/;"	e	enum:DiffItem
Add	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    Add(&'a K, &'a V),$/;"	e	enum:DiffItem
Added	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    Added,$/;"	e	enum:Insert
AddedAction	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    AddedAction,$/;"	e	enum:InsertAction
Adjacent	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    Adjacent { tag: String, content: String },$/;"	e	enum:TagType
AllArgsOverrideSelf	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    AllArgsOverrideSelf,$/;"	e	enum:AppSettings
AllowExternalSubcommands	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    AllowExternalSubcommands,$/;"	e	enum:AppSettings
AllowInvalidUtf8	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    AllowInvalidUtf8,$/;"	e	enum:AppSettings
AllowLeadingHyphen	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    AllowLeadingHyphen,$/;"	e	enum:AppSettings
AllowLeadingHyphen	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/settings.rs	/^    AllowLeadingHyphen,$/;"	e	enum:ArgSettings
AllowMissingPositional	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    AllowMissingPositional,$/;"	e	enum:AppSettings
AllowNegativeNumbers	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    AllowNegativeNumbers,$/;"	e	enum:AppSettings
Always	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/fmt.rs	/^    Always,$/;"	e	enum:ColorWhen
Any	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/parser/error.rs	/^    Any(&'static [usize]),$/;"	e	enum:ExpectedLength
AnyArg	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^pub trait AnyArg<'n, 'e>: std_fmt::Display {$/;"	i
App	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^impl<'b, 'c> DispOrder for App<'b, 'c> {$/;"	c
App	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^impl<'a, 'b> App<'a, 'b> {$/;"	c
App	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^impl<'a, 'b> Clone for App<'a, 'b> {$/;"	c
App	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^impl<'a> From<&'a Yaml> for App<'a, 'a> {$/;"	c
App	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^impl<'n, 'e> AnyArg<'n, 'e> for App<'n, 'e> {$/;"	c
App	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^impl<'n, 'e> fmt::Display for App<'n, 'e> {$/;"	c
App	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^pub struct App<'a, 'b>$/;"	s
AppFlags	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^impl AppFlags {$/;"	c
AppFlags	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^impl BitOr for AppFlags {$/;"	c
AppFlags	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^impl Default for AppFlags {$/;"	c
AppFlags	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^pub struct AppFlags(Flags);$/;"	s
AppMeta	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/meta.rs	/^impl<'b> AppMeta<'b> {$/;"	c
AppMeta	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/meta.rs	/^pub struct AppMeta<'b> {$/;"	s
AppSettings	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^impl FromStr for AppSettings {$/;"	c
AppSettings	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^pub enum AppSettings {$/;"	g
Arc	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^impl<A> Arc<A> {$/;"	c
Arc	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^impl<A> Clone for Arc<A> {$/;"	c
Arc	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^impl<A> Deref for Arc<A> {$/;"	c
Arc	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^impl<A> Eq for Arc<A> where A: Eq {}$/;"	c
Arc	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^impl<A> PartialEq for Arc<A>$/;"	c
Arc	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^impl<A> std::fmt::Debug for Arc<A>$/;"	c
Arc	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^pub(crate) struct Arc<A>(RArc<A>);$/;"	s
ArcWeak	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'de, T: ?Sized> Deserialize<'de> for ArcWeak<T>$/;"	c
ArcWeak	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^impl<T: ?Sized> Serialize for ArcWeak<T>$/;"	c
Arg	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^impl<'a, 'b, 'z> From<&'z Arg<'a, 'b>> for Arg<'a, 'b> {$/;"	c
Arg	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^impl<'a, 'b> Arg<'a, 'b> {$/;"	c
Arg	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^impl<'n, 'e> PartialEq for Arg<'n, 'e> {$/;"	c
Arg	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^pub struct Arg<'a, 'b>$/;"	s
ArgEnum	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/lib.rs	/^    pub trait ArgEnum {}$/;"	i	module:derive
ArgFlags	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/settings.rs	/^impl ArgFlags {$/;"	c
ArgFlags	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/settings.rs	/^impl Default for ArgFlags {$/;"	c
ArgFlags	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/settings.rs	/^pub struct ArgFlags(Flags);$/;"	s
ArgGroup	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/group.rs	/^impl<'a, 'z> From<&'z ArgGroup<'a>> for ArgGroup<'a> {$/;"	c
ArgGroup	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/group.rs	/^impl<'a> ArgGroup<'a> {$/;"	c
ArgGroup	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/group.rs	/^impl<'a> Clone for ArgGroup<'a> {$/;"	c
ArgGroup	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/group.rs	/^impl<'a> Debug for ArgGroup<'a> {$/;"	c
ArgGroup	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/group.rs	/^impl<'a> From<&'a BTreeMap<Yaml, Yaml>> for ArgGroup<'a> {$/;"	c
ArgGroup	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/group.rs	/^pub struct ArgGroup<'a> {$/;"	s
ArgMatcher	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matcher.rs	/^impl<'a> ArgMatcher<'a> {$/;"	c
ArgMatcher	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matcher.rs	/^impl<'a> Default for ArgMatcher<'a> {$/;"	c
ArgMatcher	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matcher.rs	/^impl<'a> Into<ArgMatches<'a>> for ArgMatcher<'a> {$/;"	c
ArgMatcher	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matcher.rs	/^pub struct ArgMatcher<'a>(pub ArgMatches<'a>);$/;"	s
ArgMatches	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^impl<'a> ArgMatches<'a> {$/;"	c
ArgMatches	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^impl<'a> Default for ArgMatches<'a> {$/;"	c
ArgMatches	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^pub struct ArgMatches<'a> {$/;"	s
ArgMatches	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^impl SubcommandArgumentParser for ArgMatches<'_> {$/;"	c
ArgRequiredElseHelp	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    ArgRequiredElseHelp,$/;"	e	enum:AppSettings
ArgSettings	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/settings.rs	/^impl FromStr for ArgSettings {$/;"	c
ArgSettings	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/settings.rs	/^pub enum ArgSettings {$/;"	g
ArgWithDisplay	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^trait ArgWithDisplay<'b, 'c>: AnyArg<'b, 'c> + Display {}$/;"	i
ArgWithOrder	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^trait ArgWithOrder<'b, 'c>: ArgWithDisplay<'b, 'c> + DispOrder {$/;"	i
ArgsNegateSubcommands	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    ArgsNegateSubcommands,$/;"	e	enum:AppSettings
ArgumentConflict	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    ArgumentConflict,$/;"	e	enum:ErrorKind
ArgumentNotFound	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    ArgumentNotFound,$/;"	e	enum:ErrorKind
Arguments	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^impl<'a> Serialize for fmt::Arguments<'a> {$/;"	c
ArrayInPlaceVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^struct ArrayInPlaceVisitor<'a, A: 'a>(&'a mut A);$/;"	s
ArrayVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'de, T> Visitor<'de> for ArrayVisitor<[T; 0]> {$/;"	c
ArrayVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<A> ArrayVisitor<A> {$/;"	c
ArrayVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^struct ArrayVisitor<A> {$/;"	s
Attr	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^impl<'c, T> Attr<'c, T> {$/;"	c
Attr	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^struct Attr<'c, T> {$/;"	s
Auto	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/fmt.rs	/^    Auto,$/;"	e	enum:ColorWhen
B	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    impl<A, B> Pair for (A, B) {$/;"	c	module:private
BTreeMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<'de, K, V, E> IntoDeserializer<'de, E> for BTreeMap<K, V>$/;"	c
BTreeSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<'de, T, E> IntoDeserializer<'de, E> for BTreeSet<T>$/;"	c
BTreeValue	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^pub trait BTreeValue {$/;"	i
Base	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/base.rs	/^impl<'n, 'e, 'z> From<&'z Arg<'n, 'e>> for Base<'n, 'e> {$/;"	c
Base	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/base.rs	/^impl<'n, 'e> Base<'n, 'e> {$/;"	c
Base	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/base.rs	/^impl<'n, 'e> PartialEq for Base<'n, 'e> {$/;"	c
Base	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/base.rs	/^pub struct Base<'a, 'b>$/;"	s
Bash	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/shell.rs	/^    Bash,$/;"	e	enum:Shell
BashGen	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/bash.rs	/^impl<'a, 'b> BashGen<'a, 'b> {$/;"	c
BashGen	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/bash.rs	/^pub struct BashGen<'a, 'b>$/;"	s
Block	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/fragment.rs	/^    Block(TokenStream),$/;"	e	enum:Fragment
Bool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    Bool(bool),$/;"	e	enum:Unexpected
Bool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        Bool(bool),$/;"	e	enum:content::Content
Bool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        Bool(bool),$/;"	e	enum:content::Content
BoolAttr	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^impl<'c> BoolAttr<'c> {$/;"	c
BoolAttr	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^struct BoolAttr<'c>(Attr<'c, ()>);$/;"	s
BoolVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'de> Visitor<'de> for BoolVisitor {$/;"	c
BoolVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^struct BoolVisitor;$/;"	s
Boolean	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    Boolean,$/;"	e	enum:Unsupported
Borrowed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^    Borrowed(BTreeSet<syn::Lifetime>),$/;"	e	enum:BorrowedLifetimes
BorrowedBytesDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<'de, E> BorrowedBytesDeserializer<'de, E> {$/;"	c
BorrowedBytesDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<'de, E> de::Deserializer<'de> for BorrowedBytesDeserializer<'de, E>$/;"	c
BorrowedBytesDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^pub struct BorrowedBytesDeserializer<'de, E> {$/;"	s
BorrowedLifetimes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^enum BorrowedLifetimes {$/;"	g
BorrowedLifetimes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^impl BorrowedLifetimes {$/;"	c
BorrowedLifetimes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    impl Parse for BorrowedLifetimes {$/;"	c	function:parse_lit_into_lifetimes
BorrowedLifetimes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    struct BorrowedLifetimes(Punctuated<syn::Lifetime, Token![+]>);$/;"	s	function:parse_lit_into_lifetimes
BorrowedStrDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<'de, E> BorrowedStrDeserializer<'de, E> {$/;"	c
BorrowedStrDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<'de, E> de::Deserializer<'de> for BorrowedStrDeserializer<'de, E>$/;"	c
BorrowedStrDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<'de, E> de::EnumAccess<'de> for BorrowedStrDeserializer<'de, E>$/;"	c
BorrowedStrDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^pub struct BorrowedStrDeserializer<'de, E> {$/;"	s
Bound	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'de, T> Deserialize<'de> for Bound<T>$/;"	c
Bound	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^impl<T> Serialize for Bound<T>$/;"	c
BoundVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^        impl<'de, T> Visitor<'de> for BoundVisitor<T>$/;"	c	function:deserialize
BoundVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^        struct BoundVisitor<T>(PhantomData<Bound<T>>);$/;"	s	function:deserialize
Build	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/error.rs	/^    Build(builder::Error),$/;"	e	enum:Inner
Builder	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/mod.rs	/^impl crate::Builder {$/;"	c
Builder	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/mod.rs	/^pub type Builder = crate::Builder;$/;"	t
Builder	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^pub struct Builder(Bytes);$/;"	s
ByteArray	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    ByteArray,$/;"	e	enum:Unsupported
ByteBuf	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        ByteBuf(Vec<u8>),$/;"	e	enum:content::Content
Bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    Bytes(&'a [u8]),$/;"	e	enum:Unexpected
Bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        Bytes(&'de [u8]),$/;"	e	enum:content::Content
Bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        Bytes(Vec<u8>),$/;"	e	enum:content::Content
Bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^pub type Bytes = [u8; 16];$/;"	t
BytesDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^impl<'de, 'a, E> Deserializer<'de> for BytesDeserializer<'a, E>$/;"	c
BytesDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^pub struct BytesDeserializer<'a, E> {$/;"	s
BytesVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'a> Visitor<'a> for BytesVisitor {$/;"	c
BytesVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^struct BytesVisitor;$/;"	s
CStr	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^impl Serialize for CStr {$/;"	c
CString	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'de> Deserialize<'de> for CString {$/;"	c
CString	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^impl Serialize for CString {$/;"	c
CStringVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'de> Visitor<'de> for CStringVisitor {$/;"	c
CStringVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^struct CStringVisitor;$/;"	s
CamelCase	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/case.rs	/^    CamelCase,$/;"	e	enum:RenameRule
CaseInsensitive	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/settings.rs	/^    CaseInsensitive,$/;"	e	enum:ArgSettings
Cell	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'de, T> Deserialize<'de> for Cell<T>$/;"	c
Cell	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^impl<T> Serialize for Cell<T>$/;"	c
Char	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    Char(char),$/;"	e	enum:Unexpected
Char	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        Char(char),$/;"	e	enum:content::Content
Char	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        Char(char),$/;"	e	enum:content::Content
Char	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    Char,$/;"	e	enum:Unsupported
CharVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'de> Visitor<'de> for CharVisitor {$/;"	c
CharVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^struct CharVisitor;$/;"	s
Chunk	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^impl<A> PoolClone for Chunk<A> where A: Clone {}$/;"	c
Chunk	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^impl<A> PoolDefault for Chunk<A> {}$/;"	c
Chunk	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/mod.rs	/^    pub(crate) type Chunk<A> = sc::sized_chunk::Chunk<A, VectorChunkSize>;$/;"	t	module:chunk
Chunks	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<'a, A: Clone> Chunks<'a, A> {$/;"	c
Chunks	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<'a, A: Clone> DoubleEndedIterator for Chunks<'a, A> {$/;"	c
Chunks	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<'a, A: Clone> FusedIterator for Chunks<'a, A> {}$/;"	c
Chunks	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<'a, A: Clone> Iterator for Chunks<'a, A> {$/;"	c
Chunks	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^pub struct Chunks<'a, A> {$/;"	s
ChunksMut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<'a, A: Clone> ChunksMut<'a, A> {$/;"	c
ChunksMut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<'a, A: Clone> DoubleEndedIterator for ChunksMut<'a, A> {$/;"	c
ChunksMut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<'a, A: Clone> FusedIterator for ChunksMut<'a, A> {}$/;"	c
ChunksMut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<'a, A: Clone> Iterator for ChunksMut<'a, A> {$/;"	c
ChunksMut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^pub struct ChunksMut<'a, A> {$/;"	s
ClapApp	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/lib.rs	/^    pub trait ClapApp: IntoApp + FromArgMatches + Sized {$/;"	i	module:derive
CliSubCommand	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^pub enum CliSubCommand {$/;"	g
ClockSequence	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v1.rs	/^pub trait ClockSequence {$/;"	i
Collision	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    Collision(Ref<CollisionNode<A>>),$/;"	e	enum:Entry
CollisionNode	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^impl<A: HashValue> CollisionNode<A> {$/;"	c
CollisionNode	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^pub(crate) struct CollisionNode<A> {$/;"	s
ColorAlways	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    ColorAlways,$/;"	e	enum:AppSettings
ColorAuto	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    ColorAuto,$/;"	e	enum:AppSettings
ColorNever	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    ColorNever,$/;"	e	enum:AppSettings
ColorWhen	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/fmt.rs	/^pub enum ColorWhen {$/;"	g
ColoredHelp	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    ColoredHelp,$/;"	e	enum:AppSettings
Colorizer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/fmt.rs	/^impl Colorizer {$/;"	c
Colorizer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/fmt.rs	/^impl Default for Colorizer {$/;"	c
Colorizer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/fmt.rs	/^pub struct Colorizer {$/;"	s
ColorizerOption	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/fmt.rs	/^pub struct ColorizerOption {$/;"	s
ComplGen	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/mod.rs	/^impl<'a, 'b> ComplGen<'a, 'b> {$/;"	c
ComplGen	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/mod.rs	/^pub struct ComplGen<'a, 'b>$/;"	s
CompleteTask	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    CompleteTask(usize),$/;"	e	enum:CliSubCommand
Consider	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    Consider(&'a Node<A>),$/;"	e	enum:IterItem
Consider	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    Consider(Node<A>),$/;"	e	enum:ConsumingIterItem
ConsumingIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<A> ExactSizeIterator for ConsumingIter<A> where A: HashValue + Clone {}$/;"	c
ConsumingIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<A> FusedIterator for ConsumingIter<A> where A: HashValue + Clone {}$/;"	c
ConsumingIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<A> Iterator for ConsumingIter<A>$/;"	c
ConsumingIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^pub struct ConsumingIter<A: HashValue> {$/;"	s
ConsumingIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^impl<A> ExactSizeIterator for ConsumingIter<A> where A: Hash + Eq + Clone {}$/;"	c
ConsumingIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^impl<A> FusedIterator for ConsumingIter<A> where A: Hash + Eq + Clone {}$/;"	c
ConsumingIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^impl<A> Iterator for ConsumingIter<A>$/;"	c
ConsumingIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^pub struct ConsumingIter<A>$/;"	s
ConsumingIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^impl<A: BTreeValue + Clone> ExactSizeIterator for ConsumingIter<A> {}$/;"	c
ConsumingIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^impl<A: Clone> ConsumingIter<A> {$/;"	c
ConsumingIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^impl<A> DoubleEndedIterator for ConsumingIter<A>$/;"	c
ConsumingIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^impl<A> Iterator for ConsumingIter<A>$/;"	c
ConsumingIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^pub struct ConsumingIter<A> {$/;"	s
ConsumingIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^impl<A> Iterator for ConsumingIter<A>$/;"	c
ConsumingIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^pub struct ConsumingIter<A> {$/;"	s
ConsumingIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<A: Clone> ConsumingIter<A> {$/;"	c
ConsumingIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<A: Clone> DoubleEndedIterator for ConsumingIter<A> {$/;"	c
ConsumingIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<A: Clone> ExactSizeIterator for ConsumingIter<A> {}$/;"	c
ConsumingIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<A: Clone> FusedIterator for ConsumingIter<A> {}$/;"	c
ConsumingIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<A: Clone> Iterator for ConsumingIter<A> {$/;"	c
ConsumingIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^pub struct ConsumingIter<A> {$/;"	s
ConsumingIterItem	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^enum ConsumingIterItem<A> {$/;"	g
Container	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ast.rs	/^impl<'a> Container<'a> {$/;"	c
Container	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ast.rs	/^pub struct Container<'a> {$/;"	s
Container	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^impl Container {$/;"	c
Container	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^pub struct Container {$/;"	s
ContainsLast	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    ContainsLast,$/;"	e	enum:AppSettings
Content	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        Content(Content<'de>),$/;"	e	enum:content::TagOrContent
Content	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        Content,$/;"	e	enum:content::TagContentOtherField
Content	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        Content,$/;"	e	enum:content::TagOrContentField
Content	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'de> Content<'de> {$/;"	c	module:content
Content	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'de> Deserialize<'de> for Content<'de> {$/;"	c	module:content
Content	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    pub enum Content<'de> {$/;"	g	module:content
Content	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    impl Serialize for Content {$/;"	c	module:content
Content	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    pub enum Content {$/;"	g	module:content
ContentDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'de, E> ContentDeserializer<'de, E> {$/;"	c	module:content
ContentDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'de, E> ContentDeserializer<'de, E>$/;"	c	module:content
ContentDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'de, E> Deserializer<'de> for ContentDeserializer<'de, E>$/;"	c	module:content
ContentDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'de, E> de::IntoDeserializer<'de, E> for ContentDeserializer<'de, E>$/;"	c	module:content
ContentDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    pub struct ContentDeserializer<'de, E> {$/;"	s	module:content
ContentRefDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'a, 'de, E> ContentRefDeserializer<'a, 'de, E> {$/;"	c	module:content
ContentRefDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'a, 'de, E> ContentRefDeserializer<'a, 'de, E>$/;"	c	module:content
ContentRefDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'de, 'a, E> Deserializer<'de> for ContentRefDeserializer<'a, 'de, E>$/;"	c	module:content
ContentRefDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'de, 'a, E> de::IntoDeserializer<'de, E> for ContentRefDeserializer<'a, 'de, E>$/;"	c	module:content
ContentRefDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    pub struct ContentRefDeserializer<'a, 'de: 'a, E> {$/;"	s	module:content
ContentSerializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    impl<E> ContentSerializer<E> {$/;"	c	module:content
ContentSerializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    impl<E> Serializer for ContentSerializer<E>$/;"	c	module:content
ContentSerializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    pub struct ContentSerializer<E> {$/;"	s	module:content
ContentVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'de> ContentVisitor<'de> {$/;"	c	module:content
ContentVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'de> Visitor<'de> for ContentVisitor<'de> {$/;"	c	module:content
ContentVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    struct ContentVisitor<'de> {$/;"	s	module:content
Context	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v1.rs	/^impl ClockSequence for Context {$/;"	c
Context	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v1.rs	/^impl Context {$/;"	c
Context	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v1.rs	/^pub struct Context {$/;"	s
ContinueDown	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    ContinueDown(usize),$/;"	e	enum:RemoveAction
CopyUntilResult	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^enum CopyUntilResult {$/;"	g
Cow	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'de, 'a, T: ?Sized> Deserialize<'de> for Cow<'a, T>$/;"	c
Cow	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<'de, 'a, E> IntoDeserializer<'de, E> for Cow<'a, str>$/;"	c
CowBytesVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'a> Visitor<'a> for CowBytesVisitor {$/;"	c	function:borrow_cow_bytes
CowBytesVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    struct CowBytesVisitor;$/;"	s	function:borrow_cow_bytes
CowStrDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<'a, E> Clone for CowStrDeserializer<'a, E> {$/;"	c
CowStrDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<'de, 'a, E> de::Deserializer<'de> for CowStrDeserializer<'a, E>$/;"	c
CowStrDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<'de, 'a, E> de::EnumAccess<'de> for CowStrDeserializer<'a, E>$/;"	c
CowStrDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^pub struct CowStrDeserializer<'a, E> {$/;"	s
CowStrVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'a> Visitor<'a> for CowStrVisitor {$/;"	c	function:borrow_cow_str
CowStrVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    struct CowStrVisitor;$/;"	s	function:borrow_cow_str
CreateTask	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    CreateTask,$/;"	e	enum:CliSubCommand
Critical	/home/darrion/projects/ClearHeadToDo/src/task.rs	/^    Critical = 1,$/;"	e	enum:PriEnum
Ctxt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ctxt.rs	/^impl Ctxt {$/;"	c
Ctxt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ctxt.rs	/^impl Drop for Ctxt {$/;"	c
Ctxt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ctxt.rs	/^pub struct Ctxt {$/;"	s
Data	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ast.rs	/^impl<'a> Data<'a> {$/;"	c
Data	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ast.rs	/^pub enum Data<'a> {$/;"	g
Dce	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    Dce,$/;"	e	enum:Version
DeImplGenerics	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^impl<'a> DeImplGenerics<'a> {$/;"	c
DeImplGenerics	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^impl<'a> ToTokens for DeImplGenerics<'a> {$/;"	c
DeImplGenerics	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^struct DeImplGenerics<'a>(&'a Parameters);$/;"	s
DeTypeGenerics	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^impl<'a> DeTypeGenerics<'a> {$/;"	c
DeTypeGenerics	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^impl<'a> ToTokens for DeTypeGenerics<'a> {$/;"	c
DeTypeGenerics	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^struct DeTypeGenerics<'a>(&'a Parameters);$/;"	s
Default	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    Default,$/;"	e	enum:Default
Default	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^impl Default {$/;"	c
Default	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^pub enum Default {$/;"	g
DeleteAt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    DeleteAt(usize),$/;"	e	enum:RemoveAction
DelimiterFound	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^    DelimiterFound(usize),$/;"	e	enum:CopyUntilResult
DelimiterNotFound	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^    DelimiterNotFound(usize),$/;"	e	enum:CopyUntilResult
Derive	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/mod.rs	/^pub enum Derive {$/;"	g
DeriveDisplayOrder	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    DeriveDisplayOrder,$/;"	e	enum:AppSettings
Deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'de> Deserialize<'de> for ! {$/;"	c
Deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'de> Deserialize<'de> for () {$/;"	c
Deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^pub trait Deserialize<'de>: Sized {$/;"	i
Deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/mod.rs	/^    Deserialize,$/;"	e	enum:Derive
DeserializeOwned	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^pub trait DeserializeOwned: for<'de> Deserialize<'de> {}$/;"	i
DeserializeSeed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^pub trait DeserializeSeed<'de>: Sized {$/;"	i
Deserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    type Deserializer: Deserializer<'de, Error = E>;$/;"	t	interface:IntoDeserializer
Deserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^pub trait Deserializer<'de>: Sized {$/;"	i
Deserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    type Deserializer = CowStrDeserializer<'a, E>;$/;"	t
Deserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    type Deserializer = MapDeserializer<'de, <Self as IntoIterator>::IntoIter, E>;$/;"	t
Deserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    type Deserializer = NeverDeserializer<E>;$/;"	t
Deserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    type Deserializer = SeqDeserializer<<Self as IntoIterator>::IntoIter, E>;$/;"	t
Deserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    type Deserializer = StrDeserializer<'a, E>;$/;"	t
Deserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    type Deserializer = StringDeserializer<E>;$/;"	t
Deserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    type Deserializer = U32Deserializer<E>;$/;"	t
Deserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    type Deserializer = UnitDeserializer<E>;$/;"	t
Deserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        type Deserializer = Self;$/;"	t	module:content
Deserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    type Deserializer = <u32 as IntoDeserializer<'de, E>>::Deserializer;$/;"	t
Deserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    type Deserializer = BytesDeserializer<'a, E>;$/;"	t
Deserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    type Deserializer = StrDeserializer<'a, E>;$/;"	t
Deserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    type Deserializer: Deserializer<'de, Error = E>;$/;"	t	interface:IdentifierDeserializer
DiffItem	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^pub enum DiffItem<'a, A> {$/;"	g
DiffItem	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^pub enum DiffItem<'a, K, V> {$/;"	g
DiffIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^impl<'a, A: 'a> DiffIter<'a, A> {$/;"	c
DiffIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^impl<'a, A> Iterator for DiffIter<'a, A>$/;"	c
DiffIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^pub struct DiffIter<'a, A> {$/;"	s
DiffIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<'a, K, V> Iterator for DiffIter<'a, K, V>$/;"	c
DiffIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^pub struct DiffIter<'a, K, V> {$/;"	s
DiffIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^impl<'a, A> Iterator for DiffIter<'a, A>$/;"	c
DiffIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^pub struct DiffIter<'a, A> {$/;"	s
DisableHelpFlags	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    DisableHelpFlags,$/;"	e	enum:AppSettings
DisableHelpSubcommand	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    DisableHelpSubcommand,$/;"	e	enum:AppSettings
DisableVersion	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    DisableVersion,$/;"	e	enum:AppSettings
DispOrder	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^pub trait DispOrder {$/;"	i
Done	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    Done(A),$/;"	e	enum:PopResult
Done	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    Done,$/;"	e	enum:PushResult
DontCollapseArgsInUsage	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    DontCollapseArgsInUsage,$/;"	e	enum:AppSettings
DontDelimitTrailingValues	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    DontDelimitTrailingValues,$/;"	e	enum:AppSettings
Drain	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^impl<A: HashValue> ExactSizeIterator for Drain<A> where A: Clone {}$/;"	c
Drain	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^impl<A: HashValue> FusedIterator for Drain<A> where A: Clone {}$/;"	c
Drain	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^impl<A> Drain<A>$/;"	c
Drain	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^impl<A> Iterator for Drain<A>$/;"	c
Drain	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^pub(crate) struct Drain<A>$/;"	s
Drained	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    Drained(A),$/;"	e	enum:PopResult
Dropped	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    Dropped(usize),$/;"	e	enum:SplitResult
Duration	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'de> Deserialize<'de> for Duration {$/;"	c
Duration	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^impl Serialize for Duration {$/;"	c
DurationVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^        impl<'de> Visitor<'de> for DurationVisitor {$/;"	c	method:Duration::deserialize
DurationVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^        impl<'de> Visitor<'de> for DurationVisitor {$/;"	c	method:SystemTime::deserialize
DurationVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^        struct DurationVisitor;$/;"	s	method:Duration::deserialize
DurationVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^        struct DurationVisitor;$/;"	s	method:SystemTime::deserialize
EMPTY	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^        static EMPTY: [OsString; 0] = [];$/;"	v	method:OsValues::default
EMPTY	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^        static EMPTY: [OsString; 0] = [];$/;"	v	method:Values::default
EMPTY	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^        static EMPTY: [usize; 0] = [];$/;"	v	method:Indices::default
Elvish	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/shell.rs	/^    Elvish,$/;"	e	enum:Shell
ElvishGen	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/elvish.rs	/^impl<'a, 'b> ElvishGen<'a, 'b> {$/;"	c
ElvishGen	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/elvish.rs	/^pub struct ElvishGen<'a, 'b>$/;"	s
Empty	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    Empty,$/;"	e	enum:Entry
Empty	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    Empty,$/;"	e	enum:PopResult
EmptyValue	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    EmptyValue,$/;"	e	enum:ErrorKind
EmptyValues	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/settings.rs	/^    EmptyValues,$/;"	e	enum:ArgSettings
Encode	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/utf8.rs	/^impl Encode {$/;"	c
Encode	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/utf8.rs	/^pub struct Encode {$/;"	s
End	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^        End,$/;"	e	enum:range::Field
Entry	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/map.rs	/^    pub type Entry<'a, V> = btree_map::Entry<'a, usize, V>;$/;"	t	module:vec_map
Entry	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<'a, K, V, S> Entry<'a, K, V, S>$/;"	c
Entry	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^pub enum Entry<'a, K, V, S>$/;"	g
Entry	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^impl<A: Clone> Clone for Entry<A> {$/;"	c
Entry	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^impl<A> Entry<A> {$/;"	c
Entry	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^impl<A> From<CollisionNode<A>> for Entry<A> {$/;"	c
Entry	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^pub(crate) enum Entry<A> {$/;"	g
Entry	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^enum Entry<A> {$/;"	g
Entry	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^impl<A: Clone> Clone for Entry<A> {$/;"	c
Entry	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^impl<A: Clone> Entry<A> {$/;"	c
Entry	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<'a, K, V> Entry<'a, K, V>$/;"	c
Entry	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^pub enum Entry<'a, K, V>$/;"	g
Enum	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    Enum,$/;"	e	enum:Unexpected
Enum	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    Enum,$/;"	e	enum:Unsupported
Enum	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ast.rs	/^    Enum(Vec<Variant<'a>>),$/;"	e	enum:Data
EnumAccess	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^pub trait EnumAccess<'de>: Sized {$/;"	i
EnumDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'de, E> EnumDeserializer<'de, E>$/;"	c	module:content
EnumDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'de, E> de::EnumAccess<'de> for EnumDeserializer<'de, E>$/;"	c	module:content
EnumDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    pub struct EnumDeserializer<'de, E>$/;"	s	module:content
EnumRefDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'de, 'a, E> de::EnumAccess<'de> for EnumRefDeserializer<'a, 'de, E>$/;"	c	module:content
EnumRefDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    struct EnumRefDeserializer<'a, 'de: 'a, E>$/;"	s	module:content
Err	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    type Err = String;$/;"	t	implementation:AppSettings
Err	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/settings.rs	/^    type Err = String;$/;"	t	implementation:ArgSettings
Err	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/shell.rs	/^    type Err = String;$/;"	t	implementation:Shell
Err	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^            Err,$/;"	e	enum:deserialize::Field
Err	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/case.rs	/^    type Err = ();$/;"	t	implementation:RenameRule
Err	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    type Err = Error;$/;"	t	implementation:Uuid
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^impl Display for Error {$/;"	c
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^impl Error {$/;"	c
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^impl From<io::Error> for Error {$/;"	c
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^impl From<std_fmt::Error> for Error {$/;"	c
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^impl StdError for Error {$/;"	c
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^pub struct Error {$/;"	s
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/fmt.rs	/^    Error(T),$/;"	e	enum:Format
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    type Error = A::Error;$/;"	t
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    type Error: Error;$/;"	t	interface:Deserializer
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    type Error: Error;$/;"	t	interface:EnumAccess
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    type Error: Error;$/;"	t	interface:MapAccess
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    type Error: Error;$/;"	t	interface:SeqAccess
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    type Error: Error;$/;"	t	interface:VariantAccess
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^        type Error = A::Error;$/;"	t	module:private
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^        type Error = E;$/;"	t	module:private
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    type Error = A::Error;$/;"	t
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    type Error = E;$/;"	t
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl Display for Error {$/;"	c
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl de::Error for Error {$/;"	c
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl error::Error for Error {$/;"	c
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl ser::Error for Error {$/;"	c
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^pub struct Error {$/;"	s
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        type Error = E;$/;"	t	function:missing_field
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        type Error = E;$/;"	t	module:content
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    type Error = E;$/;"	t
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        type Error = E;$/;"	t	module:content
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        type Error = M::Error;$/;"	t	module:content
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    type Error = M::Error;$/;"	t
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    type Error = S::Error;$/;"	t
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^impl Display for Error {$/;"	c
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^impl error::Error for Error {$/;"	c
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^impl ser::Error for Error {$/;"	c
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^pub struct Error;$/;"	s
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/fmt.rs	/^    type Error = fmt::Error;$/;"	t	implementation:Formatter
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/fmt.rs	/^impl Error for fmt::Error {$/;"	c
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impossible.rs	/^    type Error = Error;$/;"	t
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    type Error: Error;$/;"	t	interface:SerializeMap
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    type Error: Error;$/;"	t	interface:SerializeSeq
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    type Error: Error;$/;"	t	interface:SerializeStruct
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    type Error: Error;$/;"	t	interface:SerializeStructVariant
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    type Error: Error;$/;"	t	interface:SerializeTuple
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    type Error: Error;$/;"	t	interface:SerializeTupleStruct
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    type Error: Error;$/;"	t	interface:SerializeTupleVariant
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    type Error: Error;$/;"	t	interface:Serializer
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/std_error.rs	/^pub trait Error: Debug + Display {$/;"	i
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/error.rs	/^    impl error::Error for Error {}$/;"	c	module:std_support
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/error.rs	/^impl Error {$/;"	c
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/error.rs	/^impl fmt::Display for Error {$/;"	c
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/error.rs	/^pub(crate) struct Error {$/;"	s
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/error.rs	/^    impl Error {$/;"	c	module:test_util
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/error.rs	/^    impl error::Error for Error {$/;"	c	module:std_support
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/error.rs	/^impl From<builder::Error> for Error {$/;"	c
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/error.rs	/^impl From<parser::Error> for Error {$/;"	c
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/error.rs	/^impl fmt::Display for Error {$/;"	c
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/error.rs	/^pub struct Error(Inner);$/;"	s
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/parser/error.rs	/^    impl error::Error for Error {}$/;"	c	module:std_support
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/parser/error.rs	/^impl Error {$/;"	c
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/parser/error.rs	/^impl fmt::Display for Error {$/;"	c
Error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/parser/error.rs	/^pub(crate) enum Error {$/;"	g
ErrorImpl	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^type ErrorImpl = ();$/;"	t
ErrorImpl	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^type ErrorImpl = Box<str>;$/;"	t
ErrorKind	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^pub enum ErrorKind {$/;"	g
Exact	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/parser/error.rs	/^    Exact(usize),$/;"	e	enum:ExpectedLength
Excluded	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^            Excluded,$/;"	e	enum:deserialize::Field
Expected	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^pub trait Expected {$/;"	i
ExpectedInMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl Expected for ExpectedInMap {$/;"	c
ExpectedInMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^struct ExpectedInMap(usize);$/;"	s
ExpectedInSeq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl Expected for ExpectedInSeq {$/;"	c
ExpectedInSeq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^struct ExpectedInSeq(usize);$/;"	s
ExpectedLength	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/parser/error.rs	/^impl fmt::Display for ExpectedLength {$/;"	c
ExpectedLength	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/parser/error.rs	/^pub(crate) enum ExpectedLength {$/;"	g
Expr	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/fragment.rs	/^    Expr(TokenStream),$/;"	e	enum:Fragment
Expr	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/fragment.rs	/^impl ToTokens for Expr {$/;"	c
Expr	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/fragment.rs	/^pub struct Expr(pub Fragment);$/;"	s
External	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    External,$/;"	e	enum:TagType
ExternallyTagged	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^    ExternallyTagged {$/;"	e	enum:StructVariant
ExternallyTagged	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^    ExternallyTagged {$/;"	e	enum:TupleVariant
F32	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        F32(f32),$/;"	e	enum:content::Content
F32	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        F32(f32),$/;"	e	enum:content::Content
F64	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        F64(f64),$/;"	e	enum:content::Content
F64	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        F64(f64),$/;"	e	enum:content::Content
FIXTURE	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v3.rs	/^    static FIXTURE: &'static [(&'static Uuid, &'static str, &'static str)] = &[$/;"	v	module:tests
FIXTURE	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v5.rs	/^    static FIXTURE: &'static [(&'static Uuid, &'static str, &'static str)] = &[$/;"	v	module:tests
Field	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^        enum Field {$/;"	g	function:deserialize
Field	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^        enum Field {$/;"	g	method:Duration::deserialize
Field	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^        enum Field {$/;"	g	method:SystemTime::deserialize
Field	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^        impl<'de> Deserialize<'de> for Field {$/;"	c	function:deserialize
Field	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^        impl<'de> Deserialize<'de> for Field {$/;"	c	method:Duration::deserialize
Field	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^        impl<'de> Deserialize<'de> for Field {$/;"	c	method:SystemTime::deserialize
Field	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    enum Field {$/;"	g	module:range
Field	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    impl<'de> Deserialize<'de> for Field {$/;"	c	module:range
Field	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ast.rs	/^pub struct Field<'a> {$/;"	s
Field	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    Field,$/;"	e	enum:Identifier
Field	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^impl Field {$/;"	c
Field	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^pub struct Field {$/;"	s
FieldVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^                impl<'de> Visitor<'de> for FieldVisitor {$/;"	c	method:Duration::deserialize::Field::deserialize
FieldVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^                impl<'de> Visitor<'de> for FieldVisitor {$/;"	c	method:SystemTime::deserialize::Field::deserialize
FieldVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^                impl<'de> Visitor<'de> for FieldVisitor {$/;"	c	method:deserialize::Field::deserialize
FieldVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^                struct FieldVisitor;$/;"	s	method:Duration::deserialize::Field::deserialize
FieldVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^                struct FieldVisitor;$/;"	s	method:SystemTime::deserialize::Field::deserialize
FieldVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^                struct FieldVisitor;$/;"	s	method:deserialize::Field::deserialize
FieldVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^            impl<'de> Visitor<'de> for FieldVisitor {$/;"	c	method:range::Field::deserialize
FieldVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^            struct FieldVisitor;$/;"	s	method:range::Field::deserialize
FindTyParams	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/bound.rs	/^    impl<'ast> Visit<'ast> for FindTyParams<'ast> {$/;"	c	function:with_bound
FindTyParams	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/bound.rs	/^    struct FindTyParams<'ast> {$/;"	s	function:with_bound
First	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^        type First = A;$/;"	t	implementation:private::B
First	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^        type First;$/;"	t	interface:private::Pair
First	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    pub type First<T> = <T as Pair>::First;$/;"	t	module:private
Fish	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/shell.rs	/^    Fish,$/;"	e	enum:Shell
FishGen	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/fish.rs	/^impl<'a, 'b> FishGen<'a, 'b> {$/;"	c
FishGen	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/fish.rs	/^pub struct FishGen<'a, 'b>$/;"	s
Flag	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    Flag,$/;"	e	enum:ParseResult
FlagBuilder	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^impl<'a, 'b, 'z> From<&'z Arg<'a, 'b>> for FlagBuilder<'a, 'b> {$/;"	c
FlagBuilder	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^impl<'a, 'b> From<Arg<'a, 'b>> for FlagBuilder<'a, 'b> {$/;"	c
FlagBuilder	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^impl<'n, 'e> AnyArg<'n, 'e> for FlagBuilder<'n, 'e> {$/;"	c
FlagBuilder	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^impl<'n, 'e> DispOrder for FlagBuilder<'n, 'e> {$/;"	c
FlagBuilder	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^impl<'n, 'e> Display for FlagBuilder<'n, 'e> {$/;"	c
FlagBuilder	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^impl<'n, 'e> FlagBuilder<'n, 'e> {$/;"	c
FlagBuilder	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^impl<'n, 'e> PartialEq for FlagBuilder<'n, 'e> {$/;"	c
FlagBuilder	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^pub struct FlagBuilder<'n, 'e>$/;"	s
FlatInternallyTaggedAccess	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^impl<'a, 'de, E> MapAccess<'de> for FlatInternallyTaggedAccess<'a, 'de, E>$/;"	c
FlatInternallyTaggedAccess	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^pub struct FlatInternallyTaggedAccess<'a, 'de: 'a, E> {$/;"	s
FlatMapAccess	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^impl<'a, 'de, E> FlatMapAccess<'a, 'de, E> {$/;"	c
FlatMapAccess	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^impl<'a, 'de, E> MapAccess<'de> for FlatMapAccess<'a, 'de, E>$/;"	c
FlatMapAccess	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^pub struct FlatMapAccess<'a, 'de: 'a, E> {$/;"	s
FlatMapDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^impl<'a, 'de, E> Deserializer<'de> for FlatMapDeserializer<'a, 'de, E>$/;"	c
FlatMapDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^impl<'a, 'de, E> FlatMapDeserializer<'a, 'de, E>$/;"	c
FlatMapDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^pub struct FlatMapDeserializer<'a, 'de: 'a, E>($/;"	s
FlatMapSerializeMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^impl<'a, M> ser::SerializeMap for FlatMapSerializeMap<'a, M>$/;"	c
FlatMapSerializeMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^pub struct FlatMapSerializeMap<'a, M: 'a>(&'a mut M);$/;"	s
FlatMapSerializeStruct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^impl<'a, M> ser::SerializeStruct for FlatMapSerializeStruct<'a, M>$/;"	c
FlatMapSerializeStruct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^pub struct FlatMapSerializeStruct<'a, M: 'a>(&'a mut M);$/;"	s
FlatMapSerializeStructVariantAsMapValue	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^impl<'a, M> FlatMapSerializeStructVariantAsMapValue<'a, M>$/;"	c
FlatMapSerializeStructVariantAsMapValue	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^impl<'a, M> ser::SerializeStructVariant for FlatMapSerializeStructVariantAsMapValue<'a, M>$/;"	c
FlatMapSerializeStructVariantAsMapValue	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^pub struct FlatMapSerializeStructVariantAsMapValue<'a, M: 'a> {$/;"	s
FlatMapSerializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^impl<'a, M> FlatMapSerializer<'a, M>$/;"	c
FlatMapSerializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^impl<'a, M> Serializer for FlatMapSerializer<'a, M>$/;"	c
FlatMapSerializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^pub struct FlatMapSerializer<'a, M: 'a>(pub &'a mut M);$/;"	s
FlatStructAccess	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^impl<'a, 'de, E> FlatStructAccess<'a, 'de, E> {$/;"	c
FlatStructAccess	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^impl<'a, 'de, E> MapAccess<'de> for FlatStructAccess<'a, 'de, E>$/;"	c
FlatStructAccess	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^pub struct FlatStructAccess<'a, 'de: 'a, E> {$/;"	s
Float	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    Float(f64),$/;"	e	enum:Unexpected
Float	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    Float,$/;"	e	enum:Unsupported
Focus	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^impl<'a, A> Clone for Focus<'a, A>$/;"	c
Focus	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^impl<'a, A> Focus<'a, A>$/;"	c
Focus	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^impl<'a, A> IntoIterator for Focus<'a, A>$/;"	c
Focus	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^pub enum Focus<'a, A> {$/;"	g
FocusMut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^impl<'a, A> FocusMut<'a, A>$/;"	c
FocusMut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^impl<'a, A> Into<Focus<'a, A>> for FocusMut<'a, A>$/;"	c
FocusMut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^impl<'a, A> IntoIterator for FocusMut<'a, A>$/;"	c
FocusMut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^pub enum FocusMut<'a, A> {$/;"	g
Format	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    Format,$/;"	e	enum:ErrorKind
Format	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/fmt.rs	/^impl<T: AsRef<str>> Format<T> {$/;"	c
Format	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/fmt.rs	/^impl<T: AsRef<str>> fmt::Display for Format<T> {$/;"	c
Format	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/fmt.rs	/^impl<T: fmt::Display> Format<T> {$/;"	c
Format	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/fmt.rs	/^impl<T: fmt::Display> fmt::Display for Format<T> {$/;"	c
Format	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/fmt.rs	/^pub enum Format<T> {$/;"	g
Formatter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/fmt.rs	/^impl<'a, 'b> Serializer for &'a mut fmt::Formatter<'b> {$/;"	c
Fragment	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/fragment.rs	/^impl AsRef<TokenStream> for Fragment {$/;"	c
Fragment	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/fragment.rs	/^pub enum Fragment {$/;"	g
FromArgMatches	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/lib.rs	/^    pub trait FromArgMatches: Sized {$/;"	i	module:derive
FromPrimitive	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/from_primitive.rs	/^pub trait FromPrimitive: Sized {$/;"	i
Full	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    Full(A, usize),$/;"	e	enum:PushResult
Full	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    Full(RRBPool<A>, TreeFocusMut<'a, A>),$/;"	e	enum:FocusMut
Full	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    Full(TreeFocus<A>),$/;"	e	enum:Focus
Full	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    Full(RRBPool<A>, RRB<A>),$/;"	e	enum:VectorInner
Future	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    Future,$/;"	e	enum:Variant
Global	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/settings.rs	/^    Global,$/;"	e	enum:ArgSettings
GlobalVersion	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    GlobalVersion,$/;"	e	enum:AppSettings
Good	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/fmt.rs	/^    Good(T),$/;"	e	enum:Format
HashBits	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^pub(crate) type HashBits = <HashWidth as Bits>::Store; \/\/ a uint of HASH_SIZE bits$/;"	t
HashLevelSize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/config.rs	/^pub(crate) type HashLevelSize = U5;$/;"	t
HashMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/arbitrary.rs	/^impl<K, V, S> Arbitrary for HashMap<K, V, S>$/;"	c
HashMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<'a, BK, K, V, S> Index<&'a BK> for HashMap<K, V, S>$/;"	c
HashMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<'a, BK, K, V, S> IndexMut<&'a BK> for HashMap<K, V, S>$/;"	c
HashMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<'a, K, V, S> Add for &'a HashMap<K, V, S>$/;"	c
HashMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<'a, K, V, S> From<&'a Vec<(K, V)>> for HashMap<K, V, S>$/;"	c
HashMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<'a, K, V, S> From<&'a [(K, V)]> for HashMap<K, V, S>$/;"	c
HashMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<'a, K, V, S> From<&'a collections::BTreeMap<K, V>> for HashMap<K, V, S>$/;"	c
HashMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<'a, K, V, S> From<&'a collections::HashMap<K, V>> for HashMap<K, V, S>$/;"	c
HashMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<'a, K, V, S> IntoIterator for &'a HashMap<K, V, S>$/;"	c
HashMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<'m, 'k, 'v, K, V, OK, OV, SA, SB> From<&'m HashMap<&'k K, &'v V, SA>> for HashMap<OK, OV, S/;"	c
HashMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<K, V, S, RK, RV> Extend<(RK, RV)> for HashMap<K, V, S>$/;"	c
HashMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<K, V, S> Add for HashMap<K, V, S>$/;"	c
HashMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<K, V, S> AsRef<HashMap<K, V, S>> for HashMap<K, V, S> {$/;"	c
HashMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<K, V, S> Clone for HashMap<K, V, S>$/;"	c
HashMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<K, V, S> Debug for HashMap<K, V, S>$/;"	c
HashMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<K, V, S> Default for HashMap<K, V, S>$/;"	c
HashMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<K, V, S> Eq for HashMap<K, V, S>$/;"	c
HashMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<K, V, S> From<Vec<(K, V)>> for HashMap<K, V, S>$/;"	c
HashMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<K, V, S> From<collections::BTreeMap<K, V>> for HashMap<K, V, S>$/;"	c
HashMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<K, V, S> From<collections::HashMap<K, V>> for HashMap<K, V, S>$/;"	c
HashMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<K, V, S> FromIterator<(K, V)> for HashMap<K, V, S>$/;"	c
HashMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<K, V, S> Hash for HashMap<K, V, S>$/;"	c
HashMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<K, V, S> HashMap<K, V, S> {$/;"	c
HashMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<K, V, S> HashMap<K, V, S>$/;"	c
HashMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<K, V, S> IntoIterator for HashMap<K, V, S>$/;"	c
HashMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<K, V, S> Ord for HashMap<K, V, S>$/;"	c
HashMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<K, V, S> PartialEq for HashMap<K, V, S>$/;"	c
HashMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<K, V, S> PartialOrd for HashMap<K, V, S>$/;"	c
HashMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<K, V, S> Sum for HashMap<K, V, S>$/;"	c
HashMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<K, V> HashMap<K, V, RandomState> {$/;"	c
HashMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<K, V> HashMap<K, V, RandomState>$/;"	c
HashMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^pub struct HashMap<K, V, S = RandomState> {$/;"	s
HashMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/quickcheck.rs	/^impl<K, V, S> Arbitrary for HashMap<K, V, S>$/;"	c
HashMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ser.rs	/^impl<'de, K, V, S> Deserialize<'de> for HashMap<K, V, S>$/;"	c
HashMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ser.rs	/^impl<K, V, S> Serialize for HashMap<K, V, S>$/;"	c
HashMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<'de, K, V, S, E> IntoDeserializer<'de, E> for HashMap<K, V, S>$/;"	c
HashSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/arbitrary.rs	/^impl<A, S> Arbitrary for HashSet<A, S>$/;"	c
HashSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^impl<'a, A, S> Add for &'a HashSet<A, S>$/;"	c
HashSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^impl<'a, A, S> From<&'a BTreeSet<A>> for HashSet<A, S>$/;"	c
HashSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^impl<'a, A, S> From<&'a OrdSet<A>> for HashSet<A, S>$/;"	c
HashSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^impl<'a, A, S> From<&'a Vec<A>> for HashSet<A, S>$/;"	c
HashSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^impl<'a, A, S> From<&'a [A]> for HashSet<A, S>$/;"	c
HashSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^impl<'a, A, S> From<&'a collections::HashSet<A>> for HashSet<A, S>$/;"	c
HashSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^impl<'a, A, S> IntoIterator for &'a HashSet<A, S>$/;"	c
HashSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^impl<'a, A, S> Mul for &'a HashSet<A, S>$/;"	c
HashSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^impl<'s, 'a, A, OA, SA, SB> From<&'s HashSet<&'a A, SA>> for HashSet<OA, SB>$/;"	c
HashSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^impl<A, RA, S> FromIterator<RA> for HashSet<A, S>$/;"	c
HashSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^impl<A, S, R> Extend<R> for HashSet<A, S>$/;"	c
HashSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^impl<A, S> Add for HashSet<A, S>$/;"	c
HashSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^impl<A, S> Clone for HashSet<A, S>$/;"	c
HashSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^impl<A, S> Debug for HashSet<A, S>$/;"	c
HashSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^impl<A, S> Default for HashSet<A, S>$/;"	c
HashSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^impl<A, S> Eq for HashSet<A, S>$/;"	c
HashSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^impl<A, S> From<OrdSet<A>> for HashSet<A, S>$/;"	c
HashSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^impl<A, S> From<Vec<A>> for HashSet<A, S>$/;"	c
HashSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^impl<A, S> From<collections::HashSet<A>> for HashSet<A, S>$/;"	c
HashSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^impl<A, S> Hash for HashSet<A, S>$/;"	c
HashSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^impl<A, S> HashSet<A, S> {$/;"	c
HashSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^impl<A, S> HashSet<A, S>$/;"	c
HashSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^impl<A, S> IntoIterator for HashSet<A, S>$/;"	c
HashSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^impl<A, S> Mul for HashSet<A, S>$/;"	c
HashSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^impl<A, S> Ord for HashSet<A, S>$/;"	c
HashSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^impl<A, S> PartialEq for HashSet<A, S>$/;"	c
HashSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^impl<A, S> PartialOrd for HashSet<A, S>$/;"	c
HashSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^impl<A, S> Sum for HashSet<A, S>$/;"	c
HashSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^impl<A> HashSet<A, RandomState> {$/;"	c
HashSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^impl<A> HashSet<A, RandomState>$/;"	c
HashSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^pub struct HashSet<A, S = RandomState> {$/;"	s
HashSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/quickcheck.rs	/^impl<A, S> Arbitrary for HashSet<A, S>$/;"	c
HashSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ser.rs	/^impl<'de, A: Deserialize<'de> + Hash + Eq + Clone, S: BuildHasher + Default> Deserialize<'de>$/;"	c
HashSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ser.rs	/^impl<A: Serialize + Hash + Eq + Clone, S: BuildHasher + Default> Serialize for HashSet<A, S> {$/;"	c
HashSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<'de, T, S, E> IntoDeserializer<'de, E> for HashSet<T, S>$/;"	c
HashValue	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^pub trait HashValue {$/;"	i
HashWidth	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^pub(crate) type HashWidth = <U2 as Pow<HashLevelSize>>::Output;$/;"	t
Hasher	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/test.rs	/^    type Hasher = MetroHash64;$/;"	t	implementation:MetroHashBuilder
Help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^impl<'a> Help<'a> {$/;"	c
Help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^pub struct Help<'a> {$/;"	s
Help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    Help,$/;"	e	enum:UsageToken
HelpDisplayed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    HelpDisplayed,$/;"	e	enum:ErrorKind
Hidden	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    Hidden,$/;"	e	enum:AppSettings
Hidden	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/settings.rs	/^    Hidden,$/;"	e	enum:ArgSettings
HiddenLongHelp	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/settings.rs	/^    HiddenLongHelp,$/;"	e	enum:ArgSettings
HiddenShortHelp	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/settings.rs	/^    HiddenShortHelp,$/;"	e	enum:ArgSettings
HideDefaultValue	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/settings.rs	/^    HideDefaultValue,$/;"	e	enum:ArgSettings
HideEnvValues	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/settings.rs	/^    HideEnvValues,$/;"	e	enum:ArgSettings
HidePossibleValues	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/settings.rs	/^    HidePossibleValues,$/;"	e	enum:ArgSettings
HidePossibleValuesInHelp	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    HidePossibleValuesInHelp,$/;"	e	enum:AppSettings
High	/home/darrion/projects/ClearHeadToDo/src/task.rs	/^    High = 2,$/;"	e	enum:PriEnum
Hyphenated	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^impl Hyphenated {$/;"	c
Hyphenated	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^pub struct Hyphenated(Uuid);$/;"	s
HyphenatedRef	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^impl<'a> HyphenatedRef<'a> {$/;"	c
HyphenatedRef	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^pub struct HyphenatedRef<'a>(&'a Uuid);$/;"	s
I16	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        I16(i16),$/;"	e	enum:content::Content
I16	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        I16(i16),$/;"	e	enum:content::Content
I32	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        I32(i32),$/;"	e	enum:content::Content
I32	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        I32(i32),$/;"	e	enum:content::Content
I64	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        I64(i64),$/;"	e	enum:content::Content
I64	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        I64(i64),$/;"	e	enum:content::Content
I8	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        I8(i8),$/;"	e	enum:content::Content
I8	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        I8(i8),$/;"	e	enum:content::Content
Ident	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/symbol.rs	/^impl PartialEq<Symbol> for Ident {$/;"	c
Ident	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/symbol.rs	/^impl<'a> PartialEq<Symbol> for &'a Ident {$/;"	c
Identifier	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^impl Identifier {$/;"	c
Identifier	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^pub enum Identifier {$/;"	g
IdentifierDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^pub trait IdentifierDeserializer<'de, E: Error> {$/;"	i
IgnoredAny	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/ignored_any.rs	/^impl<'de> Deserialize<'de> for IgnoredAny {$/;"	c
IgnoredAny	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/ignored_any.rs	/^impl<'de> Visitor<'de> for IgnoredAny {$/;"	c
IgnoredAny	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/ignored_any.rs	/^pub struct IgnoredAny;$/;"	s
Impossible	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impossible.rs	/^impl<Ok, Error> SerializeMap for Impossible<Ok, Error>$/;"	c
Impossible	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impossible.rs	/^impl<Ok, Error> SerializeSeq for Impossible<Ok, Error>$/;"	c
Impossible	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impossible.rs	/^impl<Ok, Error> SerializeStruct for Impossible<Ok, Error>$/;"	c
Impossible	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impossible.rs	/^impl<Ok, Error> SerializeStructVariant for Impossible<Ok, Error>$/;"	c
Impossible	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impossible.rs	/^impl<Ok, Error> SerializeTuple for Impossible<Ok, Error>$/;"	c
Impossible	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impossible.rs	/^impl<Ok, Error> SerializeTupleStruct for Impossible<Ok, Error>$/;"	c
Impossible	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impossible.rs	/^impl<Ok, Error> SerializeTupleVariant for Impossible<Ok, Error>$/;"	c
Impossible	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impossible.rs	/^pub struct Impossible<Ok, Error> {$/;"	s
InPlaceImplGenerics	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^impl<'a> ToTokens for InPlaceImplGenerics<'a> {$/;"	c
InPlaceImplGenerics	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^struct InPlaceImplGenerics<'a>(&'a Parameters);$/;"	s
InPlaceSeed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^impl<'a, 'de, T> DeserializeSeed<'de> for InPlaceSeed<'a, T>$/;"	c
InPlaceSeed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^pub struct InPlaceSeed<'a, T: 'a>(pub &'a mut T);$/;"	s
InPlaceTypeGenerics	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^impl<'a> ToTokens for InPlaceTypeGenerics<'a> {$/;"	c
InPlaceTypeGenerics	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^struct InPlaceTypeGenerics<'a>(&'a Parameters);$/;"	s
Included	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^            Included,$/;"	e	enum:deserialize::Field
Indices	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^impl<'a> Default for Indices<'a> {$/;"	c
Indices	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^impl<'a> DoubleEndedIterator for Indices<'a> {$/;"	c
Indices	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^impl<'a> ExactSizeIterator for Indices<'a> {}$/;"	c
Indices	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^impl<'a> Iterator for Indices<'a> {$/;"	c
Indices	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^pub struct Indices<'a> {$/;"	s
InferSubcommands	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    InferSubcommands,$/;"	e	enum:AppSettings
Inline	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    Inline(RRBPool<A>, InlineArray<A, RRB<A>>),$/;"	e	enum:VectorInner
Inner	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/error.rs	/^enum Inner {$/;"	g
Insert	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^pub(crate) enum Insert<A> {$/;"	g
Insert	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/tests/hashset.rs	/^    Insert(A),$/;"	e	enum:Action
Insert	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/tests/ordset.rs	/^    Insert(A),$/;"	e	enum:Action
Insert	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/tests/vector.rs	/^    Insert(usize, A),$/;"	e	enum:Action
InsertAction	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^enum InsertAction<A> {$/;"	g
InsertAt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    InsertAt,$/;"	e	enum:InsertAction
InsertSplit	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    InsertSplit(Node<A>, A, Node<A>),$/;"	e	enum:InsertAction
Integer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    Integer,$/;"	e	enum:Unsupported
Internal	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    Internal { tag: String },$/;"	e	enum:TagType
InternallyTagged	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^    InternallyTagged {$/;"	e	enum:StructVariant
InternallyTaggedUnitVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'a> InternallyTaggedUnitVisitor<'a> {$/;"	c	module:content
InternallyTaggedUnitVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'de, 'a> Visitor<'de> for InternallyTaggedUnitVisitor<'a> {$/;"	c	module:content
InternallyTaggedUnitVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    pub struct InternallyTaggedUnitVisitor<'a> {$/;"	s	module:content
IntoApp	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/lib.rs	/^    pub trait IntoApp {$/;"	i	module:derive
IntoDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^pub trait IntoDeserializer<'de, E: Error = value::Error> {$/;"	i
IntoDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<'de, E> IntoDeserializer<'de, E> for !$/;"	c
IntoDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<'de, E> IntoDeserializer<'de, E> for ()$/;"	c
IntoIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    type IntoIter = ConsumingIter<(K, V)>;$/;"	t
IntoIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    type IntoIter = Iter<'a, K, V>;$/;"	t
IntoIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    type IntoIter = ConsumingIter<Self::Item>;$/;"	t
IntoIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    type IntoIter = Iter<'a, A>;$/;"	t
IntoIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    type IntoIter = ConsumingIter<(K, V)>;$/;"	t
IntoIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    type IntoIter = Iter<'a, K, V>;$/;"	t
IntoIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    type IntoIter = ConsumingIter<A>;$/;"	t
IntoIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    type IntoIter = Iter<'a, A>;$/;"	t
IntoIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    type IntoIter = Iter<'a, A>;$/;"	t
IntoIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    type IntoIter = IterMut<'a, A>;$/;"	t
IntoIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    type IntoIter = ConsumingIter<A>;$/;"	t	implementation:Vector
IntoIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    type IntoIter = Iter<'a, A>;$/;"	t	implementation:Vector
IntoIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/rayon.rs	/^    type IntoIter = Iter<'a, A>;$/;"	t
IntoIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/rayon.rs	/^    type IntoIter = IterMut<'a, A>;$/;"	t
InvalidCharacter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/parser/error.rs	/^    InvalidCharacter {$/;"	e	enum:Error
InvalidGroupCount	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/parser/error.rs	/^    InvalidGroupCount {$/;"	e	enum:Error
InvalidGroupLength	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/parser/error.rs	/^    InvalidGroupLength {$/;"	e	enum:Error
InvalidLength	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/parser/error.rs	/^    InvalidLength {$/;"	e	enum:Error
InvalidSubcommand	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    InvalidSubcommand,$/;"	e	enum:ErrorKind
InvalidUtf8	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    InvalidUtf8,$/;"	e	enum:ErrorKind
InvalidValue	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    InvalidValue,$/;"	e	enum:ErrorKind
Io	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    Io,$/;"	e	enum:ErrorKind
IpAddr	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'de> Deserialize<'de> for net::IpAddr {$/;"	c
IpAddr	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^impl Serialize for net::IpAddr {$/;"	c
IpAddrVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^            impl<'de> Visitor<'de> for IpAddrVisitor {$/;"	c	method:IpAddr::deserialize
IpAddrVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^            struct IpAddrVisitor;$/;"	s	method:IpAddr::deserialize
Ipv4Addr	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^impl Serialize for net::Ipv4Addr {$/;"	c
Ipv6Addr	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^impl Serialize for net::Ipv6Addr {$/;"	c
Item	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    type Item = &'a OsStr;$/;"	t	implementation:OsValues
Item	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    type Item = &'a str;$/;"	t	implementation:Values
Item	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    type Item = usize;$/;"	t	implementation:Indices
Item	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/map.rs	/^        type Item = (usize, &'a V);$/;"	t	implementation:vec_map::Iter
Item	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/osstringext.rs	/^    type Item = &'a OsStr;$/;"	t	implementation:OsSplit
Item	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    type Item = &'a K;$/;"	t	implementation:Keys
Item	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    type Item = &'a V;$/;"	t	implementation:Values
Item	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    type Item = (&'a K, &'a V);$/;"	t
Item	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    type Item = (&'a K, &'a V);$/;"	t	implementation:Iter
Item	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    type Item = (&'a K, &'a mut V);$/;"	t
Item	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    type Item = (K, V);$/;"	t
Item	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    type Item = A;$/;"	t
Item	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    type Item = &'a A;$/;"	t
Item	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    type Item = A;$/;"	t
Item	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    type Item = &'a A;$/;"	t	implementation:Iter
Item	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    type Item = A;$/;"	t
Item	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    type Item = DiffItem<'a, A>;$/;"	t
Item	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    type Item = (&'a A, HashBits);$/;"	t
Item	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    type Item = (&'a mut A, HashBits);$/;"	t
Item	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    type Item = (A, HashBits);$/;"	t
Item	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    type Item = &'a K;$/;"	t
Item	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    type Item = &'a V;$/;"	t
Item	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    type Item = (&'a K, &'a V);$/;"	t
Item	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    type Item = (K, V);$/;"	t
Item	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    type Item = DiffItem<'a, K, V>;$/;"	t
Item	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    type Item = &'a A;$/;"	t
Item	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    type Item = A;$/;"	t
Item	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    type Item = DiffItem<'a, A>;$/;"	t
Item	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    type Item = &'a A;$/;"	t
Item	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    type Item = &'a mut A;$/;"	t
Item	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    type Item = &'a A;$/;"	t	implementation:Iter
Item	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    type Item = &'a A;$/;"	t	implementation:Vector
Item	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    type Item = &'a [A];$/;"	t	implementation:Chunks
Item	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    type Item = &'a mut A;$/;"	t
Item	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    type Item = &'a mut [A];$/;"	t	implementation:ChunksMut
Item	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    type Item = A;$/;"	t	implementation:ConsumingIter
Item	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    type Item = A;$/;"	t	implementation:Vector
Item	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/rayon.rs	/^    type Item = &'a A;$/;"	t
Item	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/rayon.rs	/^    type Item = &'a mut A;$/;"	t
Iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/map.rs	/^    impl<'a, V: 'a + Debug> Debug for Iter<'a, V> {$/;"	c	module:vec_map
Iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/map.rs	/^    impl<'a, V: 'a> DoubleEndedIterator for Iter<'a, V> {$/;"	c	module:vec_map
Iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/map.rs	/^    impl<'a, V: 'a> Iterator for Iter<'a, V> {$/;"	c	module:vec_map
Iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/map.rs	/^    pub struct Iter<'a, V: 'a> {$/;"	s	module:vec_map
Iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<'a, K, V> ExactSizeIterator for Iter<'a, K, V> {}$/;"	c
Iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<'a, K, V> FusedIterator for Iter<'a, K, V> {}$/;"	c
Iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<'a, K, V> Iterator for Iter<'a, K, V> {$/;"	c
Iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^pub struct Iter<'a, K, V> {$/;"	s
Iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^impl<'a, A> ExactSizeIterator for Iter<'a, A> {}$/;"	c
Iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^impl<'a, A> FusedIterator for Iter<'a, A> {}$/;"	c
Iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^impl<'a, A> Iterator for Iter<'a, A>$/;"	c
Iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^pub struct Iter<'a, A> {$/;"	s
Iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^impl<'a, A: 'a + BTreeValue> DoubleEndedIterator for Iter<'a, A> {$/;"	c
Iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^impl<'a, A: 'a + BTreeValue> Iterator for Iter<'a, A> {$/;"	c
Iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^impl<'a, A: BTreeValue> Iter<'a, A> {$/;"	c
Iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^pub struct Iter<'a, A> {$/;"	s
Iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^impl<'a, A> ExactSizeIterator for Iter<'a, A> where A: 'a {}$/;"	c
Iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^impl<'a, A> FusedIterator for Iter<'a, A> where A: 'a {}$/;"	c
Iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^impl<'a, A> Iter<'a, A>$/;"	c
Iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^impl<'a, A> Iterator for Iter<'a, A>$/;"	c
Iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^pub(crate) struct Iter<'a, A> {$/;"	s
Iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<'a, K, V> DoubleEndedIterator for Iter<'a, K, V>$/;"	c
Iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<'a, K, V> ExactSizeIterator for Iter<'a, K, V> where (K, V): 'a + BTreeValue {}$/;"	c
Iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<'a, K, V> Iterator for Iter<'a, K, V>$/;"	c
Iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^pub struct Iter<'a, K, V> {$/;"	s
Iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^impl<'a, A> DoubleEndedIterator for Iter<'a, A>$/;"	c
Iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^impl<'a, A> ExactSizeIterator for Iter<'a, A> where A: 'a + Ord {}$/;"	c
Iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^impl<'a, A> Iterator for Iter<'a, A>$/;"	c
Iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^pub struct Iter<'a, A> {$/;"	s
Iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<'a, A: Clone> DoubleEndedIterator for Iter<'a, A> {$/;"	c
Iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<'a, A: Clone> ExactSizeIterator for Iter<'a, A> {}$/;"	c
Iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<'a, A: Clone> FusedIterator for Iter<'a, A> {}$/;"	c
Iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<'a, A: Clone> Iter<'a, A> {$/;"	c
Iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<'a, A: Clone> Iterator for Iter<'a, A> {$/;"	c
Iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^pub struct Iter<'a, A> {$/;"	s
Iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/rayon.rs	/^    type Iter = ParIter<'a, A>;$/;"	t
Iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/rayon.rs	/^    type Iter = ParIterMut<'a, A>;$/;"	t
IterItem	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^enum IterItem<'a, A> {$/;"	g
IterMut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<'a, K, V> ExactSizeIterator for IterMut<'a, K, V>$/;"	c
IterMut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<'a, K, V> FusedIterator for IterMut<'a, K, V>$/;"	c
IterMut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<'a, K, V> Iterator for IterMut<'a, K, V>$/;"	c
IterMut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^pub struct IterMut<'a, K, V>$/;"	s
IterMut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^impl<'a, A> ExactSizeIterator for IterMut<'a, A> where A: Clone + 'a {}$/;"	c
IterMut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^impl<'a, A> FusedIterator for IterMut<'a, A> where A: Clone + 'a {}$/;"	c
IterMut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^impl<'a, A> IterMut<'a, A>$/;"	c
IterMut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^impl<'a, A> Iterator for IterMut<'a, A>$/;"	c
IterMut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^pub(crate) struct IterMut<'a, A> {$/;"	s
IterMut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<'a, A: Clone> ExactSizeIterator for IterMut<'a, A> {}$/;"	c
IterMut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<'a, A: Clone> FusedIterator for IterMut<'a, A> {}$/;"	c
IterMut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<'a, A> DoubleEndedIterator for IterMut<'a, A>$/;"	c
IterMut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<'a, A> IterMut<'a, A>$/;"	c
IterMut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<'a, A> Iterator for IterMut<'a, A>$/;"	c
IterMut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^pub struct IterMut<'a, A> {$/;"	s
JoinLeft	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/tests/vector.rs	/^    JoinLeft(Vec<A>),$/;"	e	enum:Action
JoinRight	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/tests/vector.rs	/^    JoinRight(Vec<A>),$/;"	e	enum:Action
KebabCase	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/case.rs	/^    KebabCase,$/;"	e	enum:RenameRule
Key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    type Key = K;$/;"	t
Key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    type Key = A;$/;"	t
Key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    type Key;$/;"	t	interface:BTreeValue
Key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    type Key: Eq;$/;"	t	interface:HashValue
Key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    type Key = K;$/;"	t	implementation:V
Key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    type Key = A;$/;"	t	implementation:Value
Keys	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<'a, K, V> ExactSizeIterator for Keys<'a, K, V> {}$/;"	c
Keys	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<'a, K, V> FusedIterator for Keys<'a, K, V> {}$/;"	c
Keys	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<'a, K, V> Iterator for Keys<'a, K, V> {$/;"	c
Keys	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^pub struct Keys<'a, K, V> {$/;"	s
Keys	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<'a, K, V> DoubleEndedIterator for Keys<'a, K, V>$/;"	c
Keys	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<'a, K, V> ExactSizeIterator for Keys<'a, K, V>$/;"	c
Keys	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<'a, K, V> Iterator for Keys<'a, K, V>$/;"	c
Keys	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^pub struct Keys<'a, K, V> {$/;"	s
Last	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/settings.rs	/^    Last,$/;"	e	enum:ArgSettings
Left	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/util.rs	/^    Left,$/;"	e	enum:Side
ListTasks	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    ListTasks,$/;"	e	enum:CliSubCommand
Lock	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/sync.rs	/^    impl<A> Clone for Lock<A> {$/;"	c	module:lock
Lock	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/sync.rs	/^    impl<A> Lock<A> {$/;"	c	module:lock
Lock	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/sync.rs	/^    pub(crate) struct Lock<A> {$/;"	s	module:lock
LolHasher	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/test.rs	/^impl<N: Unsigned> Default for LolHasher<N> {$/;"	c
LolHasher	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/test.rs	/^impl<N: Unsigned> Hasher for LolHasher<N> {$/;"	c
LolHasher	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/test.rs	/^impl<N: Unsigned> LolHasher<N> {$/;"	c
LolHasher	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/test.rs	/^pub(crate) struct LolHasher<N: Unsigned = U64> {$/;"	s
Long	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    Long,$/;"	e	enum:UsageToken
Low	/home/darrion/projects/ClearHeadToDo/src/task.rs	/^    Low = 4,$/;"	e	enum:PriEnum
LowIndexMultiplePositional	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    LowIndexMultiplePositional,$/;"	e	enum:AppSettings
LowerCase	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/case.rs	/^    LowerCase,$/;"	e	enum:RenameRule
Mac	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    Mac,$/;"	e	enum:Version
Map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    Map,$/;"	e	enum:Unexpected
Map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        Map(Vec<(Content<'de>, Content<'de>)>),$/;"	e	enum:content::Content
Map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        Map(Vec<(Content, Content)>),$/;"	e	enum:content::Content
MapAccess	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^pub trait MapAccess<'de> {$/;"	i
MapAccessDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<'de, A> de::Deserializer<'de> for MapAccessDeserializer<A>$/;"	c
MapAccessDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<'de, A> de::EnumAccess<'de> for MapAccessDeserializer<A>$/;"	c
MapAccessDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<A> MapAccessDeserializer<A> {$/;"	c
MapAccessDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^pub struct MapAccessDeserializer<A> {$/;"	s
MapAsEnum	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    impl<'de, A> VariantAccess<'de> for MapAsEnum<A>$/;"	c	module:private
MapAsEnum	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    pub struct MapAsEnum<A> {$/;"	s	module:private
MapDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<'de, I, E> Clone for MapDeserializer<'de, I, E>$/;"	c
MapDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<'de, I, E> Debug for MapDeserializer<'de, I, E>$/;"	c
MapDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<'de, I, E> MapDeserializer<'de, I, E>$/;"	c
MapDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<'de, I, E> de::Deserializer<'de> for MapDeserializer<'de, I, E>$/;"	c
MapDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<'de, I, E> de::MapAccess<'de> for MapDeserializer<'de, I, E>$/;"	c
MapDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<'de, I, E> de::SeqAccess<'de> for MapDeserializer<'de, I, E>$/;"	c
MapDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^pub struct MapDeserializer<'de, I, E>$/;"	s
MapDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'de, E> MapDeserializer<'de, E>$/;"	c	module:content
MapDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'de, E> de::Deserializer<'de> for MapDeserializer<'de, E>$/;"	c	module:content
MapDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'de, E> de::MapAccess<'de> for MapDeserializer<'de, E>$/;"	c	module:content
MapDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    struct MapDeserializer<'de, E>$/;"	s	module:content
MapRefDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'a, 'de, E> MapRefDeserializer<'a, 'de, E>$/;"	c	module:content
MapRefDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'de, 'a, E> de::Deserializer<'de> for MapRefDeserializer<'a, 'de, E>$/;"	c	module:content
MapRefDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'de, 'a, E> de::MapAccess<'de> for MapRefDeserializer<'a, 'de, E>$/;"	c	module:content
MapRefDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    struct MapRefDeserializer<'a, 'de: 'a, E>$/;"	s	module:content
MapVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ser.rs	/^impl<'de, S, K, V> MapVisitor<'de, S, K, V>$/;"	c
MapVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ser.rs	/^impl<'de, S, K, V> Visitor<'de> for MapVisitor<'de, S, K, V>$/;"	c
MapVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ser.rs	/^struct MapVisitor<'de, S, K, V>$/;"	s
Match	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/fragment.rs	/^impl ToTokens for Match {$/;"	c
Match	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/fragment.rs	/^pub struct Match(pub Fragment);$/;"	s
MatchedArg	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/matched_arg.rs	/^impl Default for MatchedArg {$/;"	c
MatchedArg	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/matched_arg.rs	/^impl MatchedArg {$/;"	c
MatchedArg	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/matched_arg.rs	/^pub struct MatchedArg {$/;"	s
MaybeHyphenValue	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    MaybeHyphenValue,$/;"	e	enum:ParseResult
MaybeNegNum	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    MaybeNegNum,$/;"	e	enum:ParseResult
Md5	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    Md5,$/;"	e	enum:Version
Medium	/home/darrion/projects/ClearHeadToDo/src/task.rs	/^    Medium = 3,$/;"	e	enum:PriEnum
Merge	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    Merge(usize),$/;"	e	enum:RemoveAction
MergeFirst	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    MergeFirst(usize),$/;"	e	enum:RemoveAction
MetroHashBuilder	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/test.rs	/^impl BuildHasher for MetroHashBuilder {$/;"	c
MetroHashBuilder	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/test.rs	/^impl MetroHashBuilder {$/;"	c
MetroHashBuilder	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/test.rs	/^pub(crate) struct MetroHashBuilder {$/;"	s
Microsoft	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    Microsoft,$/;"	e	enum:Variant
MissingArgumentOrSubcommand	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    MissingArgumentOrSubcommand,$/;"	e	enum:ErrorKind
MissingFieldDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'de, E> Deserializer<'de> for MissingFieldDeserializer<E>$/;"	c	function:missing_field
MissingFieldDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    struct MissingFieldDeserializer<E>(&'static str, PhantomData<E>);$/;"	s	function:missing_field
MissingRequiredArgument	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    MissingRequiredArgument,$/;"	e	enum:ErrorKind
MissingSubcommand	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    MissingSubcommand,$/;"	e	enum:ErrorKind
Multiple	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/settings.rs	/^    Multiple,$/;"	e	enum:ArgSettings
Multiple	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    Multiple,$/;"	e	enum:UsageToken
Mutex	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^impl<T> Serialize for Mutex<T>$/;"	c
NCS	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    NCS = 0,$/;"	e	enum:Variant
Name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    Name,$/;"	e	enum:UsageToken
Name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^impl Name {$/;"	c
Name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^pub struct Name {$/;"	s
Nanos	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^            Nanos,$/;"	e	enum:Duration::deserialize::Field
Nanos	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^            Nanos,$/;"	e	enum:SystemTime::deserialize::Field
NeedsLongHelp	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    NeedsLongHelp,$/;"	e	enum:AppSettings
NeedsLongVersion	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    NeedsLongVersion,$/;"	e	enum:AppSettings
NeedsSubcommandHelp	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    NeedsSubcommandHelp,$/;"	e	enum:AppSettings
Never	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/fmt.rs	/^    Never,$/;"	e	enum:ColorWhen
NeverDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<'de, E> de::Deserializer<'de> for NeverDeserializer<E>$/;"	c
NeverDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^pub struct NeverDeserializer<E> {$/;"	s
Newtype	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        Newtype(Box<Content<'de>>),$/;"	e	enum:content::Content
Newtype	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ast.rs	/^    Newtype,$/;"	e	enum:Style
NewtypeStruct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    NewtypeStruct,$/;"	e	enum:Unexpected
NewtypeStruct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        NewtypeStruct(&'static str, Box<Content>),$/;"	e	enum:content::Content
NewtypeVariant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    NewtypeVariant,$/;"	e	enum:Unexpected
NewtypeVariant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        NewtypeVariant(&'static str, u32, &'static str, Box<Content>),$/;"	e	enum:content::Content
NextLineHelp	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    NextLineHelp,$/;"	e	enum:AppSettings
NextLineHelp	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/settings.rs	/^    NextLineHelp,$/;"	e	enum:ArgSettings
Nil	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    Nil = 0,$/;"	e	enum:Version
No	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^    No,$/;"	e	enum:Untagged
No	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    No,$/;"	e	enum:Identifier
NoBinaryName	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    NoBinaryName,$/;"	e	enum:AppSettings
NoChange	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    NoChange,$/;"	e	enum:Remove
Node	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^impl<A: BTreeValue> Node<A> {$/;"	c
Node	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^impl<A> Clone for Node<A>$/;"	c
Node	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^impl<A> Default for Node<A> {$/;"	c
Node	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^impl<A> Node<A> {$/;"	c
Node	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^impl<A> PoolClone for Node<A>$/;"	c
Node	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^impl<A> PoolDefault for Node<A> {$/;"	c
Node	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^pub(crate) struct Node<A> {$/;"	s
Node	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    Node(PoolRef<Node<A>>),$/;"	e	enum:Entry
Node	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^impl<A: HashValue + fmt::Debug> fmt::Debug for Node<A> {$/;"	c
Node	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^impl<A: HashValue> Node<A> {$/;"	c
Node	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^impl<A> Default for Node<A> {$/;"	c
Node	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^impl<A> Node<A> {$/;"	c
Node	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^impl<A> PoolClone for Node<A>$/;"	c
Node	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^impl<A> PoolDefault for Node<A> {$/;"	c
Node	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^pub(crate) struct Node<A> {$/;"	s
Node	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^impl<A: Clone> Clone for Node<A> {$/;"	c
Node	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^impl<A: Clone> Default for Node<A> {$/;"	c
Node	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^impl<A: Clone> Node<A> {$/;"	c
Node	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^pub(crate) struct Node<A> {$/;"	s
Nodes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    Nodes(Size, PoolRef<Chunk<Node<A>>>),$/;"	e	enum:Entry
None	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/fmt.rs	/^    None(T),$/;"	e	enum:Format
None	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        None,$/;"	e	enum:content::Content
None	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        None,$/;"	e	enum:content::Content
None	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    None,$/;"	e	enum:Default
None	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    None,$/;"	e	enum:TagType
None	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/case.rs	/^    None,$/;"	e	enum:RenameRule
NotFound	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    NotFound,$/;"	e	enum:ParseResult
Occupied	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    Occupied(OccupiedEntry<'a, K, V, S>),$/;"	e	enum:Entry
Occupied	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    Occupied(OccupiedEntry<'a, K, V>),$/;"	e	enum:Entry
OccupiedEntry	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<'a, K, V, S> OccupiedEntry<'a, K, V, S>$/;"	c
OccupiedEntry	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^pub struct OccupiedEntry<'a, K, V, S>$/;"	s
OccupiedEntry	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<'a, K, V> OccupiedEntry<'a, K, V>$/;"	c
OccupiedEntry	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^pub struct OccupiedEntry<'a, K, V>$/;"	s
Ok	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^            Ok,$/;"	e	enum:deserialize::Field
Ok	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        type Ok = Content;$/;"	t	module:content
Ok	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        type Ok = M::Ok;$/;"	t	module:content
Ok	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    type Ok = ();$/;"	t
Ok	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    type Ok = S::Ok;$/;"	t
Ok	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/fmt.rs	/^    type Ok = ();$/;"	t	implementation:Formatter
Ok	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impossible.rs	/^    type Ok = Ok;$/;"	t
Ok	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    type Ok;$/;"	t	interface:SerializeMap
Ok	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    type Ok;$/;"	t	interface:SerializeSeq
Ok	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    type Ok;$/;"	t	interface:SerializeStruct
Ok	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    type Ok;$/;"	t	interface:SerializeStructVariant
Ok	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    type Ok;$/;"	t	interface:SerializeTuple
Ok	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    type Ok;$/;"	t	interface:SerializeTupleStruct
Ok	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    type Ok;$/;"	t	interface:SerializeTupleVariant
Ok	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    type Ok;$/;"	t	interface:Serializer
OneOf	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^impl Display for OneOf {$/;"	c
OneOf	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^struct OneOf {$/;"	s
Opt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    Opt(&'a str),$/;"	e	enum:ParseResult
OptBuilder	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^impl<'n, 'e, 'z> From<&'z Arg<'n, 'e>> for OptBuilder<'n, 'e> {$/;"	c
OptBuilder	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^impl<'n, 'e> AnyArg<'n, 'e> for OptBuilder<'n, 'e> {$/;"	c
OptBuilder	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^impl<'n, 'e> DispOrder for OptBuilder<'n, 'e> {$/;"	c
OptBuilder	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^impl<'n, 'e> Display for OptBuilder<'n, 'e> {$/;"	c
OptBuilder	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^impl<'n, 'e> From<Arg<'n, 'e>> for OptBuilder<'n, 'e> {$/;"	c
OptBuilder	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^impl<'n, 'e> OptBuilder<'n, 'e> {$/;"	c
OptBuilder	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^impl<'n, 'e> PartialEq for OptBuilder<'n, 'e> {$/;"	c
OptBuilder	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^pub struct OptBuilder<'n, 'e>$/;"	s
Option	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'de, T> Deserialize<'de> for Option<T>$/;"	c
Option	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    Option,$/;"	e	enum:Unexpected
Option	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^impl<T> Serialize for Option<T>$/;"	c
OptionVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'de, T> Visitor<'de> for OptionVisitor<T>$/;"	c
OptionVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^struct OptionVisitor<T> {$/;"	s
Optional	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    Optional,$/;"	e	enum:Unsupported
Optional	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/parser/error.rs	/^    Optional,$/;"	e	enum:UrnPrefix
Optional	/home/darrion/projects/ClearHeadToDo/src/task.rs	/^    Optional = 5,$/;"	e	enum:PriEnum
OrdChunkSize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/config.rs	/^pub(crate) type OrdChunkSize = U64; \/\/ Must be an even number!$/;"	t
OrdMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/arbitrary.rs	/^impl<K: Arbitrary + Ord + Clone, V: Arbitrary + Clone> Arbitrary for OrdMap<K, V> {$/;"	c
OrdMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<'a, BK, K, V> Index<&'a BK> for OrdMap<K, V>$/;"	c
OrdMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<'a, BK, K, V> IndexMut<&'a BK> for OrdMap<K, V>$/;"	c
OrdMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<'a, K, V, OK, OV, RK, RV> From<&'a collections::HashMap<RK, RV>> for OrdMap<K, V>$/;"	c
OrdMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<'a, K, V, RK, RV, OK, OV> From<&'a [(RK, RV)]> for OrdMap<K, V>$/;"	c
OrdMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<'a, K, V> Add for &'a OrdMap<K, V>$/;"	c
OrdMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<'a, K, V> IntoIterator for &'a OrdMap<K, V>$/;"	c
OrdMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<'a, K: Ord + Hash + Eq + Clone, V: Clone, S: BuildHasher> From<&'a HashMap<K, V, S>>$/;"	c
OrdMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<'a, K: Ord, V, RK, RV, OK, OV> From<&'a Vec<(RK, RV)>> for OrdMap<K, V>$/;"	c
OrdMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<'a, K: Ord, V, RK, RV, OK, OV> From<&'a collections::BTreeMap<RK, RV>> for OrdMap<K, V>$/;"	c
OrdMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<'m, 'k, 'v, K, V, OK, OV> From<&'m OrdMap<&'k K, &'v V>> for OrdMap<OK, OV>$/;"	c
OrdMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<K, V, RK, RV> Extend<(RK, RV)> for OrdMap<K, V>$/;"	c
OrdMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<K, V, RK, RV> From<Vec<(RK, RV)>> for OrdMap<K, V>$/;"	c
OrdMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<K, V, RK, RV> FromIterator<(RK, RV)> for OrdMap<K, V>$/;"	c
OrdMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<K, V> Add for OrdMap<K, V>$/;"	c
OrdMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<K, V> AsRef<OrdMap<K, V>> for OrdMap<K, V> {$/;"	c
OrdMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<K, V> Clone for OrdMap<K, V> {$/;"	c
OrdMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<K, V> Debug for OrdMap<K, V>$/;"	c
OrdMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<K, V> Default for OrdMap<K, V> {$/;"	c
OrdMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<K, V> Hash for OrdMap<K, V>$/;"	c
OrdMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<K, V> IntoIterator for OrdMap<K, V>$/;"	c
OrdMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<K, V> Ord for OrdMap<K, V>$/;"	c
OrdMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<K, V> OrdMap<K, V> {$/;"	c
OrdMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<K, V> OrdMap<K, V>$/;"	c
OrdMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<K, V> PartialEq for OrdMap<K, V>$/;"	c
OrdMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<K, V> PartialOrd for OrdMap<K, V>$/;"	c
OrdMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<K, V> Sum for OrdMap<K, V>$/;"	c
OrdMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<K: Ord + Eq, V: Eq> Eq for OrdMap<K, V> {}$/;"	c
OrdMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<K: Ord + Hash + Eq + Clone, V: Clone, S: BuildHasher> From<HashMap<K, V, S>> for OrdMap<K, /;"	c
OrdMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<K: Ord, V, RK, RV> From<collections::BTreeMap<RK, RV>> for OrdMap<K, V>$/;"	c
OrdMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<K: Ord, V, RK: Eq + Hash, RV> From<collections::HashMap<RK, RV>> for OrdMap<K, V>$/;"	c
OrdMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^pub struct OrdMap<K, V> {$/;"	s
OrdMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/quickcheck.rs	/^impl<K: Ord + Clone + Arbitrary + Sync, V: Clone + Arbitrary + Sync> Arbitrary for OrdMap<K, V> /;"	c
OrdMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ser.rs	/^impl<'de, K: Deserialize<'de> + Ord + Clone, V: Deserialize<'de> + Clone> Deserialize<'de>$/;"	c
OrdMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ser.rs	/^impl<K: Serialize + Ord + Clone, V: Serialize + Clone> Serialize for OrdMap<K, V> {$/;"	c
OrdSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/arbitrary.rs	/^impl<A: Arbitrary + Ord + Clone> Arbitrary for OrdSet<A> {$/;"	c
OrdSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^impl<'a, A: Eq + Hash + Ord + Clone> From<&'a collections::HashSet<A>> for OrdSet<A> {$/;"	c
OrdSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^impl<'a, A: Hash + Eq + Ord + Clone, S: BuildHasher> From<&'a HashSet<A, S>> for OrdSet<A> {$/;"	c
OrdSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^impl<'a, A: Ord + Clone> Add for &'a OrdSet<A> {$/;"	c
OrdSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^impl<'a, A: Ord + Clone> From<&'a Vec<A>> for OrdSet<A> {$/;"	c
OrdSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^impl<'a, A: Ord + Clone> From<&'a collections::BTreeSet<A>> for OrdSet<A> {$/;"	c
OrdSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^impl<'a, A: Ord + Clone> Mul for &'a OrdSet<A> {$/;"	c
OrdSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^impl<'a, A> From<&'a [A]> for OrdSet<A>$/;"	c
OrdSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^impl<'a, A> IntoIterator for &'a OrdSet<A>$/;"	c
OrdSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^impl<'s, 'a, A, OA> From<&'s OrdSet<&'a A>> for OrdSet<OA>$/;"	c
OrdSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^impl<A, R> Extend<R> for OrdSet<A>$/;"	c
OrdSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^impl<A, R> FromIterator<R> for OrdSet<A>$/;"	c
OrdSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^impl<A: Eq + Hash + Ord + Clone> From<collections::HashSet<A>> for OrdSet<A> {$/;"	c
OrdSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^impl<A: Hash + Eq + Ord + Clone, S: BuildHasher> From<HashSet<A, S>> for OrdSet<A> {$/;"	c
OrdSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^impl<A: Ord + Clone> Add for OrdSet<A> {$/;"	c
OrdSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^impl<A: Ord + Clone> From<Vec<A>> for OrdSet<A> {$/;"	c
OrdSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^impl<A: Ord + Clone> From<collections::BTreeSet<A>> for OrdSet<A> {$/;"	c
OrdSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^impl<A: Ord + Clone> Mul for OrdSet<A> {$/;"	c
OrdSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^impl<A: Ord + Clone> Sum for OrdSet<A> {$/;"	c
OrdSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^impl<A: Ord + Debug> Debug for OrdSet<A> {$/;"	c
OrdSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^impl<A: Ord + Eq> Eq for OrdSet<A> {}$/;"	c
OrdSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^impl<A: Ord + Hash> Hash for OrdSet<A> {$/;"	c
OrdSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^impl<A: Ord> Ord for OrdSet<A> {$/;"	c
OrdSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^impl<A: Ord> PartialEq for OrdSet<A> {$/;"	c
OrdSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^impl<A: Ord> PartialOrd for OrdSet<A> {$/;"	c
OrdSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^impl<A> Clone for OrdSet<A> {$/;"	c
OrdSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^impl<A> Default for OrdSet<A> {$/;"	c
OrdSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^impl<A> IntoIterator for OrdSet<A>$/;"	c
OrdSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^impl<A> OrdSet<A> {$/;"	c
OrdSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^impl<A> OrdSet<A>$/;"	c
OrdSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^pub struct OrdSet<A> {$/;"	s
OrdSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/quickcheck.rs	/^impl<A: Ord + Clone + Arbitrary + Sync> Arbitrary for OrdSet<A> {$/;"	c
OrdSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ser.rs	/^impl<'de, A: Deserialize<'de> + Ord + Clone> Deserialize<'de> for OrdSet<A> {$/;"	c
OrdSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ser.rs	/^impl<A: Ord + Clone + Serialize> Serialize for OrdSet<A> {$/;"	c
OsSplit	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/osstringext.rs	/^impl<'a> Iterator for OsSplit<'a> {$/;"	c
OsSplit	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/osstringext.rs	/^pub struct OsSplit<'a> {$/;"	s
OsStr	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/osstringext.rs	/^impl OsStrExt2 for OsStr {$/;"	c
OsStr	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/osstringext.rs	/^impl OsStrExt3 for OsStr {$/;"	c
OsStr	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^impl Serialize for OsStr {$/;"	c
OsStrExt2	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/osstringext.rs	/^pub trait OsStrExt2 {$/;"	i
OsStrExt3	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/osstringext.rs	/^pub trait OsStrExt3 {$/;"	i
OsString	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'de> Deserialize<'de> for OsString {$/;"	c
OsString	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^impl Serialize for OsString {$/;"	c
OsStringVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'de> Visitor<'de> for OsStringVisitor {$/;"	c
OsStringVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^struct OsStringVisitor;$/;"	s
OsValues	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^impl<'a> Default for OsValues<'a> {$/;"	c
OsValues	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^impl<'a> DoubleEndedIterator for OsValues<'a> {$/;"	c
OsValues	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^impl<'a> ExactSizeIterator for OsValues<'a> {}$/;"	c
OsValues	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^impl<'a> Iterator for OsValues<'a> {$/;"	c
OsValues	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^pub struct OsValues<'a> {$/;"	s
Other	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    Other(&'a str),$/;"	e	enum:Unexpected
Other	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        Other,$/;"	e	enum:content::TagContentOtherField
OutOfBounds	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    OutOfBounds,$/;"	e	enum:SplitResult
Output	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    type Output = Self;$/;"	t	implementation:AppFlags
Output	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    type Output = HashMap<K, V, S>;$/;"	t
Output	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    type Output = V;$/;"	t
Output	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    type Output = HashSet<A, S>;$/;"	t
Output	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    type Output = OrdMap<K, V>;$/;"	t
Output	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    type Output = V;$/;"	t
Output	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    type Output = OrdSet<A>;$/;"	t	implementation:OrdSet
Output	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    type Output = A;$/;"	t	implementation:Vector
Output	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    type Output = Vector<A>;$/;"	t	implementation:Vector
Pair	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    pub trait Pair {$/;"	i	module:private
PairDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<'de, A, B, E> de::Deserializer<'de> for PairDeserializer<A, B, E>$/;"	c
PairDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^struct PairDeserializer<A, B, E>(A, B, PhantomData<E>);$/;"	s
PairVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<'de, A, B, E> de::SeqAccess<'de> for PairVisitor<A, B, E>$/;"	c
PairVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^struct PairVisitor<A, B, E>(Option<A>, Option<B>, PhantomData<E>);$/;"	s
ParIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/rayon.rs	/^impl<'a, A> IndexedParallelIterator for ParIter<'a, A>$/;"	c
ParIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/rayon.rs	/^impl<'a, A> ParallelIterator for ParIter<'a, A>$/;"	c
ParIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/rayon.rs	/^pub struct ParIter<'a, A>$/;"	s
ParIterMut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/rayon.rs	/^impl<'a, A> IndexedParallelIterator for ParIterMut<'a, A>$/;"	c
ParIterMut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/rayon.rs	/^impl<'a, A> ParallelIterator for ParIterMut<'a, A>$/;"	c
ParIterMut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/rayon.rs	/^pub struct ParIterMut<'a, A>$/;"	s
Parameters	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^impl Parameters {$/;"	c
Parameters	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^struct Parameters {$/;"	s
Parameters	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^impl Parameters {$/;"	c
Parameters	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^struct Parameters {$/;"	s
ParseResult	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^pub enum ParseResult<'a> {$/;"	g
Parser	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^impl<'a, 'b> Parser<'a, 'b>$/;"	c
Parser	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^pub struct Parser<'a, 'b>$/;"	s
Parser	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/error.rs	/^    Parser(parser::Error),$/;"	e	enum:Inner
PascalCase	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/case.rs	/^    PascalCase,$/;"	e	enum:RenameRule
Path	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'de: 'a, 'a> Deserialize<'de> for &'a Path {$/;"	c
Path	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^impl Serialize for Path {$/;"	c
Path	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    Path(syn::ExprPath),$/;"	e	enum:Default
Path	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/symbol.rs	/^impl PartialEq<Symbol> for Path {$/;"	c
Path	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/symbol.rs	/^impl<'a> PartialEq<Symbol> for &'a Path {$/;"	c
PathBuf	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'de> Deserialize<'de> for PathBuf {$/;"	c
PathBuf	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^impl Serialize for PathBuf {$/;"	c
PathBufVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'de> Visitor<'de> for PathBufVisitor {$/;"	c
PathBufVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^struct PathBufVisitor;$/;"	s
PathVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'a> Visitor<'a> for PathVisitor {$/;"	c
PathVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^struct PathVisitor;$/;"	s
PhantomData	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'de, T: ?Sized> Deserialize<'de> for PhantomData<T> {$/;"	c
PhantomData	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^impl<'de, T> DeserializeSeed<'de> for PhantomData<T>$/;"	c
PhantomData	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^impl<T: ?Sized> Serialize for PhantomData<T> {$/;"	c
PhantomDataVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'de, T: ?Sized> Visitor<'de> for PhantomDataVisitor<T> {$/;"	c
PhantomDataVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^struct PhantomDataVisitor<T: ?Sized> {$/;"	s
Pool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^impl<A> Clone for Pool<A> {$/;"	c
Pool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^impl<A> Pool<A> {$/;"	c
Pool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^pub(crate) struct Pool<A>(PhantomData<A>);$/;"	s
Pool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/util.rs	/^pub(crate) type Pool<A> = refpool::Pool<A>;$/;"	t
PoolClone	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^pub(crate) trait PoolClone: Clone {}$/;"	i
PoolDefault	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^pub(crate) trait PoolDefault: Default {}$/;"	i
PoolRef	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/util.rs	/^pub(crate) type PoolRef<A> = refpool::PoolRef<A>;$/;"	t
PopBack	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/tests/vector.rs	/^    PopBack,$/;"	e	enum:Action
PopFront	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/tests/vector.rs	/^    PopFront,$/;"	e	enum:Action
PopResult	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^pub(crate) enum PopResult<A> {$/;"	g
Pos	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    Pos(&'a str),$/;"	e	enum:ParseResult
PosBuilder	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^impl<'n, 'e> AnyArg<'n, 'e> for PosBuilder<'n, 'e> {$/;"	c
PosBuilder	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^impl<'n, 'e> DispOrder for PosBuilder<'n, 'e> {$/;"	c
PosBuilder	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^impl<'n, 'e> Display for PosBuilder<'n, 'e> {$/;"	c
PosBuilder	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^impl<'n, 'e> PartialEq for PosBuilder<'n, 'e> {$/;"	c
PosBuilder	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^impl<'n, 'e> PosBuilder<'n, 'e> {$/;"	c
PosBuilder	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^pub struct PosBuilder<'n, 'e>$/;"	s
PowerShell	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/shell.rs	/^    PowerShell,$/;"	e	enum:Shell
PowerShellGen	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/powershell.rs	/^impl<'a, 'b> PowerShellGen<'a, 'b> {$/;"	c
PowerShellGen	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/powershell.rs	/^pub struct PowerShellGen<'a, 'b>$/;"	s
PriEnum	/home/darrion/projects/ClearHeadToDo/src/task.rs	/^impl Default for PriEnum {$/;"	c
PriEnum	/home/darrion/projects/ClearHeadToDo/src/task.rs	/^impl fmt::Display for PriEnum {$/;"	c
PriEnum	/home/darrion/projects/ClearHeadToDo/src/task.rs	/^pub enum PriEnum {$/;"	g
PropagateGlobalValuesDown	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    PropagateGlobalValuesDown,$/;"	e	enum:AppSettings
Propagated	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    Propagated,$/;"	e	enum:AppSettings
PullUp	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    PullUp(usize, usize, usize),$/;"	e	enum:RemoveAction
PushBack	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/tests/vector.rs	/^    PushBack(A),$/;"	e	enum:Action
PushFront	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/tests/vector.rs	/^    PushFront(A),$/;"	e	enum:Action
PushResult	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^pub(crate) enum PushResult<A> {$/;"	g
RFC4122	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    RFC4122,$/;"	e	enum:Variant
RRB	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<A: Clone> RRB<A> {$/;"	c
RRB	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<A> Clone for RRB<A> {$/;"	c
RRB	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^pub struct RRB<A> {$/;"	s
RRBPool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/pool.rs	/^impl<A> Clone for RRBPool<A> {$/;"	c
RRBPool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/pool.rs	/^impl<A> Default for RRBPool<A> {$/;"	c
RRBPool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/pool.rs	/^impl<A> RRBPool<A> {$/;"	c
RRBPool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/pool.rs	/^pub struct RRBPool<A> {$/;"	s
Random	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    Random,$/;"	e	enum:Version
Range	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'de, Idx> Deserialize<'de> for Range<Idx>$/;"	c
Range	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^impl<Idx> Serialize for Range<Idx>$/;"	c
RangeInclusive	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'de, Idx> Deserialize<'de> for RangeInclusive<Idx>$/;"	c
RangeInclusive	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^impl<Idx> Serialize for RangeInclusive<Idx>$/;"	c
RangeVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    impl<'de, Idx> Visitor<'de> for RangeVisitor<Idx>$/;"	c	module:range
RangeVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    pub struct RangeVisitor<Idx> {$/;"	s	module:range
RangedIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^impl<'a, A> DoubleEndedIterator for RangedIter<'a, A>$/;"	c
RangedIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^impl<'a, A> Iterator for RangedIter<'a, A>$/;"	c
RangedIter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^pub struct RangedIter<'a, A> {$/;"	s
Rc	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^impl<A> Clone for Rc<A> {$/;"	c
Rc	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^impl<A> Deref for Rc<A> {$/;"	c
Rc	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^impl<A> Eq for Rc<A> where A: Eq {}$/;"	c
Rc	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^impl<A> PartialEq for Rc<A>$/;"	c
Rc	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^impl<A> Rc<A> {$/;"	c
Rc	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^impl<A> std::fmt::Debug for Rc<A>$/;"	c
Rc	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^pub(crate) struct Rc<A>(RRc<A>);$/;"	s
RcWeak	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'de, T: ?Sized> Deserialize<'de> for RcWeak<T>$/;"	c
RcWeak	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^impl<T: ?Sized> Serialize for RcWeak<T>$/;"	c
ReadError	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^    ReadError(io::Error),$/;"	e	enum:CopyUntilResult
ReaderEmpty	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^    ReaderEmpty,$/;"	e	enum:CopyUntilResult
Ref	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/util.rs	/^pub(crate) type Ref<A> = std::rc::Rc<A>;$/;"	t
Ref	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/util.rs	/^pub(crate) type Ref<A> = std::sync::Arc<A>;$/;"	t
RefCell	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^impl<T> Serialize for RefCell<T>$/;"	c
Remove	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    Remove(&'a A),$/;"	e	enum:DiffItem
Remove	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^pub(crate) enum Remove<A> {$/;"	g
Remove	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    Remove(&'a K, &'a V),$/;"	e	enum:DiffItem
Remove	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/tests/hashset.rs	/^    Remove(A),$/;"	e	enum:Action
Remove	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/tests/ordset.rs	/^    Remove(A),$/;"	e	enum:Action
Remove	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/tests/vector.rs	/^    Remove(usize),$/;"	e	enum:Action
RemoveAction	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^enum RemoveAction {$/;"	g
RemoveTask	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    RemoveTask(usize),$/;"	e	enum:CliSubCommand
Removed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    Removed(A),$/;"	e	enum:Remove
RenameAllRules	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^pub struct RenameAllRules {$/;"	s
RenameRule	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/case.rs	/^impl FromStr for RenameRule {$/;"	c
RenameRule	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/case.rs	/^impl RenameRule {$/;"	c
RenameRule	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/case.rs	/^pub enum RenameRule {$/;"	g
RenameTask	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    RenameTask { index: usize, new_name: String },$/;"	e	enum:CliSubCommand
Replaced	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    Replaced(A),$/;"	e	enum:Insert
ReplacedAction	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    ReplacedAction(A),$/;"	e	enum:InsertAction
Reprioritize	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    Reprioritize { index: usize, new_priority: String },$/;"	e	enum:CliSubCommand
RequireDelimiter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/settings.rs	/^    RequireDelimiter,$/;"	e	enum:ArgSettings
RequireEquals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/settings.rs	/^    RequireEquals,$/;"	e	enum:ArgSettings
Required	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/settings.rs	/^    Required,$/;"	e	enum:ArgSettings
RequiredUnlessAll	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/settings.rs	/^    RequiredUnlessAll,$/;"	e	enum:ArgSettings
Result	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^pub type Result<T> = StdResult<T, Error>;$/;"	t
Result	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'de, T, E> Deserialize<'de> for Result<T, E>$/;"	c
Result	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^impl<T, E> Serialize for Result<T, E>$/;"	c
ResultVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^        impl<'de, T, E> Visitor<'de> for ResultVisitor<T, E>$/;"	c	function:deserialize
ResultVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^        struct ResultVisitor<T, E>(PhantomData<Result<T, E>>);$/;"	s	function:deserialize
Reverse	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^impl<T> Serialize for Reverse<T>$/;"	c
Right	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/util.rs	/^    Right,$/;"	e	enum:Side
RwLock	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^impl<T> Serialize for RwLock<T>$/;"	c
ScreamingKebabCase	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/case.rs	/^    ScreamingKebabCase,$/;"	e	enum:RenameRule
ScreamingSnakeCase	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/case.rs	/^    ScreamingSnakeCase,$/;"	e	enum:RenameRule
Second	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^        type Second = B;$/;"	t	implementation:private::B
Second	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^        type Second;$/;"	t	interface:private::Pair
Second	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    pub type Second<T> = <T as Pair>::Second;$/;"	t	module:private
Secs	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^            Secs,$/;"	e	enum:Duration::deserialize::Field
Secs	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^            Secs,$/;"	e	enum:SystemTime::deserialize::Field
SeedStructVariant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    impl<'de, V> DeserializeSeed<'de> for SeedStructVariant<V>$/;"	c	module:private
SeedStructVariant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    struct SeedStructVariant<V> {$/;"	s	module:private
SeedTupleVariant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    impl<'de, V> DeserializeSeed<'de> for SeedTupleVariant<V>$/;"	c	module:private
SeedTupleVariant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    struct SeedTupleVariant<V> {$/;"	s	module:private
Seq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    Seq,$/;"	e	enum:Unexpected
Seq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        Seq(Vec<Content<'de>>),$/;"	e	enum:content::Content
Seq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        Seq(Vec<Content>),$/;"	e	enum:content::Content
SeqAccess	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^pub trait SeqAccess<'de> {$/;"	i
SeqAccessDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<'de, A> de::Deserializer<'de> for SeqAccessDeserializer<A>$/;"	c
SeqAccessDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<A> SeqAccessDeserializer<A> {$/;"	c
SeqAccessDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^pub struct SeqAccessDeserializer<A> {$/;"	s
SeqDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<'de, I, T, E> de::Deserializer<'de> for SeqDeserializer<I, E>$/;"	c
SeqDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<'de, I, T, E> de::SeqAccess<'de> for SeqDeserializer<I, E>$/;"	c
SeqDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<I, E> SeqDeserializer<I, E>$/;"	c
SeqDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^pub struct SeqDeserializer<I, E> {$/;"	s
SeqDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'de, E> SeqDeserializer<'de, E>$/;"	c	module:content
SeqDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'de, E> de::Deserializer<'de> for SeqDeserializer<'de, E>$/;"	c	module:content
SeqDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'de, E> de::SeqAccess<'de> for SeqDeserializer<'de, E>$/;"	c	module:content
SeqDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    struct SeqDeserializer<'de, E>$/;"	s	module:content
SeqRefDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'a, 'de, E> SeqRefDeserializer<'a, 'de, E>$/;"	c	module:content
SeqRefDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'de, 'a, E> de::Deserializer<'de> for SeqRefDeserializer<'a, 'de, E>$/;"	c	module:content
SeqRefDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'de, 'a, E> de::SeqAccess<'de> for SeqRefDeserializer<'a, 'de, E>$/;"	c	module:content
SeqRefDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    struct SeqRefDeserializer<'a, 'de: 'a, E>$/;"	s	module:content
SeqVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ser.rs	/^impl<'de, S, A> SeqVisitor<'de, S, A>$/;"	c
SeqVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ser.rs	/^impl<'de, S, A> Visitor<'de> for SeqVisitor<'de, S, A>$/;"	c
SeqVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ser.rs	/^struct SeqVisitor<'de, S, A>$/;"	s
Sequence	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    Sequence,$/;"	e	enum:Unsupported
SerAndDe	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^type SerAndDe<T> = (Option<T>, Option<T>);$/;"	t
Serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^impl Serialize for ! {$/;"	c
Serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^impl Serialize for () {$/;"	c
Serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^pub trait Serialize {$/;"	i
Serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/mod.rs	/^    Serialize,$/;"	e	enum:Derive
SerializeMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        type SerializeMap = SerializeMap<E>;$/;"	t	module:content
SerializeMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    impl<E> ser::SerializeMap for SerializeMap<E>$/;"	c	module:content
SerializeMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    pub struct SerializeMap<E> {$/;"	s	module:content
SerializeMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    type SerializeMap = FlatMapSerializeMap<'a, M>;$/;"	t
SerializeMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    type SerializeMap = S::SerializeMap;$/;"	t
SerializeMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/fmt.rs	/^    type SerializeMap = Impossible<(), fmt::Error>;$/;"	t	implementation:Formatter
SerializeMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    type SerializeMap: SerializeMap<Ok = Self::Ok, Error = Self::Error>;$/;"	t	interface:Serializer
SerializeMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^pub trait SerializeMap {$/;"	i
SerializeMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^    SerializeMap,$/;"	e	enum:StructTrait
SerializeSeq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        type SerializeSeq = SerializeSeq<E>;$/;"	t	module:content
SerializeSeq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    impl<E> ser::SerializeSeq for SerializeSeq<E>$/;"	c	module:content
SerializeSeq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    pub struct SerializeSeq<E> {$/;"	s	module:content
SerializeSeq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    type SerializeSeq = Impossible<S::Ok, S::Error>;$/;"	t
SerializeSeq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    type SerializeSeq = Impossible<Self::Ok, M::Error>;$/;"	t
SerializeSeq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/fmt.rs	/^    type SerializeSeq = Impossible<(), fmt::Error>;$/;"	t	implementation:Formatter
SerializeSeq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    type SerializeSeq: SerializeSeq<Ok = Self::Ok, Error = Self::Error>;$/;"	t	interface:Serializer
SerializeSeq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^pub trait SerializeSeq {$/;"	i
SerializeStruct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        type SerializeStruct = SerializeStruct<E>;$/;"	t	module:content
SerializeStruct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    impl<E> ser::SerializeStruct for SerializeStruct<E>$/;"	c	module:content
SerializeStruct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    pub struct SerializeStruct<E> {$/;"	s	module:content
SerializeStruct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    type SerializeStruct = FlatMapSerializeStruct<'a, M>;$/;"	t
SerializeStruct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    type SerializeStruct = S::SerializeStruct;$/;"	t
SerializeStruct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/fmt.rs	/^    type SerializeStruct = Impossible<(), fmt::Error>;$/;"	t	implementation:Formatter
SerializeStruct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    type SerializeStruct: SerializeStruct<Ok = Self::Ok, Error = Self::Error>;$/;"	t	interface:Serializer
SerializeStruct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^pub trait SerializeStruct {$/;"	i
SerializeStruct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^    SerializeStruct,$/;"	e	enum:StructTrait
SerializeStructVariant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        type SerializeStructVariant = SerializeStructVariant<E>;$/;"	t	module:content
SerializeStructVariant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    impl<E> ser::SerializeStructVariant for SerializeStructVariant<E>$/;"	c	module:content
SerializeStructVariant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    pub struct SerializeStructVariant<E> {$/;"	s	module:content
SerializeStructVariant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    type SerializeStructVariant = FlatMapSerializeStructVariantAsMapValue<'a, M>;$/;"	t
SerializeStructVariant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    type SerializeStructVariant = Impossible<S::Ok, S::Error>;$/;"	t
SerializeStructVariant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    type SerializeStructVariant = SerializeStructVariantAsMapValue<S::SerializeMap>;$/;"	t
SerializeStructVariant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/fmt.rs	/^    type SerializeStructVariant = Impossible<(), fmt::Error>;$/;"	t	implementation:Formatter
SerializeStructVariant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    type SerializeStructVariant: SerializeStructVariant<Ok = Self::Ok, Error = Self::Error>;$/;"	t	interface:Serializer
SerializeStructVariant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^pub trait SerializeStructVariant {$/;"	i
SerializeStructVariant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^    SerializeStructVariant,$/;"	e	enum:StructTrait
SerializeStructVariantAsMapValue	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    impl<M> SerializeStructVariantAsMapValue<M> {$/;"	c	module:content
SerializeStructVariantAsMapValue	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    impl<M> ser::SerializeStructVariant for SerializeStructVariantAsMapValue<M>$/;"	c	module:content
SerializeStructVariantAsMapValue	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    pub struct SerializeStructVariantAsMapValue<M> {$/;"	s	module:content
SerializeTuple	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        type SerializeTuple = SerializeTuple<E>;$/;"	t	module:content
SerializeTuple	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    impl<E> ser::SerializeTuple for SerializeTuple<E>$/;"	c	module:content
SerializeTuple	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    pub struct SerializeTuple<E> {$/;"	s	module:content
SerializeTuple	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    type SerializeTuple = Impossible<S::Ok, S::Error>;$/;"	t
SerializeTuple	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    type SerializeTuple = Impossible<Self::Ok, M::Error>;$/;"	t
SerializeTuple	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/fmt.rs	/^    type SerializeTuple = Impossible<(), fmt::Error>;$/;"	t	implementation:Formatter
SerializeTuple	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    type SerializeTuple: SerializeTuple<Ok = Self::Ok, Error = Self::Error>;$/;"	t	interface:Serializer
SerializeTuple	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^pub trait SerializeTuple {$/;"	i
SerializeTuple	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^    SerializeTuple,$/;"	e	enum:TupleTrait
SerializeTupleStruct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        type SerializeTupleStruct = SerializeTupleStruct<E>;$/;"	t	module:content
SerializeTupleStruct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    impl<E> ser::SerializeTupleStruct for SerializeTupleStruct<E>$/;"	c	module:content
SerializeTupleStruct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    pub struct SerializeTupleStruct<E> {$/;"	s	module:content
SerializeTupleStruct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    type SerializeTupleStruct = Impossible<S::Ok, S::Error>;$/;"	t
SerializeTupleStruct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    type SerializeTupleStruct = Impossible<Self::Ok, M::Error>;$/;"	t
SerializeTupleStruct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/fmt.rs	/^    type SerializeTupleStruct = Impossible<(), fmt::Error>;$/;"	t	implementation:Formatter
SerializeTupleStruct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    type SerializeTupleStruct: SerializeTupleStruct<Ok = Self::Ok, Error = Self::Error>;$/;"	t	interface:Serializer
SerializeTupleStruct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^pub trait SerializeTupleStruct {$/;"	i
SerializeTupleStruct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^    SerializeTupleStruct,$/;"	e	enum:TupleTrait
SerializeTupleVariant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        type SerializeTupleVariant = SerializeTupleVariant<E>;$/;"	t	module:content
SerializeTupleVariant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    impl<E> ser::SerializeTupleVariant for SerializeTupleVariant<E>$/;"	c	module:content
SerializeTupleVariant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    pub struct SerializeTupleVariant<E> {$/;"	s	module:content
SerializeTupleVariant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    type SerializeTupleVariant = Impossible<S::Ok, S::Error>;$/;"	t
SerializeTupleVariant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    type SerializeTupleVariant = Impossible<Self::Ok, M::Error>;$/;"	t
SerializeTupleVariant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    type SerializeTupleVariant = SerializeTupleVariantAsMapValue<S::SerializeMap>;$/;"	t
SerializeTupleVariant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/fmt.rs	/^    type SerializeTupleVariant = Impossible<(), fmt::Error>;$/;"	t	implementation:Formatter
SerializeTupleVariant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    type SerializeTupleVariant: SerializeTupleVariant<Ok = Self::Ok, Error = Self::Error>;$/;"	t	interface:Serializer
SerializeTupleVariant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^pub trait SerializeTupleVariant {$/;"	i
SerializeTupleVariant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^    SerializeTupleVariant,$/;"	e	enum:TupleTrait
SerializeTupleVariantAsMapValue	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    impl<M> SerializeTupleVariantAsMapValue<M> {$/;"	c	module:content
SerializeTupleVariantAsMapValue	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    impl<M> ser::SerializeTupleVariant for SerializeTupleVariantAsMapValue<M>$/;"	c	module:content
SerializeTupleVariantAsMapValue	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    pub struct SerializeTupleVariantAsMapValue<M> {$/;"	s	module:content
Serializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^pub trait Serializer: Sized {$/;"	i
Sha1	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    Sha1,$/;"	e	enum:Version
Shell	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/shell.rs	/^impl FromStr for Shell {$/;"	c
Shell	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/shell.rs	/^impl Shell {$/;"	c
Shell	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/shell.rs	/^impl fmt::Display for Shell {$/;"	c
Shell	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/shell.rs	/^pub enum Shell {$/;"	g
Short	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    Short,$/;"	e	enum:UsageToken
Side	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/util.rs	/^pub(crate) enum Side {$/;"	g
Signed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    Signed(i64),$/;"	e	enum:Unexpected
Simple	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^impl Simple {$/;"	c
Simple	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^pub struct Simple(Uuid);$/;"	s
SimpleRef	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^impl<'a> SimpleRef<'a> {$/;"	c
SimpleRef	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^pub struct SimpleRef<'a>(&'a Uuid);$/;"	s
Single	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    Single(&'a [A]),$/;"	e	enum:Focus
Single	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    Single(RRBPool<A>, &'a mut [A]),$/;"	e	enum:FocusMut
Single	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    Single(RRBPool<A>, PoolRef<Chunk<A>>),$/;"	e	enum:VectorInner
Size	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    Size(usize),$/;"	e	enum:Size
Size	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^enum Size {$/;"	g
Size	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^impl Clone for Size {$/;"	c
Size	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^impl Size {$/;"	c
SnakeCase	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/case.rs	/^    SnakeCase,$/;"	e	enum:RenameRule
SocketAddr	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'de> Deserialize<'de> for net::SocketAddr {$/;"	c
SocketAddr	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^impl Serialize for net::SocketAddr {$/;"	c
SocketAddrV4	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^impl Serialize for net::SocketAddrV4 {$/;"	c
SocketAddrV6	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^impl Serialize for net::SocketAddrV6 {$/;"	c
SocketAddrVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^            impl<'de> Visitor<'de> for SocketAddrVisitor {$/;"	c	method:SocketAddr::deserialize
SocketAddrVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^            struct SocketAddrVisitor;$/;"	s	method:SocketAddr::deserialize
Some	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        Some(Box<Content<'de>>),$/;"	e	enum:content::Content
Some	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        Some(Box<Content>),$/;"	e	enum:content::Content
Split	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    Split(Node<A>, A, Node<A>),$/;"	e	enum:Insert
SplitLeft	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/tests/vector.rs	/^    SplitLeft(usize),$/;"	e	enum:Action
SplitResult	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^pub(crate) enum SplitResult {$/;"	g
SplitRight	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/tests/vector.rs	/^    SplitRight(usize),$/;"	e	enum:Action
Start	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^        Start,$/;"	e	enum:range::Field
Static	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^    Static,$/;"	e	enum:BorrowedLifetimes
StealFromLeft	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    StealFromLeft(usize),$/;"	e	enum:RemoveAction
StealFromRight	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    StealFromRight(usize),$/;"	e	enum:RemoveAction
Stmts	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/fragment.rs	/^impl ToTokens for Stmts {$/;"	c
Stmts	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/fragment.rs	/^pub struct Stmts(pub Fragment);$/;"	s
Str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    Str(&'a str),$/;"	e	enum:Unexpected
Str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        Str(&'de str),$/;"	e	enum:content::Content
StrDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<'de, 'a, E> de::Deserializer<'de> for StrDeserializer<'a, E>$/;"	c
StrDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<'de, 'a, E> de::EnumAccess<'de> for StrDeserializer<'a, E>$/;"	c
StrDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^pub struct StrDeserializer<'a, E> {$/;"	s
StrDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^impl<'de, 'a, E> Deserializer<'de> for StrDeserializer<'a, E>$/;"	c
StrDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^pub struct StrDeserializer<'a, E> {$/;"	s
StrVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'a> Visitor<'a> for StrVisitor {$/;"	c
StrVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^struct StrVisitor;$/;"	s
StrictUtf8	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    StrictUtf8,$/;"	e	enum:AppSettings
String	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'de> Deserialize<'de> for String {$/;"	c
String	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<'de, E> IntoDeserializer<'de, E> for String$/;"	c
String	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        String(String),$/;"	e	enum:content::Content
String	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        String(String),$/;"	e	enum:content::Content
String	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    String,$/;"	e	enum:Unsupported
String	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^impl Serialize for String {$/;"	c
StringDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<'de, 'a, E> de::EnumAccess<'de> for StringDeserializer<E>$/;"	c
StringDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<'de, E> de::Deserializer<'de> for StringDeserializer<E>$/;"	c
StringDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<E> Clone for StringDeserializer<E> {$/;"	c
StringDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^pub struct StringDeserializer<E> {$/;"	s
StringInPlaceVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'a, 'de> Visitor<'de> for StringInPlaceVisitor<'a> {$/;"	c
StringInPlaceVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^struct StringInPlaceVisitor<'a>(&'a mut String);$/;"	s
StringVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'de> Visitor<'de> for StringVisitor {$/;"	c
StringVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^struct StringVisitor;$/;"	s
Struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        Struct(&'static str, Vec<(&'static str, Content)>),$/;"	e	enum:content::Content
Struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ast.rs	/^    Struct(Style, Vec<Field<'a>>),$/;"	e	enum:Data
Struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ast.rs	/^    Struct,$/;"	e	enum:Style
StructTrait	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^enum StructTrait {$/;"	g
StructTrait	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^impl StructTrait {$/;"	c
StructVariant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    StructVariant,$/;"	e	enum:Unexpected
StructVariant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        StructVariant($/;"	e	enum:content::Content
StructVariant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^enum StructVariant<'a> {$/;"	g
Style	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ast.rs	/^pub enum Style {$/;"	g
SubCommand	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/subcommand.rs	/^impl<'a> SubCommand<'a> {$/;"	c
SubCommand	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/subcommand.rs	/^pub struct SubCommand<'a> {$/;"	s
SubcommandArgumentParser	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^trait SubcommandArgumentParser {$/;"	i
SubcommandRequired	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    SubcommandRequired,$/;"	e	enum:AppSettings
SubcommandRequiredElseHelp	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    SubcommandRequiredElseHelp,$/;"	e	enum:AppSettings
SubcommandsNegateReqs	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    SubcommandsNegateReqs,$/;"	e	enum:AppSettings
Switched	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/switched.rs	/^impl<'e> Clone for Switched<'e> {$/;"	c
Switched	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/switched.rs	/^impl<'e> Default for Switched<'e> {$/;"	c
Switched	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/switched.rs	/^impl<'n, 'e, 'z> From<&'z Arg<'n, 'e>> for Switched<'e> {$/;"	c
Switched	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/switched.rs	/^pub struct Switched<'b> {$/;"	s
Symbol	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/symbol.rs	/^impl Display for Symbol {$/;"	c
Symbol	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/symbol.rs	/^pub struct Symbol(&'static str);$/;"	s
SystemTime	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'de> Deserialize<'de> for SystemTime {$/;"	c
SystemTime	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^impl Serialize for SystemTime {$/;"	c
T	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^impl<'b, 'c, T> ArgWithDisplay<'b, 'c> for T where T: AnyArg<'b, 'c> + Display {}$/;"	c
T	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^impl<'b, 'c, T> ArgWithOrder<'b, 'c> for T$/;"	c
T	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^impl<'n, 'e, 'z, T: ?Sized> AnyArg<'n, 'e> for &'z T$/;"	c
T	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'de, T> Deserialize<'de> for [T; 0] {$/;"	c
T	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^impl<'de, T> Expected for T$/;"	c
T	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^impl<T> DeserializeOwned for T where T: for<'de> Deserialize<'de> {}$/;"	c
T	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^impl<T> Serialize for [T; 0] {$/;"	c
T	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^impl<T> Serialize for [T]$/;"	c
T	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v1.rs	/^impl<'a, T: ClockSequence + ?Sized> ClockSequence for &'a T {$/;"	c
Table	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    Table(PoolRef<Chunk<usize>>),$/;"	e	enum:Size
Tag	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        Tag,$/;"	e	enum:content::TagContentOtherField
Tag	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        Tag,$/;"	e	enum:content::TagOrContent
Tag	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        Tag,$/;"	e	enum:content::TagOrContentField
TagContentOtherField	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    pub enum TagContentOtherField {$/;"	g	module:content
TagContentOtherFieldVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'de> DeserializeSeed<'de> for TagContentOtherFieldVisitor {$/;"	c	module:content
TagContentOtherFieldVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'de> Visitor<'de> for TagContentOtherFieldVisitor {$/;"	c	module:content
TagContentOtherFieldVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    pub struct TagContentOtherFieldVisitor {$/;"	s	module:content
TagOrContent	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    pub enum TagOrContent<'de> {$/;"	g	module:content
TagOrContentField	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    pub enum TagOrContentField {$/;"	g	module:content
TagOrContentFieldVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'de> DeserializeSeed<'de> for TagOrContentFieldVisitor {$/;"	c	module:content
TagOrContentFieldVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'de> Visitor<'de> for TagOrContentFieldVisitor {$/;"	c	module:content
TagOrContentFieldVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    pub struct TagOrContentFieldVisitor {$/;"	s	module:content
TagOrContentVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'de> DeserializeSeed<'de> for TagOrContentVisitor<'de> {$/;"	c	module:content
TagOrContentVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'de> TagOrContentVisitor<'de> {$/;"	c	module:content
TagOrContentVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'de> Visitor<'de> for TagOrContentVisitor<'de> {$/;"	c	module:content
TagOrContentVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    struct TagOrContentVisitor<'de> {$/;"	s	module:content
TagType	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^pub enum TagType {$/;"	g
TaggedContent	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    pub struct TaggedContent<'de, T> {$/;"	s	module:content
TaggedContentVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'de, T> DeserializeSeed<'de> for TaggedContentVisitor<'de, T>$/;"	c	module:content
TaggedContentVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'de, T> TaggedContentVisitor<'de, T> {$/;"	c	module:content
TaggedContentVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'de, T> Visitor<'de> for TaggedContentVisitor<'de, T>$/;"	c	module:content
TaggedContentVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    pub struct TaggedContentVisitor<'de, T> {$/;"	s	module:content
TaggedSerializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^impl<S> Serializer for TaggedSerializer<S>$/;"	c
TaggedSerializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^impl<S> TaggedSerializer<S>$/;"	c
TaggedSerializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^struct TaggedSerializer<S> {$/;"	s
TakesValue	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/settings.rs	/^    TakesValue,$/;"	e	enum:ArgSettings
Target	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^    type Target = A;$/;"	t	implementation:Arc
Target	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^    type Target = A;$/;"	t	implementation:Rc
Target	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    type Target = A;$/;"	t	implementation:Value
Target	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    type Target = A;$/;"	t	implementation:Value
Task	/home/darrion/projects/ClearHeadToDo/src/task.rs	/^impl Default for Task {$/;"	c
Task	/home/darrion/projects/ClearHeadToDo/src/task.rs	/^impl Serialize for Task {$/;"	c
Task	/home/darrion/projects/ClearHeadToDo/src/task.rs	/^impl Task {$/;"	c
Task	/home/darrion/projects/ClearHeadToDo/src/task.rs	/^pub struct Task {$/;"	s
TaskList	/home/darrion/projects/ClearHeadToDo/src/helper.rs	/^impl TaskList {$/;"	c
TaskList	/home/darrion/projects/ClearHeadToDo/src/lib.rs	/^impl TaskList {$/;"	c
TaskList	/home/darrion/projects/ClearHeadToDo/src/lib.rs	/^pub struct TaskList {$/;"	s
Timestamp	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v1.rs	/^impl Timestamp {$/;"	c
Timestamp	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v1.rs	/^pub struct Timestamp {$/;"	s
TooFewValues	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    TooFewValues,$/;"	e	enum:ErrorKind
TooManyValues	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    TooManyValues,$/;"	e	enum:ErrorKind
TrailingValues	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    TrailingValues,$/;"	e	enum:AppSettings
TrailingVarArg	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    TrailingVarArg,$/;"	e	enum:AppSettings
TreeFocus	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^impl<A> Clone for TreeFocus<A> {$/;"	c
TreeFocus	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^impl<A> TreeFocus<A>$/;"	c
TreeFocus	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^pub struct TreeFocus<A> {$/;"	s
TreeFocus	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^unsafe impl<A> Send for TreeFocus<A> {}$/;"	c
TreeFocus	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^unsafe impl<A> Sync for TreeFocus<A> {}$/;"	c
TreeFocusMut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^impl<'a, A> TreeFocusMut<'a, A>$/;"	c
TreeFocusMut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^pub struct TreeFocusMut<'a, A> {$/;"	s
Tuple	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        Tuple(Vec<Content>),$/;"	e	enum:content::Content
Tuple	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    Tuple,$/;"	e	enum:Unsupported
Tuple	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ast.rs	/^    Tuple,$/;"	e	enum:Style
TupleStruct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        TupleStruct(&'static str, Vec<Content>),$/;"	e	enum:content::Content
TupleStruct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    TupleStruct,$/;"	e	enum:Unsupported
TupleTrait	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^enum TupleTrait {$/;"	g
TupleTrait	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^impl TupleTrait {$/;"	c
TupleVariant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    TupleVariant,$/;"	e	enum:Unexpected
TupleVariant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        TupleVariant(&'static str, u32, &'static str, Vec<Content>),$/;"	e	enum:content::Content
TupleVariant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^enum TupleVariant {$/;"	g
U16	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        U16(u16),$/;"	e	enum:content::Content
U16	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        U16(u16),$/;"	e	enum:content::Content
U32	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        U32(u32),$/;"	e	enum:content::Content
U32	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        U32(u32),$/;"	e	enum:content::Content
U32Deserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<'de, E> de::Deserializer<'de> for U32Deserializer<E>$/;"	c
U32Deserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<'de, E> de::EnumAccess<'de> for U32Deserializer<E>$/;"	c
U32Deserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^pub struct U32Deserializer<E> {$/;"	s
U64	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        U64(u64),$/;"	e	enum:content::Content
U64	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        U64(u64),$/;"	e	enum:content::Content
U8	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        U8(u8),$/;"	e	enum:content::Content
U8	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        U8(u8),$/;"	e	enum:content::Content
UPPERCASE	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/case.rs	/^    UPPERCASE,$/;"	e	enum:RenameRule
Unbounded	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^            Unbounded,$/;"	e	enum:deserialize::Field
Unexpected	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^impl<'a> fmt::Display for Unexpected<'a> {$/;"	c
Unexpected	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^pub enum Unexpected<'a> {$/;"	g
UnexpectedMultipleUsage	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    UnexpectedMultipleUsage,$/;"	e	enum:ErrorKind
UnifiedHelpMessage	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    UnifiedHelpMessage,$/;"	e	enum:AppSettings
Unit	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    Unit,$/;"	e	enum:Unexpected
Unit	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        Unit,$/;"	e	enum:content::Content
Unit	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        Unit,$/;"	e	enum:content::Content
Unit	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    Unit,$/;"	e	enum:Unsupported
Unit	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ast.rs	/^    Unit,$/;"	e	enum:Style
UnitDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<'de, E> de::Deserializer<'de> for UnitDeserializer<E>$/;"	c
UnitDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^pub struct UnitDeserializer<E> {$/;"	s
UnitOnly	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    impl<'de, E> de::VariantAccess<'de> for UnitOnly<E>$/;"	c	module:private
UnitOnly	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    pub struct UnitOnly<E> {$/;"	s	module:private
UnitStruct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        UnitStruct(&'static str),$/;"	e	enum:content::Content
UnitStruct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    UnitStruct,$/;"	e	enum:Unsupported
UnitVariant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    UnitVariant,$/;"	e	enum:Unexpected
UnitVariant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        UnitVariant(&'static str, u32, &'static str),$/;"	e	enum:content::Content
UnitVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'de> Visitor<'de> for UnitVisitor {$/;"	c
UnitVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^struct UnitVisitor;$/;"	s
Unknown	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    Unknown,$/;"	e	enum:UsageToken
UnknownArgument	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    UnknownArgument,$/;"	e	enum:ErrorKind
UnrecognizedSubcommand	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    UnrecognizedSubcommand,$/;"	e	enum:ErrorKind
Unsigned	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    Unsigned(u64),$/;"	e	enum:Unexpected
Unsupported	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^enum Unsupported {$/;"	g
Unsupported	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^impl Display for Unsupported {$/;"	c
Untagged	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^enum Untagged {$/;"	g
Untagged	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^    Untagged,$/;"	e	enum:StructVariant
Untagged	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^    Untagged,$/;"	e	enum:TupleVariant
UntaggedUnitVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'a> UntaggedUnitVisitor<'a> {$/;"	c	module:content
UntaggedUnitVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'de, 'a> Visitor<'de> for UntaggedUnitVisitor<'a> {$/;"	c	module:content
UntaggedUnitVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    pub struct UntaggedUnitVisitor<'a> {$/;"	s	module:content
Update	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    Update {$/;"	e	enum:DiffItem
Update	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    Update(A, Node<A>),$/;"	e	enum:Remove
Update	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    Update {$/;"	e	enum:DiffItem
Urn	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^impl Urn {$/;"	c
Urn	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^pub struct Urn(Uuid);$/;"	s
UrnPrefix	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/parser/error.rs	/^pub(crate) enum UrnPrefix {$/;"	g
UrnRef	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^impl<'a> UrnRef<'a> {$/;"	c
UrnRef	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^pub struct UrnRef<'a>(&'a Uuid);$/;"	s
UsageParser	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^impl<'a> UsageParser<'a> {$/;"	c
UsageParser	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^pub struct UsageParser<'a> {$/;"	s
UsageToken	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^enum UsageToken {$/;"	g
UseValueDelimiter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/settings.rs	/^    UseValueDelimiter,$/;"	e	enum:ArgSettings
Uuid	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^impl Uuid {$/;"	c
Uuid	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/mod.rs	/^impl Uuid {$/;"	c
Uuid	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^impl Default for Uuid {$/;"	c
Uuid	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^impl Uuid {$/;"	c
Uuid	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^impl fmt::Debug for Uuid {$/;"	c
Uuid	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^impl fmt::Display for Uuid {$/;"	c
Uuid	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^impl fmt::LowerHex for Uuid {$/;"	c
Uuid	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^impl fmt::UpperHex for Uuid {$/;"	c
Uuid	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^impl str::FromStr for Uuid {$/;"	c
Uuid	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^pub struct Uuid(Bytes);$/;"	s
Uuid	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/parser/mod.rs	/^impl Uuid {$/;"	c
Uuid	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/serde_support.rs	/^impl Serialize for Uuid {$/;"	c
Uuid	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/serde_support.rs	/^impl<'de> Deserialize<'de> for Uuid {$/;"	c
Uuid	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/slog_support.rs	/^impl slog::Value for Uuid {$/;"	c
Uuid	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v1.rs	/^impl Uuid {$/;"	c
Uuid	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v3.rs	/^    static FIXTURE: &'static [(&'static Uuid, &'static str, &'static str)] = &[$/;"	v	module:tests
Uuid	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v3.rs	/^impl Uuid {$/;"	c
Uuid	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v4.rs	/^impl Uuid {$/;"	c
Uuid	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v5.rs	/^    static FIXTURE: &'static [(&'static Uuid, &'static str, &'static str)] = &[$/;"	v	module:tests
Uuid	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v5.rs	/^impl Uuid {$/;"	c
Uuid	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/winapi_support.rs	/^impl Uuid {$/;"	c
UuidBytesVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/serde_support.rs	/^            impl<'vi> de::Visitor<'vi> for UuidBytesVisitor {$/;"	c	method:Uuid::deserialize
UuidBytesVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/serde_support.rs	/^            struct UuidBytesVisitor;$/;"	s	method:Uuid::deserialize
UuidContainer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/compact.rs	/^        struct UuidContainer {$/;"	s	function:tests::test_serialize_compact
UuidStringVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/serde_support.rs	/^            impl<'vi> de::Visitor<'vi> for UuidStringVisitor {$/;"	c	method:Uuid::deserialize
UuidStringVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/serde_support.rs	/^            struct UuidStringVisitor;$/;"	s	method:Uuid::deserialize
V	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<K, V> HashValue for (K, V)$/;"	c
V	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<K: Ord + Copy, V> BTreeValue for (K, V) {$/;"	c
V	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<K: Ord, V> BTreeValue for (K, V) {$/;"	c
Vacant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    Vacant(VacantEntry<'a, K, V, S>),$/;"	e	enum:Entry
Vacant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    Vacant(VacantEntry<'a, K, V>),$/;"	e	enum:Entry
VacantEntry	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<'a, K, V, S> VacantEntry<'a, K, V, S>$/;"	c
VacantEntry	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^pub struct VacantEntry<'a, K, V, S>$/;"	s
VacantEntry	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<'a, K, V> VacantEntry<'a, K, V>$/;"	c
VacantEntry	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^pub struct VacantEntry<'a, K, V>$/;"	s
ValName	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    ValName,$/;"	e	enum:UsageToken
ValidArgFound	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    ValidArgFound,$/;"	e	enum:AppSettings
ValidNegNumFound	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    ValidNegNumFound,$/;"	e	enum:AppSettings
Validator	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/validator.rs	/^impl<'a, 'b, 'z> Validator<'a, 'b, 'z> {$/;"	c
Validator	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/validator.rs	/^pub struct Validator<'a, 'b, 'z>(&'z mut Parser<'a, 'b>)$/;"	s
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^impl<A> Deref for Value<A> {$/;"	c
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^impl<A> HashValue for Value<A>$/;"	c
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^struct Value<A>(A);$/;"	s
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    Value(A, HashBits),$/;"	e	enum:Entry
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^impl<A: Ord + Copy> BTreeValue for Value<A> {$/;"	c
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^impl<A: Ord> BTreeValue for Value<A> {$/;"	c
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^impl<A> Deref for Value<A> {$/;"	c
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^struct Value<A>(A);$/;"	s
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ser.rs	/^    type Value = S;$/;"	t
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/ignored_any.rs	/^    type Value = IgnoredAny;$/;"	t	implementation:IgnoredAny
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^                    type Value = Field;$/;"	t	implementation:Duration::deserialize::Field::deserialize::FieldVisitor
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^                    type Value = Field;$/;"	t	implementation:SystemTime::deserialize::Field::deserialize::FieldVisitor
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^                    type Value = Field;$/;"	t	implementation:deserialize::Field::deserialize::FieldVisitor
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^                type Value = Field;$/;"	t	implementation:range::Field::deserialize::FieldVisitor
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^                type Value = net::IpAddr;$/;"	t	implementation:IpAddr::deserialize::IpAddrVisitor
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^                type Value = net::SocketAddr;$/;"	t	implementation:SocketAddr::deserialize::SocketAddrVisitor
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^            type Value = ();$/;"	t	function:deserialize_in_place
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^            type Value = Bound<T>;$/;"	t	function:deserialize
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^            type Value = Duration;$/;"	t	implementation:Duration::deserialize::DurationVisitor
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^            type Value = Duration;$/;"	t	implementation:SystemTime::deserialize::DurationVisitor
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^            type Value = Result<T, E>;$/;"	t	function:deserialize
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^            type Value = Vec<T>;$/;"	t	function:deserialize
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^        type Value = (Idx, Idx);$/;"	t	module:range
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    type Value = &'a Path;$/;"	t	implementation:PathVisitor
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    type Value = &'a [u8];$/;"	t	implementation:BytesVisitor
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    type Value = &'a str;$/;"	t	implementation:StrVisitor
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    type Value = ();$/;"	t	implementation:StringInPlaceVisitor
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    type Value = ();$/;"	t	implementation:UnitVisitor
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    type Value = CString;$/;"	t	implementation:CStringVisitor
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    type Value = Option<T>;$/;"	t
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    type Value = OsString;$/;"	t	implementation:OsStringVisitor
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    type Value = PathBuf;$/;"	t	implementation:PathBufVisitor
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    type Value = PhantomData<T>;$/;"	t	implementation:PhantomDataVisitor
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    type Value = String;$/;"	t	implementation:StringVisitor
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    type Value = [T; 0];$/;"	t	implementation:ArrayVisitor
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    type Value = bool;$/;"	t	implementation:BoolVisitor
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    type Value = char;$/;"	t	implementation:CharVisitor
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    type Value = T;$/;"	t
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    type Value;$/;"	t	interface:DeserializeSeed
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    type Value;$/;"	t	interface:Visitor
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^        type Value = V::Value;$/;"	t	module:private
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        type Value = ();$/;"	t	implementation:content::InternallyTaggedUnitVisitor
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        type Value = ();$/;"	t	implementation:content::UntaggedUnitVisitor
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        type Value = Content<'de>;$/;"	t	implementation:content::ContentVisitor
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        type Value = Cow<'a, [u8]>;$/;"	t	implementation:borrow_cow_bytes::CowBytesVisitor
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        type Value = Cow<'a, str>;$/;"	t	implementation:borrow_cow_str::CowStrVisitor
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        type Value = TagContentOtherField;$/;"	t	implementation:content::TagContentOtherFieldVisitor
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        type Value = TagOrContent<'de>;$/;"	t	implementation:content::TagOrContentVisitor
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        type Value = TagOrContentField;$/;"	t	implementation:content::TagOrContentFieldVisitor
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        type Value = TaggedContent<'de, T>;$/;"	t	module:content
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    type Value = ();$/;"	t
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/serde_support.rs	/^                type Value = Uuid;$/;"	t	implementation:Uuid::deserialize::UuidBytesVisitor
Value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/serde_support.rs	/^                type Value = Uuid;$/;"	t	implementation:Uuid::deserialize::UuidStringVisitor
ValueDelimiterNotSet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/settings.rs	/^    ValueDelimiterNotSet,$/;"	e	enum:ArgSettings
ValueValidation	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    ValueValidation,$/;"	e	enum:ErrorKind
Valued	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/valued.rs	/^impl<'n, 'e, 'z> From<&'z Arg<'n, 'e>> for Valued<'n, 'e> {$/;"	c
Valued	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/valued.rs	/^impl<'n, 'e> Default for Valued<'n, 'e> {$/;"	c
Valued	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/valued.rs	/^impl<'n, 'e> Valued<'n, 'e> {$/;"	c
Valued	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/valued.rs	/^pub struct Valued<'a, 'b>$/;"	s
Values	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^impl<'a> Default for Values<'a> {$/;"	c
Values	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^impl<'a> DoubleEndedIterator for Values<'a> {$/;"	c
Values	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^impl<'a> ExactSizeIterator for Values<'a> {}$/;"	c
Values	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^impl<'a> Iterator for Values<'a> {$/;"	c
Values	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^pub struct Values<'a> {$/;"	s
Values	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/map.rs	/^    pub type Values<'a, V> = btree_map::Values<'a, usize, V>;$/;"	t	module:vec_map
Values	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<'a, K, V> ExactSizeIterator for Values<'a, K, V> {}$/;"	c
Values	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<'a, K, V> FusedIterator for Values<'a, K, V> {}$/;"	c
Values	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^impl<'a, K, V> Iterator for Values<'a, K, V> {$/;"	c
Values	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^pub struct Values<'a, K, V> {$/;"	s
Values	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    Values(PoolRef<Chunk<A>>),$/;"	e	enum:Entry
Values	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<'a, K, V> DoubleEndedIterator for Values<'a, K, V>$/;"	c
Values	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<'a, K, V> ExactSizeIterator for Values<'a, K, V>$/;"	c
Values	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^impl<'a, K, V> Iterator for Values<'a, K, V>$/;"	c
Values	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^pub struct Values<'a, K, V> {$/;"	s
ValuesDone	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    ValuesDone,$/;"	e	enum:ParseResult
Variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    type Variant: VariantAccess<'de, Error = Self::Error>;$/;"	t	interface:EnumAccess
Variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    type Variant = private::MapAsEnum<A>;$/;"	t
Variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    type Variant = private::UnitOnly<E>;$/;"	t
Variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        type Variant = VariantDeserializer<'de, Self::Error>;$/;"	t	module:content
Variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        type Variant = VariantRefDeserializer<'a, 'de, Self::Error>;$/;"	t	module:content
Variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ast.rs	/^pub struct Variant<'a> {$/;"	s
Variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    Variant,$/;"	e	enum:Identifier
Variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^impl Variant {$/;"	c
Variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^pub struct Variant {$/;"	s
Variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^impl fmt::Display for Variant {$/;"	c
Variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^pub enum Variant {$/;"	g
VariantAccess	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^pub trait VariantAccess<'de>: Sized {$/;"	i
VariantDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'de, E> de::VariantAccess<'de> for VariantDeserializer<'de, E>$/;"	c	module:content
VariantDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    pub struct VariantDeserializer<'de, E>$/;"	s	module:content
VariantRefDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    impl<'de, 'a, E> de::VariantAccess<'de> for VariantRefDeserializer<'a, 'de, E>$/;"	c	module:content
VariantRefDeserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    struct VariantRefDeserializer<'a, 'de: 'a, E>$/;"	s	module:content
Vec	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'de, T> Deserialize<'de> for Vec<T>$/;"	c
Vec	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<'de, T, E> IntoDeserializer<'de, E> for Vec<T>$/;"	c
VecAttr	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^impl<'c, T> VecAttr<'c, T> {$/;"	c
VecAttr	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^struct VecAttr<'c, T> {$/;"	s
VecInPlaceVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^        impl<'a, 'de, T> Visitor<'de> for VecInPlaceVisitor<'a, T>$/;"	c	function:deserialize_in_place
VecInPlaceVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^        struct VecInPlaceVisitor<'a, T: 'a>(&'a mut Vec<T>);$/;"	s	function:deserialize_in_place
VecMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/map.rs	/^    impl<V> VecMap<V> {$/;"	c	module:vec_map
VecMap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/map.rs	/^    pub struct VecMap<V> {$/;"	s	module:vec_map
VecVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^        impl<'de, T> Visitor<'de> for VecVisitor<T>$/;"	c	function:deserialize
VecVisitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^        struct VecVisitor<T> {$/;"	s	function:deserialize
Vector	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/arbitrary.rs	/^impl<A: Arbitrary + Clone> Arbitrary for Vector<A> {$/;"	c
Vector	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/quickcheck.rs	/^impl<A: Arbitrary + Sync + Clone> Arbitrary for Vector<A> {$/;"	c
Vector	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ser.rs	/^impl<'de, A: Clone + Deserialize<'de>> Deserialize<'de> for Vector<A> {$/;"	c
Vector	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ser.rs	/^impl<A: Clone + Serialize> Serialize for Vector<A> {$/;"	c
Vector	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<'a, A: Clone> Add for &'a Vector<A> {$/;"	c
Vector	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<'a, A: Clone> From<&'a Vec<A>> for Vector<A> {$/;"	c
Vector	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<'a, A: Clone> From<&'a [A]> for Vector<A> {$/;"	c
Vector	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<'a, A: Clone> IntoIterator for &'a Vector<A> {$/;"	c
Vector	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<'s, 'a, A, OA> From<&'s Vector<&'a A>> for Vector<OA>$/;"	c
Vector	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<A: Clone + Debug> Debug for Vector<A> {$/;"	c
Vector	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<A: Clone + Eq> Eq for Vector<A> {}$/;"	c
Vector	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<A: Clone + Eq> PartialEq for Vector<A> {$/;"	c
Vector	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<A: Clone + Hash> Hash for Vector<A> {$/;"	c
Vector	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<A: Clone + Ord> Ord for Vector<A> {$/;"	c
Vector	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<A: Clone + PartialEq> PartialEq for Vector<A> {$/;"	c
Vector	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<A: Clone + PartialOrd> PartialOrd for Vector<A> {$/;"	c
Vector	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<A: Clone> Add for Vector<A> {$/;"	c
Vector	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<A: Clone> Clone for Vector<A> {$/;"	c
Vector	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<A: Clone> Default for Vector<A> {$/;"	c
Vector	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<A: Clone> Extend<A> for Vector<A> {$/;"	c
Vector	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<A: Clone> From<Vec<A>> for Vector<A> {$/;"	c
Vector	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<A: Clone> FromIterator<A> for Vector<A> {$/;"	c
Vector	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<A: Clone> Index<usize> for Vector<A> {$/;"	c
Vector	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<A: Clone> IndexMut<usize> for Vector<A> {$/;"	c
Vector	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<A: Clone> IntoIterator for Vector<A> {$/;"	c
Vector	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<A: Clone> Sum for Vector<A> {$/;"	c
Vector	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^impl<A: Clone> Vector<A> {$/;"	c
Vector	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^pub struct Vector<A> {$/;"	s
Vector	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/rayon.rs	/^impl<'a, A> IntoParallelRefIterator<'a> for Vector<A>$/;"	c
Vector	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/rayon.rs	/^impl<'a, A> IntoParallelRefMutIterator<'a> for Vector<A>$/;"	c
VectorChunkSize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/config.rs	/^pub(crate) type VectorChunkSize = U64;$/;"	t
VectorInner	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^enum VectorInner<A> {$/;"	g
VectorMutProducer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/rayon.rs	/^impl<'a, A> Producer for VectorMutProducer<'a, A>$/;"	c
VectorMutProducer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/rayon.rs	/^struct VectorMutProducer<'a, A>$/;"	s
VectorProducer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/rayon.rs	/^impl<'a, A> Producer for VectorProducer<'a, A>$/;"	c
VectorProducer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/rayon.rs	/^struct VectorProducer<'a, A>$/;"	s
Version	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^pub enum Version {$/;"	g
VersionDisplayed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    VersionDisplayed,$/;"	e	enum:ErrorKind
VersionlessSubcommands	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    VersionlessSubcommands,$/;"	e	enum:AppSettings
Visitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^pub trait Visitor<'de>: Sized {$/;"	i
Void	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impossible.rs	/^enum Void {}$/;"	g
WaitOnError	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    WaitOnError,$/;"	e	enum:AppSettings
Warning	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/fmt.rs	/^    Warning(T),$/;"	e	enum:Format
Wrapping	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'de, T> Deserialize<'de> for Wrapping<T>$/;"	c
Wrapping	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^impl<T> Serialize for Wrapping<T>$/;"	c
WriteError	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^    WriteError(io::Error),$/;"	e	enum:CopyUntilResult
WrongNumberOfValues	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    WrongNumberOfValues,$/;"	e	enum:ErrorKind
Yes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^    Yes,$/;"	e	enum:Untagged
Yield	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    Yield(&'a A),$/;"	e	enum:IterItem
Yield	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    Yield(A),$/;"	e	enum:ConsumingIterItem
Zsh	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/shell.rs	/^    Zsh,$/;"	e	enum:Shell
ZshGen	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/zsh.rs	/^impl<'a, 'b> ZshGen<'a, 'b> {$/;"	c
ZshGen	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/zsh.rs	/^pub struct ZshGen<'a, 'b>$/;"	s
_StrExt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/strext.rs	/^pub trait _StrExt {$/;"	i
__private_deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/macros.rs	/^macro_rules! __private_deserialize {$/;"	M
__private_serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/macros.rs	/^macro_rules! __private_serialize {$/;"	M
__private_visit_untagged_option	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn __private_visit_untagged_option<D>(self, deserializer: D) -> Result<Self::Value, ()>$/;"	f
__private_visit_untagged_option	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn __private_visit_untagged_option<D>(self, _: D) -> Result<Self::Value, ()>$/;"	P	interface:Visitor
__serialize_unimplemented	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/macros.rs	/^macro_rules! __serialize_unimplemented {$/;"	M
__serialize_unimplemented_helper	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/macros.rs	/^macro_rules! __serialize_unimplemented_helper {$/;"	M
__serialize_unimplemented_method	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/macros.rs	/^macro_rules! __serialize_unimplemented_method {$/;"	M
_clap_count_exprs	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs	/^macro_rules! _clap_count_exprs {$/;"	M
_description	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/parser/error.rs	/^    fn _description(&self) -> &str {$/;"	P	implementation:Error
_find_by_long	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs	/^macro_rules! _find_by_long {$/;"	M
_find_by_short	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs	/^macro_rules! _find_by_short {$/;"	M
_help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    fn _help(&self, mut use_long: bool) -> Error {$/;"	f
_is_char_boundary	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/strext.rs	/^    fn _is_char_boundary(&self, index: usize) -> bool {$/;"	P	implementation:str
_is_char_boundary	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/strext.rs	/^    fn _is_char_boundary(&self, index: usize) -> bool;$/;"	P	interface:_StrExt
_marker	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    _marker: PhantomData<E>,$/;"	m	struct:FlatInternallyTaggedAccess
_marker	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    _marker: PhantomData<E>,$/;"	m	struct:FlatMapAccess
_marker	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    _marker: PhantomData<E>,$/;"	m	struct:FlatStructAccess
_names	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs	/^macro_rules! _names {$/;"	M
_shorts_longs	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs	/^macro_rules! _shorts_longs {$/;"	M
_version	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    fn _version(&self, use_long: bool) -> Error {$/;"	f
_write_parser_help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^    pub fn _write_parser_help($/;"	P	implementation:Help
a	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^impl<'a> Display for Expected + 'a {$/;"	c
about	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/meta.rs	/^    pub about: Option<&'b str>,$/;"	m	struct:AppMeta
about	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn about<S: Into<&'b str>>(mut self, about: S) -> Self {$/;"	P	implementation:App
adapter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^pub mod adapter;$/;"	n
add	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn add(self, other: Self) -> Self::Output {$/;"	f
add	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    fn add(self, other: Self) -> Self::Output {$/;"	f
add	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn add(self, other: Self) -> Self::Output {$/;"	f
add	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    fn add(self, other: Self) -> Self::Output {$/;"	P	implementation:OrdSet
add	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn add(mut self, other: Self) -> Self::Output {$/;"	P	implementation:Vector
add	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn add(self, other: Self) -> Self::Output {$/;"	P	implementation:Vector
add_arg	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn add_arg(&mut self, a: Arg<'a, 'b>) {$/;"	f
add_arg_groups	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    fn add_arg_groups(&mut self, a: &Arg<'a, 'b>) {$/;"	f
add_arg_ref	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn add_arg_ref(&mut self, a: &Arg<'a, 'b>) {$/;"	f
add_conditional_reqs	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    fn add_conditional_reqs(&mut self, a: &Arg<'a, 'b>) {$/;"	f
add_defaults	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn add_defaults(&mut self, matcher: &mut ArgMatcher<'a>) -> ClapResult<()> {$/;"	f
add_env	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn add_env(&mut self, matcher: &mut ArgMatcher<'a>) -> ClapResult<()> {$/;"	f
add_group	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn add_group(&mut self, group: ArgGroup<'a>) {$/;"	f
add_index_to	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matcher.rs	/^    pub fn add_index_to(&mut self, arg: &'a str, idx: usize) {$/;"	P	implementation:ArgMatcher
add_nil_task	/home/darrion/projects/ClearHeadToDo/src/helper.rs	/^    pub fn add_nil_task(self) -> Self {$/;"	P	implementation:TaskList
add_reqs	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    fn add_reqs(&mut self, a: &Arg<'a, 'b>) {$/;"	f
add_sc	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/zsh.rs	/^    fn add_sc(sc: &App, n: &str, ret: &mut Vec<String>) {$/;"	f	function:subcommands_of
add_single_val_to_arg	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    fn add_single_val_to_arg<A>($/;"	f
add_subcommand	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn add_subcommand(&mut self, mut subcmd: App<'a, 'b>) {$/;"	f
add_val	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^        macro_rules! add_val {$/;"	M	function:add_defaults
add_val	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^        macro_rules! add_val {$/;"	M	function:add_env
add_val_to	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matcher.rs	/^    pub fn add_val_to(&mut self, arg: &'a str, val: &OsStr) {$/;"	P	implementation:ArgMatcher
add_val_to_arg	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    fn add_val_to_arg<A>($/;"	f
after_help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn after_help<S: Into<&'b str>>(mut self, help: S) -> Self {$/;"	P	implementation:App
alias	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn alias<S: Into<&'b str>>(mut self, name: S) -> Self {$/;"	P	implementation:App
alias	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn alias<S: Into<&'b str>>(mut self, name: S) -> Self {$/;"	P	implementation:Arg
aliases	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/meta.rs	/^    pub aliases: Option<Vec<(&'b str, bool)>>, \/\/ (name, visible)$/;"	m	struct:AppMeta
aliases	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    fn aliases(&self) -> Option<Vec<&'e str>> {$/;"	P	implementation:App
aliases	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn aliases(mut self, names: &[&'b str]) -> Self {$/;"	P	implementation:App
aliases	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn aliases(&self) -> Option<Vec<&'e str>> {$/;"	f
aliases	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn aliases(&self) -> Option<Vec<&'e str>>;$/;"	P	interface:AnyArg
aliases	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn aliases(mut self, names: &[&'b str]) -> Self {$/;"	P	implementation:Arg
aliases	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^    fn aliases(&self) -> Option<Vec<&'e str>> {$/;"	P	implementation:FlagBuilder
aliases	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    fn aliases(&self) -> Option<Vec<&'e str>> {$/;"	P	implementation:OptBuilder
aliases	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    fn aliases(&self) -> Option<Vec<&'e str>> {$/;"	P	implementation:PosBuilder
aliases	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/switched.rs	/^    pub aliases: Option<Vec<(&'b str, bool)>>, \/\/ (name, visible)$/;"	m	struct:Switched
aliases	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn aliases(&self) -> Vec<String> {$/;"	P	implementation:Field
aliases	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn aliases(&self) -> Vec<String> {$/;"	P	implementation:Variant
all_fields	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ast.rs	/^    pub fn all_fields(&'a self) -> Box<Iterator<Item = &'a Field<'a>> + 'a> {$/;"	P	implementation:Data
all_options_for_path	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/bash.rs	/^    fn all_options_for_path(&self, path: &str) -> String {$/;"	P	implementation:BashGen
all_subcommand_names	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/mod.rs	/^pub fn all_subcommand_names(p: &Parser) -> Vec<String> {$/;"	f
all_subcommands	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/bash.rs	/^    fn all_subcommands(&self) -> String {$/;"	P	implementation:BashGen
all_subcommands	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/mod.rs	/^pub fn all_subcommands(p: &Parser) -> Vec<(String, String)> {$/;"	f
all_type_params	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/bound.rs	/^        all_type_params: HashSet<syn::Ident>,$/;"	m	struct:with_bound::FindTyParams
allow_hyphen_values	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn allow_hyphen_values(self, a: bool) -> Self {$/;"	P	implementation:Arg
allow_transparent	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/check.rs	/^fn allow_transparent(field: &Field, derive: Derive) -> bool {$/;"	f
alter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn alter<F>(&self, f: F, k: K) -> Self$/;"	f
alter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn alter<F>(&self, f: F, k: K) -> Self$/;"	f
and_modify	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn and_modify<F>(mut self, f: F) -> Self$/;"	f
and_modify	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn and_modify<F>(mut self, f: F) -> Self$/;"	f
any_arg	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/mod.rs	/^pub mod any_arg;$/;"	n
app	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/lib.rs	/^mod app;$/;"	n
app_debug_asserts	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    fn app_debug_asserts(&self) -> bool {$/;"	f
app_from_crate	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs	/^macro_rules! app_from_crate {$/;"	M
app_settings_fromstr	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    fn app_settings_fromstr() {$/;"	f	module:test
append	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn append(&mut self, mut other: Self) {$/;"	P	implementation:Vector
apply_to_field	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/case.rs	/^    pub fn apply_to_field(&self, field: &str) -> String {$/;"	P	implementation:RenameRule
apply_to_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/case.rs	/^    pub fn apply_to_variant(&self, variant: &str) -> String {$/;"	P	implementation:RenameRule
arbitrary	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/arbitrary.rs	/^    fn arbitrary(u: &mut Unstructured<'_>) -> Result<Self> {$/;"	P	implementation:OrdMap
arbitrary	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/arbitrary.rs	/^    fn arbitrary(u: &mut Unstructured<'_>) -> Result<Self> {$/;"	P	implementation:OrdSet
arbitrary	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/arbitrary.rs	/^    fn arbitrary(u: &mut Unstructured<'_>) -> Result<Self> {$/;"	P	implementation:Vector
arbitrary	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/arbitrary.rs	/^    fn arbitrary(u: &mut Unstructured<'_>) -> Result<Self> {$/;"	f
arbitrary	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/lib.rs	/^pub mod arbitrary;$/;"	n
arbitrary	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/quickcheck.rs	/^    fn arbitrary<G: Gen>(g: &mut G) -> Self {$/;"	P	implementation:OrdMap
arbitrary	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/quickcheck.rs	/^    fn arbitrary<G: Gen>(g: &mut G) -> Self {$/;"	P	implementation:OrdSet
arbitrary	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/quickcheck.rs	/^    fn arbitrary<G: Gen>(g: &mut G) -> Self {$/;"	P	implementation:Vector
arbitrary	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/quickcheck.rs	/^    fn arbitrary<G: Gen>(g: &mut G) -> Self {$/;"	f
arbitrary_take_rest	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/arbitrary.rs	/^    fn arbitrary_take_rest(u: Unstructured<'_>) -> Result<Self> {$/;"	P	implementation:OrdMap
arbitrary_take_rest	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/arbitrary.rs	/^    fn arbitrary_take_rest(u: Unstructured<'_>) -> Result<Self> {$/;"	P	implementation:OrdSet
arbitrary_take_rest	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/arbitrary.rs	/^    fn arbitrary_take_rest(u: Unstructured<'_>) -> Result<Self> {$/;"	P	implementation:Vector
arbitrary_take_rest	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/arbitrary.rs	/^    fn arbitrary_take_rest(u: Unstructured<'_>) -> Result<Self> {$/;"	f
arg	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn arg<A: Into<Arg<'a, 'b>>>(mut self, a: A) -> Self {$/;"	P	implementation:App
arg	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/group.rs	/^    pub fn arg(mut self, n: &'a str) -> Self {$/;"	P	implementation:ArgGroup
arg	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/mod.rs	/^mod arg;$/;"	n
arg_builder	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/mod.rs	/^mod arg_builder;$/;"	n
arg_enum	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs	/^macro_rules! arg_enum {$/;"	M
arg_from_usage	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn arg_from_usage(mut self, usage: &'a str) -> Self {$/;"	P	implementation:App
arg_matcher	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/mod.rs	/^mod arg_matcher;$/;"	n
arg_matches	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/mod.rs	/^mod arg_matches;$/;"	n
arg_names	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matcher.rs	/^    pub fn arg_names(&'a self) -> Vec<&'a str> {$/;"	P	implementation:ArgMatcher
arg_names	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs	/^macro_rules! arg_names {$/;"	M
arg_names_in_group	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn arg_names_in_group(&self, group: &str) -> Vec<&'a str> {$/;"	f
arg_settings_fromstr	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/settings.rs	/^    fn arg_settings_fromstr() {$/;"	f	module:test
args	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn args(mut self, args: &[Arg<'a, 'b>]) -> Self {$/;"	P	implementation:App
args	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    pub args: HashMap<&'a str, MatchedArg>,$/;"	m	struct:ArgMatches
args	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/group.rs	/^    pub args: Vec<&'a str>,$/;"	m	struct:ArgGroup
args	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/group.rs	/^    pub fn args(mut self, ns: &[&'a str]) -> Self {$/;"	P	implementation:ArgGroup
args	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/lib.rs	/^mod args;$/;"	n
args_from_usage	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn args_from_usage(mut self, usage: &'a str) -> Self {$/;"	P	implementation:App
args_in_group	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn args_in_group(&self, group: &str) -> Vec<String> {$/;"	f
argument_conflict	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    pub fn argument_conflict<O, U>($/;"	P	implementation:Error
argument_not_found_auto	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    pub fn argument_not_found_auto<A>(arg: A) -> Self$/;"	P	implementation:Error
array_impls	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^macro_rules! array_impls {$/;"	M
array_impls	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^macro_rules! array_impls {$/;"	M
as_arg_trait	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^fn as_arg_trait<'a, 'b, T: ArgWithOrder<'a, 'b>>(x: &T) -> &ArgWithOrder<'a, 'b> {$/;"	f
as_base	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^    fn as_base(&self) -> &ArgWithDisplay<'b, 'c> {$/;"	f
as_base	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^    fn as_base(&self) -> &ArgWithDisplay<'b, 'c>;$/;"	P	interface:ArgWithOrder
as_bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/osstringext.rs	/^    fn as_bytes(&self) -> &[u8] {$/;"	P	implementation:OsStr
as_bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/osstringext.rs	/^    fn as_bytes(&self) -> &[u8];$/;"	P	interface:OsStrExt3
as_bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    pub const fn as_bytes(&self) -> &Bytes {$/;"	P	implementation:Uuid
as_fields	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    pub fn as_fields(&self) -> (u32, u16, u16, &[u8; 8]) {$/;"	P	implementation:Uuid
as_ref	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn as_ref(&self) -> &Self {$/;"	P	implementation:HashMap
as_ref	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn as_ref(&self) -> &Self {$/;"	P	implementation:OrdMap
as_ref	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/fragment.rs	/^    fn as_ref(&self) -> &TokenStream {$/;"	P	implementation:Fragment
as_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/utf8.rs	/^    pub fn as_str(&self) -> &str {$/;"	P	implementation:Encode
as_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        pub fn as_str(&self) -> Option<&str> {$/;"	P	implementation:content::Content
as_u128	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    pub fn as_u128(&self) -> u128 {$/;"	P	implementation:Uuid
assert_invariants	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    pub(crate) fn assert_invariants(&self, level: usize) -> usize {$/;"	P	implementation:Node
assert_invariants	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn assert_invariants(&self) {$/;"	P	implementation:RRB
assert_invariants	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn assert_invariants(&self) {$/;"	P	implementation:Vector
associated_type_usage	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/bound.rs	/^        associated_type_usage: Vec<&'ast syn::TypePath>,$/;"	m	struct:with_bound::FindTyParams
ast	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/mod.rs	/^pub mod ast;$/;"	n
at_most_one	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    fn at_most_one(mut self) -> Result<Option<T>, ()> {$/;"	P	implementation:VecAttr
atomic_impl	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^macro_rules! atomic_impl {$/;"	M
atomic_impl	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^macro_rules! atomic_impl {$/;"	M
attr	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/mod.rs	/^pub mod attr;$/;"	n
attrs	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ast.rs	/^    pub attrs: attr::Container,$/;"	m	struct:Container
attrs	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ast.rs	/^    pub attrs: attr::Field,$/;"	m	struct:Field
attrs	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ast.rs	/^    pub attrs: attr::Variant,$/;"	m	struct:Variant
author	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/meta.rs	/^    pub author: Option<&'b str>,$/;"	m	struct:AppMeta
author	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn author<S: Into<&'b str>>(mut self, author: S) -> Self {$/;"	P	implementation:App
b	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub b: Base<'a, 'b>,$/;"	m	struct:Arg
b	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^    pub b: Base<'n, 'e>,$/;"	m	struct:FlagBuilder
b	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    pub b: Base<'n, 'e>,$/;"	m	struct:OptBuilder
b	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    pub b: Base<'n, 'e>,$/;"	m	struct:PosBuilder
back	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn back(&self) -> Option<&A> {$/;"	P	implementation:Vector
back_index	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    back_index: usize,$/;"	m	struct:Chunks
back_index	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    back_index: usize,$/;"	m	struct:ChunksMut
back_index	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    back_index: usize,$/;"	m	struct:Iter
back_index	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    back_index: usize,$/;"	m	struct:IterMut
back_last	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    back_last: Option<A>,$/;"	m	struct:ConsumingIter
back_mut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn back_mut(&mut self) -> Option<&mut A> {$/;"	P	implementation:Vector
back_path	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    back_path: Vec<(&'a Node<A>, usize)>,$/;"	m	struct:Iter
back_stack	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    back_stack: Vec<ConsumingIterItem<A>>,$/;"	m	struct:ConsumingIter
bad_type	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn bad_type(self, what: Unsupported) -> S::Error {$/;"	f
bad_type	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn bad_type(what: Unsupported) -> M::Error {$/;"	f
base	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/mod.rs	/^mod base;$/;"	n
bash	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/mod.rs	/^mod bash;$/;"	n
before_help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn before_help<S: Into<&'b str>>(mut self, help: S) -> Self {$/;"	P	implementation:App
bin_name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/meta.rs	/^    pub bin_name: Option<String>,$/;"	m	struct:AppMeta
bin_name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn bin_name<S: Into<String>>(mut self, name: S) -> Self {$/;"	P	implementation:App
binary_search	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn binary_search(&self, value: &A) -> Result<usize, usize>$/;"	P	implementation:Vector
binary_search_by	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn binary_search_by<F>(&self, mut f: F) -> Result<usize, usize>$/;"	P	implementation:Vector
binary_search_by_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn binary_search_by_key<B, F>(&self, b: &B, mut f: F) -> Result<usize, usize>$/;"	P	implementation:Vector
bitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    fn bitor(self, rhs: Self) -> Self {$/;"	P	implementation:AppFlags
blacklist	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    fn blacklist(&self) -> Option<&[&'e str]> {$/;"	P	implementation:App
blacklist	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn blacklist(&self) -> Option<&[&'e str]> {$/;"	f
blacklist	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn blacklist(&self) -> Option<&[&'e str]>;$/;"	P	interface:AnyArg
blacklist	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/base.rs	/^    pub blacklist: Option<Vec<&'a str>>,$/;"	m	struct:Base
blacklist	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^    fn blacklist(&self) -> Option<&[&'e str]> {$/;"	P	implementation:FlagBuilder
blacklist	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    fn blacklist(&self) -> Option<&[&'e str]> {$/;"	P	implementation:OptBuilder
blacklist	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    fn blacklist(&self) -> Option<&[&'e str]> {$/;"	P	implementation:PosBuilder
bool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'de> Deserialize<'de> for bool {$/;"	c
borrow	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    borrow: Option<syn::Meta>,$/;"	m	struct:Variant
borrow_cow_bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^pub fn borrow_cow_bytes<'de: 'a, 'a, D, R>(deserializer: D) -> Result<R, D::Error>$/;"	f
borrow_cow_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^pub fn borrow_cow_str<'de: 'a, 'a, D, R>(deserializer: D) -> Result<R, D::Error>$/;"	f
borrowable_lifetimes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^fn borrowable_lifetimes($/;"	f
borrowed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^    borrowed: BorrowedLifetimes,$/;"	m	struct:Parameters
borrowed_lifetimes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn borrowed_lifetimes(cont: &Container) -> BorrowedLifetimes {$/;"	f
borrowed_lifetimes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    borrowed_lifetimes: BTreeSet<syn::Lifetime>,$/;"	m	struct:Field
borrowed_lifetimes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn borrowed_lifetimes(&self) -> &BTreeSet<syn::Lifetime> {$/;"	P	implementation:Field
bound	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/lib.rs	/^mod bound;$/;"	n
box_forwarded_impl	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^macro_rules! box_forwarded_impl {$/;"	M
btree	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/mod.rs	/^pub(crate) mod btree;$/;"	n
buf	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/utf8.rs	/^    buf: [u8; 4],$/;"	m	struct:Encode
build	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/mod.rs	/^    pub fn build(&mut self) -> Uuid {$/;"	P	implementation:Builder
build_bin_names	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    fn build_bin_names(&mut self) {$/;"	f
build_err	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/validator.rs	/^    fn build_err(&self, name: &str, matcher: &ArgMatcher) -> ClapResult<()> {$/;"	P	implementation:Validator
build_generics	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn build_generics(cont: &Container, borrowed: &BorrowedLifetimes) -> syn::Generics {$/;"	f
build_generics	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^fn build_generics(cont: &Container) -> syn::Generics {$/;"	f
build_hasher	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/test.rs	/^    fn build_hasher(&self) -> Self::Hasher {$/;"	P	implementation:MetroHashBuilder
builder	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^mod builder;$/;"	n
cache	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    cache: Option<&'a str>,$/;"	m	struct:Parser
cap_index	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/tests/vector.rs	/^fn cap_index(len: usize, index: usize) -> usize {$/;"	f
case	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/mod.rs	/^mod case;$/;"	n
case_insensitive	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn case_insensitive(self, ci: bool) -> Self {$/;"	P	implementation:Arg
cast_uninit	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^unsafe fn cast_uninit<A>(target: &mut A) -> &mut mem::MaybeUninit<A> {$/;"	f
cautious	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    pub fn cautious(hint: Option<usize>) -> usize {$/;"	f	module:size_hint
change_priority	/home/darrion/projects/ClearHeadToDo/src/task.rs	/^    pub fn change_priority(&self, new_priority: &str) -> Result<Task, Box<dyn Error>> {$/;"	P	implementation:Task
change_task_priority	/home/darrion/projects/ClearHeadToDo/src/lib.rs	/^    pub fn change_task_priority($/;"	P	implementation:TaskList
char	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'de> Deserialize<'de> for char {$/;"	c
check	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/validator.rs	/^        macro_rules! check {$/;"	M	method:Validator::validate_required_unless
check	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/check.rs	/^pub fn check(cx: &Ctxt, cont: &mut Container, derive: Derive) {$/;"	f
check	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ctxt.rs	/^    pub fn check(self) -> Result<(), Vec<syn::Error>> {$/;"	P	implementation:Ctxt
check	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/mod.rs	/^mod check;$/;"	n
check	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^        macro_rules! check {$/;"	M	function:tests::test_upper_lower_hex
check	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    macro_rules! check {$/;"	M	module:tests
check_adjacent_tag_conflict	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/check.rs	/^fn check_adjacent_tag_conflict(cx: &Ctxt, cont: &Container) {$/;"	f
check_flatten	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/check.rs	/^fn check_flatten(cx: &Ctxt, cont: &Container) {$/;"	f
check_flatten_field	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/check.rs	/^fn check_flatten_field(cx: &Ctxt, style: Style, field: &Field) {$/;"	f
check_for_help_and_version_char	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    fn check_for_help_and_version_char(&self, arg: char) -> ClapResult<()> {$/;"	f
check_for_help_and_version_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    fn check_for_help_and_version_str(&self, arg: &OsStr) -> ClapResult<()> {$/;"	f
check_from_and_try_from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/check.rs	/^fn check_from_and_try_from(cx: &Ctxt, cont: &mut Container) {$/;"	f
check_getter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/check.rs	/^fn check_getter(cx: &Ctxt, cont: &Container) {$/;"	f
check_identifier	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/check.rs	/^fn check_identifier(cx: &Ctxt, cont: &Container) {$/;"	f
check_index_bounds	/home/darrion/projects/ClearHeadToDo/src/lib.rs	/^    pub fn check_index_bounds(&self, index: usize) -> Result<usize, Box<dyn Error>> {$/;"	P	implementation:TaskList
check_internal_tag_field_name_conflict	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/check.rs	/^fn check_internal_tag_field_name_conflict(cx: &Ctxt, cont: &Container) {$/;"	f
check_transparent	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/check.rs	/^fn check_transparent(cx: &Ctxt, cont: &mut Container, derive: Derive) {$/;"	f
check_variant_skip_attrs	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/check.rs	/^fn check_variant_skip_attrs(cx: &Ctxt, cont: &Container) {$/;"	f
child_contains	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    fn child_contains<BK>(&self, index: usize, key: &BK) -> bool$/;"	P	implementation:Node
child_task_creation_test	/home/darrion/projects/ClearHeadToDo/src/lib.rs	/^        fn child_task_creation_test() -> Result<(), Box<dyn Error>> {$/;"	f	module:tests::task_list
children	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    children: Chunk<Option<PoolRef<Node<A>>>, Add1<NodeSize>>,$/;"	m	struct:Node
children	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    children: Entry<A>,$/;"	m	struct:Node
chunk	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/mod.rs	/^pub(crate) mod chunk {$/;"	n
chunk_at	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    pub fn chunk_at(&mut self, index: usize) -> (Range<usize>, &[A]) {$/;"	f
chunk_at	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    pub fn chunk_at(&mut self, index: usize) -> (Range<usize>, &mut [A]) {$/;"	f
cizer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^    cizer: Colorizer,$/;"	m	struct:Help
clap_app	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs	/^macro_rules! clap_app {$/;"	M
clear	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn clear(&mut self) {$/;"	P	implementation:HashMap
clear	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    pub fn clear(&mut self) {$/;"	P	implementation:HashSet
clear	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn clear(&mut self) {$/;"	P	implementation:OrdMap
clear	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    pub fn clear(&mut self) {$/;"	P	implementation:OrdSet
clear	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn clear(&mut self) {$/;"	P	implementation:Vector
clear_node	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    pub(crate) fn clear_node(&mut self) {$/;"	P	implementation:Node
cli	/home/darrion/projects/ClearHeadToDo/src/main.rs	/^mod cli;$/;"	n
cli_change_priority_successful_parse_test	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    fn cli_change_priority_successful_parse_test() {$/;"	f	module:tests
cli_change_priority_successful_run_test	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    fn cli_change_priority_successful_run_test() {$/;"	f	module:tests
cli_complete_task_alias_test	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    fn cli_complete_task_alias_test() {$/;"	f	module:tests
cli_complete_task_failing_already_complete_test	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    fn cli_complete_task_failing_already_complete_test() {$/;"	f	module:tests
cli_complete_task_failing_invalid_id_test	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    fn cli_complete_task_failing_invalid_id_test() {$/;"	f	module:tests
cli_complete_task_successful_parse_test	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    fn cli_complete_task_successful_parse_test() {$/;"	f	module:tests
cli_complete_task_successful_run_test	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    fn cli_complete_task_successful_run_test() {$/;"	f	module:tests
cli_create_task_alias_test	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    fn cli_create_task_alias_test() {$/;"	f	module:tests
cli_create_task_successful_parse_test	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    fn cli_create_task_successful_parse_test() {$/;"	f	module:tests
cli_create_task_successful_run_test	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    fn cli_create_task_successful_run_test() {$/;"	f	module:tests
cli_creation_about_test	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    fn cli_creation_about_test() {$/;"	f	module:tests
cli_creation_author_test	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    fn cli_creation_author_test() {$/;"	f	module:tests
cli_creation_name_test	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    fn cli_creation_name_test() {$/;"	f	module:tests
cli_creation_subcommand_or_help_test	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    fn cli_creation_subcommand_or_help_test() {$/;"	f	module:tests
cli_creation_version_test	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    fn cli_creation_version_test() {$/;"	f	module:tests
cli_list_task_alias_test	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    fn cli_list_task_alias_test() {$/;"	f	module:tests
cli_list_task_failure_empty_list_test	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    fn cli_list_task_failure_empty_list_test() {$/;"	f	module:tests
cli_list_task_successful_match_test	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    fn cli_list_task_successful_match_test() {$/;"	f	module:tests
cli_list_task_successful_run_test	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    fn cli_list_task_successful_run_test() {$/;"	f	module:tests
cli_remove_task_alias_test	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    fn cli_remove_task_alias_test() {$/;"	f	module:tests
cli_remove_task_successful_parse_test	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    fn cli_remove_task_successful_parse_test() {$/;"	f	module:tests
cli_remove_task_successful_run_test	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    fn cli_remove_task_successful_run_test() {$/;"	f	module:tests
cli_rename_task_alias_test	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    fn cli_rename_task_alias_test() {$/;"	f	module:tests
cli_rename_task_failing_invalid_id_test	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    fn cli_rename_task_failing_invalid_id_test() {$/;"	f	module:tests
cli_rename_task_successful_run_test	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    fn cli_rename_task_successful_run_test() {$/;"	f	module:tests
cli_reprioritize_failing_invalid_id_test	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    fn cli_reprioritize_failing_invalid_id_test() {$/;"	f	module:tests
cli_reprioritize_task_alias_test	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    fn cli_reprioritize_task_alias_test() {$/;"	f	module:tests
clone	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:App
clone	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/switched.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:Switched
clone	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/group.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:ArgGroup
clone	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:Arc
clone	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:Pool
clone	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:Rc
clone	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn clone(&self) -> Self {$/;"	f
clone	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    fn clone(&self) -> Self {$/;"	f
clone	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    fn clone(&self) -> Self {$/;"	f
clone	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:Entry
clone	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:Entry
clone	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:Node
clone	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:Size
clone	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:OrdMap
clone	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:OrdSet
clone	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/sync.rs	/^        fn clone(&self) -> Self {$/;"	P	implementation:lock::Lock
clone	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:TreeFocus
clone	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    fn clone(&self) -> Self {$/;"	f
clone	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:RRB
clone	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:Vector
clone	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/pool.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:RRBPool
clone	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:CowStrDeserializer
clone	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:StringDeserializer
clone	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    fn clone(&self) -> Self {$/;"	f
clone_from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^    pub(crate) fn clone_from(_pool: &Pool<A>, value: &A) -> Self$/;"	P	implementation:Arc
clone_from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^    pub(crate) fn clone_from(_pool: &Pool<A>, value: &A) -> Self$/;"	P	implementation:Rc
clone_ref	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/util.rs	/^pub(crate) fn clone_ref<A>(r: Ref<A>) -> A$/;"	f
clone_uninit	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    unsafe fn clone_uninit(&self, target: &mut mem::MaybeUninit<Self>) {$/;"	f
clone_uninit	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    unsafe fn clone_uninit(&self, target: &mut mem::MaybeUninit<Self>) {$/;"	f
cmp	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn cmp(&self, other: &Self) -> Ordering {$/;"	f
cmp	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    fn cmp(&self, other: &Self) -> Ordering {$/;"	f
cmp	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn cmp(&self, other: &Self) -> Ordering {$/;"	f
cmp	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    fn cmp(&self, other: &Self) -> Ordering {$/;"	P	implementation:OrdSet
cmp	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn cmp(&self, other: &Self) -> Ordering {$/;"	P	implementation:Vector
cmp_chunk	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^        fn cmp_chunk<A>(left: &PoolRef<Chunk<A>>, right: &PoolRef<Chunk<A>>) -> bool {$/;"	f	method:Vector::eq
cmp_chunk	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^        fn cmp_chunk<A>(left: &PoolRef<Chunk<A>>, right: &PoolRef<Chunk<A>>) -> bool {$/;"	f	method:Vector::ptr_eq
cmp_keys	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    fn cmp_keys<BK>(&self, other: &BK) -> Ordering$/;"	P	interface:BTreeValue
cmp_keys	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn cmp_keys<BK>(&self, other: &BK) -> Ordering$/;"	P	implementation:V
cmp_keys	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    fn cmp_keys<BK>(&self, other: &BK) -> Ordering$/;"	P	implementation:Value
cmp_values	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    fn cmp_values(&self, other: &Self) -> Ordering;$/;"	P	interface:BTreeValue
cmp_values	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn cmp_values(&self, other: &Self) -> Ordering {$/;"	P	implementation:V
cmp_values	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    fn cmp_values(&self, other: &Self) -> Ordering {$/;"	P	implementation:Value
code_fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/tests/mod.rs	/^fn code_fmt(code: &str) -> String {$/;"	f
collect_crash	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn collect_crash() {$/;"	f	module:test
collect_lifetimes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^fn collect_lifetimes(ty: &syn::Type, out: &mut BTreeSet<syn::Lifetime>) {$/;"	f
collect_map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn collect_map<K, V, I>(self, iter: I) -> Result<Self::Ok, Self::Error>$/;"	P	interface:Serializer
collect_seq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>$/;"	P	interface:Serializer
collect_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn collect_str<T: ?Sized>(self, _: &T) -> Result<Self::Ok, Self::Error>$/;"	f
collect_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/fmt.rs	/^    fn collect_str<T: ?Sized>(self, value: &T) -> fmt::Result$/;"	P	implementation:Formatter
collect_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn collect_str<T: ?Sized>(self, value: &T) -> Result<Self::Ok, Self::Error>$/;"	P	interface:Serializer
collision	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    collision: Option<(HashBits, SliceIter<'a, A>)>,$/;"	m	struct:Iter
collision	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    collision: Option<(HashBits, SliceIterMut<'a, A>)>,$/;"	m	struct:IterMut
collision	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    collision: Option<CollisionNode<A>>,$/;"	m	struct:Drain
color	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^    color: bool,$/;"	m	struct:Help
color	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^macro_rules! color {$/;"	M
color	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn color(&self) -> ColorWhen {$/;"	f
color	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/fmt.rs	/^macro_rules! color {$/;"	M
colored_output	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/fmt.rs	/^    fn colored_output() {$/;"	f	module:test
compact	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^pub mod compact;$/;"	n
complete_task	/home/darrion/projects/ClearHeadToDo/src/lib.rs	/^    pub fn complete_task(&self, index: usize) -> Result<TaskList, Box<dyn Error>> {$/;"	P	implementation:TaskList
completed	/home/darrion/projects/ClearHeadToDo/src/task.rs	/^    pub completed: bool,$/;"	m	struct:Task
completions	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/lib.rs	/^mod completions;$/;"	n
config	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/lib.rs	/^mod config;$/;"	n
conflicts	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/group.rs	/^    pub conflicts: Option<Vec<&'a str>>,$/;"	m	struct:ArgGroup
conflicts_with	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn conflicts_with(mut self, name: &'a str) -> Self {$/;"	P	implementation:Arg
conflicts_with	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/group.rs	/^    pub fn conflicts_with(mut self, n: &'a str) -> Self {$/;"	P	implementation:ArgGroup
conflicts_with_all	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn conflicts_with_all(mut self, names: &[&'a str]) -> Self {$/;"	P	implementation:Arg
conflicts_with_all	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/group.rs	/^    pub fn conflicts_with_all(mut self, ns: &[&'a str]) -> Self {$/;"	P	implementation:ArgGroup
constrain	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^pub fn constrain<T: ?Sized>(t: &T) -> &T {$/;"	f
contains	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matcher.rs	/^    pub fn contains(&self, arg: &str) -> bool {$/;"	P	implementation:ArgMatcher
contains	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    pub fn contains<BA>(&self, a: &BA) -> bool$/;"	f
contains	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    pub fn contains<BA>(&self, a: &BA) -> bool$/;"	f
contains	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^fn contains<A: Ord>(range: &Range<A>, index: &A) -> bool {$/;"	f
contains	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn contains(&self, value: &A) -> bool$/;"	P	implementation:Vector
contains_byte	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/osstringext.rs	/^    fn contains_byte(&self, b: u8) -> bool;$/;"	P	interface:OsStrExt2
contains_byte	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/osstringext.rs	/^    fn contains_byte(&self, byte: u8) -> bool {$/;"	P	implementation:OsStr
contains_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/map.rs	/^        pub fn contains_key(&self, key: usize) -> bool {$/;"	P	implementation:vec_map::VecMap
contains_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn contains_key<BK>(&self, k: &BK) -> bool$/;"	f
contains_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn contains_key<BK>(&self, k: &BK) -> bool$/;"	f
contains_long	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    fn contains_long(&self, l: &str) -> bool {$/;"	f
contains_short	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    fn contains_short(&self, s: char) -> bool {$/;"	f
content	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        content: &'a Content<'de>,$/;"	m	struct:content::ContentRefDeserializer
content	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        content: Content<'de>,$/;"	m	struct:content::ContentDeserializer
content	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        pub content: &'static str,$/;"	m	struct:content::TagContentOtherFieldVisitor
content	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        pub content: &'static str,$/;"	m	struct:content::TagOrContentFieldVisitor
content	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        pub content: Content<'de>,$/;"	m	struct:content::TaggedContent
content	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^mod content {$/;"	n
content	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^mod content {$/;"	n
copy_and_capture	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^fn copy_and_capture<R: Read, W: Write>($/;"	f
copy_until	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^fn copy_until<R: Read, W: Write>(r: &mut R, w: &mut W, delimiter_byte: u8) -> CopyUntilResult {$/;"	f
core	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/lib.rs	/^    mod core {$/;"	n	module:lib
count	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    count: usize,$/;"	m	struct:Drain
count	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    count: usize,$/;"	m	struct:Iter
count	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    count: usize,$/;"	m	struct:IterMut
count	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    count: usize,$/;"	m	struct:MapDeserializer
count	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    count: usize,$/;"	m	struct:SeqDeserializer
count	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v1.rs	/^    count: atomic::AtomicUsize,$/;"	m	struct:Context
counter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v1.rs	/^    counter: u16,$/;"	m	struct:Timestamp
crate_authors	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs	/^macro_rules! crate_authors {$/;"	M
crate_description	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs	/^macro_rules! crate_description {$/;"	M
crate_name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs	/^macro_rules! crate_name {$/;"	M
crate_version	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs	/^macro_rules! crate_version {$/;"	M
create_app	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^pub fn create_app() -> App<'static, 'static> {$/;"	f
create_default_task	/home/darrion/projects/ClearHeadToDo/src/task.rs	/^pub fn create_default_task() -> Task {$/;"	f
create_error_usage	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/usage.rs	/^pub fn create_error_usage<'a, 'b>($/;"	f
create_flag_usage	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_flag_usage() {$/;"	f	module:test
create_help_and_version	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn create_help_and_version(&mut self) {$/;"	f
create_help_usage	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/usage.rs	/^pub fn create_help_usage(p: &Parser, incl_reqs: bool) -> String {$/;"	f
create_nil_task	/home/darrion/projects/ClearHeadToDo/src/task.rs	/^    pub fn create_nil_task() -> Task {$/;"	f	module:test
create_option_usage0	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage0() {$/;"	f	module:test
create_option_usage1	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage1() {$/;"	f	module:test
create_option_usage2	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage2() {$/;"	f	module:test
create_option_usage3	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage3() {$/;"	f	module:test
create_option_usage4	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage4() {$/;"	f	module:test
create_option_usage5	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage5() {$/;"	f	module:test
create_option_usage6	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage6() {$/;"	f	module:test
create_option_usage7	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage7() {$/;"	f	module:test
create_option_usage8	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage8() {$/;"	f	module:test
create_option_usage9	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage9() {$/;"	f	module:test
create_option_usage_both1	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage_both1() {$/;"	f	module:test
create_option_usage_both2	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage_both2() {$/;"	f	module:test
create_option_usage_both3	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage_both3() {$/;"	f	module:test
create_option_usage_both4	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage_both4() {$/;"	f	module:test
create_option_usage_both5	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage_both5() {$/;"	f	module:test
create_option_usage_both6	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage_both6() {$/;"	f	module:test
create_option_usage_both7	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage_both7() {$/;"	f	module:test
create_option_usage_both8	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage_both8() {$/;"	f	module:test
create_option_usage_both_equals1	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage_both_equals1() {$/;"	f	module:test
create_option_usage_both_equals2	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage_both_equals2() {$/;"	f	module:test
create_option_usage_both_equals3	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage_both_equals3() {$/;"	f	module:test
create_option_usage_both_equals4	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage_both_equals4() {$/;"	f	module:test
create_option_usage_both_equals5	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage_both_equals5() {$/;"	f	module:test
create_option_usage_both_equals6	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage_both_equals6() {$/;"	f	module:test
create_option_usage_both_equals7	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage_both_equals7() {$/;"	f	module:test
create_option_usage_both_equals8	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage_both_equals8() {$/;"	f	module:test
create_option_usage_long1	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage_long1() {$/;"	f	module:test
create_option_usage_long10	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage_long10() {$/;"	f	module:test
create_option_usage_long2	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage_long2() {$/;"	f	module:test
create_option_usage_long3	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage_long3() {$/;"	f	module:test
create_option_usage_long4	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage_long4() {$/;"	f	module:test
create_option_usage_long5	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage_long5() {$/;"	f	module:test
create_option_usage_long6	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage_long6() {$/;"	f	module:test
create_option_usage_long7	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage_long7() {$/;"	f	module:test
create_option_usage_long8	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage_long8() {$/;"	f	module:test
create_option_usage_long9	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage_long9() {$/;"	f	module:test
create_option_usage_long_equals1	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage_long_equals1() {$/;"	f	module:test
create_option_usage_long_equals10	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage_long_equals10() {$/;"	f	module:test
create_option_usage_long_equals2	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage_long_equals2() {$/;"	f	module:test
create_option_usage_long_equals3	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage_long_equals3() {$/;"	f	module:test
create_option_usage_long_equals4	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage_long_equals4() {$/;"	f	module:test
create_option_usage_long_equals5	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage_long_equals5() {$/;"	f	module:test
create_option_usage_long_equals6	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage_long_equals6() {$/;"	f	module:test
create_option_usage_long_equals7	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage_long_equals7() {$/;"	f	module:test
create_option_usage_long_equals8	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage_long_equals8() {$/;"	f	module:test
create_option_usage_long_equals9	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_usage_long_equals9() {$/;"	f	module:test
create_option_with_vals1	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_with_vals1() {$/;"	f	module:test
create_option_with_vals2	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_with_vals2() {$/;"	f	module:test
create_option_with_vals3	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_with_vals3() {$/;"	f	module:test
create_option_with_vals4	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_with_vals4() {$/;"	f	module:test
create_option_with_vals5	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_option_with_vals5() {$/;"	f	module:test
create_positional_usage	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_positional_usage() {$/;"	f	module:test
create_positional_usage0	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn create_positional_usage0() {$/;"	f	module:test
create_smart_usage	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/usage.rs	/^fn create_smart_usage(p: &Parser, used: &[&str]) -> String {$/;"	f
create_task	/home/darrion/projects/ClearHeadToDo/src/lib.rs	/^    pub fn create_task(&self) -> Self {$/;"	P	implementation:TaskList
create_task_list	/home/darrion/projects/ClearHeadToDo/src/lib.rs	/^pub fn create_task_list() -> TaskList {$/;"	f
create_usage_no_title	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/usage.rs	/^pub fn create_usage_no_title(p: &Parser, used: &[&str]) -> String {$/;"	f
create_usage_with_title	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/usage.rs	/^pub fn create_usage_with_title(p: &Parser, used: &[&str]) -> String {$/;"	f
ctxt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/mod.rs	/^mod ctxt;$/;"	n
cur_idx	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    cur_idx: Cell<usize>,$/;"	m	struct:Parser
current	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    current: ChunkIter<'a, Entry<A>, HashWidth>,$/;"	m	struct:Iter
current	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    current: ChunkIterMut<'a, Entry<A>, HashWidth>,$/;"	m	struct:IterMut
current	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    current: PoolRef<Node<A>>,$/;"	m	struct:Drain
custom	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    fn custom<T>(msg: T) -> Self$/;"	P	implementation:Error
custom	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn custom<T>(_: T) -> Self$/;"	P	implementation:Error
custom	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/fmt.rs	/^    fn custom<T: Display>(_msg: T) -> Self {$/;"	P	implementation:Error
custom_serde_path	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn custom_serde_path(&self) -> Option<&syn::Path> {$/;"	P	implementation:Container
cx	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    cx: &'c Ctxt,$/;"	m	struct:Attr
cx	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    cx: &'c Ctxt,$/;"	m	struct:VecAttr
data	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    data: SparseChunk<Entry<A>, HashWidth>,$/;"	m	struct:Node
data	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    data: Vec<A>,$/;"	m	struct:CollisionNode
data	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ast.rs	/^    pub data: Data<'a>,$/;"	m	struct:Container
de	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/lib.rs	/^pub mod de;$/;"	n
de	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/mod.rs	/^pub mod de;$/;"	n
de	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/lib.rs	/^mod de;$/;"	n
de_bound	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    de_bound: Option<Vec<syn::WherePredicate>>,$/;"	m	struct:Container
de_bound	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    de_bound: Option<Vec<syn::WherePredicate>>,$/;"	m	struct:Field
de_bound	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    de_bound: Option<Vec<syn::WherePredicate>>,$/;"	m	struct:Variant
de_bound	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn de_bound(&self) -> Option<&[syn::WherePredicate]> {$/;"	P	implementation:Container
de_bound	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn de_bound(&self) -> Option<&[syn::WherePredicate]> {$/;"	P	implementation:Field
de_bound	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn de_bound(&self) -> Option<&[syn::WherePredicate]> {$/;"	P	implementation:Variant
de_error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/serde_support.rs	/^        fn de_error<E: de::Error>(e: crate::Error) -> E {$/;"	f	method:Uuid::deserialize
de_lifetime	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^    fn de_lifetime(&self) -> syn::Lifetime {$/;"	P	implementation:BorrowedLifetimes
de_lifetime_def	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^    fn de_lifetime_def(&self) -> Option<syn::LifetimeDef> {$/;"	P	implementation:BorrowedLifetimes
debug	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs	/^    macro_rules! debug {$/;"	M	module:debug_macros
debug_asserts	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    fn debug_asserts(&self, a: &Arg) -> bool {$/;"	f
debug_macros	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs	/^mod debug_macros {$/;"	n
debug_output	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn debug_output() {$/;"	f	module:test
debugln	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs	/^    macro_rules! debugln {$/;"	M	module:debug_macros
decide_identifier	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^fn decide_identifier($/;"	f
decide_tag	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^fn decide_tag($/;"	f
declare_error_trait	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^macro_rules! declare_error_trait {$/;"	M
declare_error_trait	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^macro_rules! declare_error_trait {$/;"	M
def_pool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/util.rs	/^macro_rules! def_pool {$/;"	M
default	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    fn default() -> Self {$/;"	P	implementation:AppFlags
default	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/switched.rs	/^    fn default() -> Self {$/;"	P	implementation:Switched
default	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/valued.rs	/^    fn default() -> Self {$/;"	P	implementation:Valued
default	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matcher.rs	/^    fn default() -> Self {$/;"	P	implementation:ArgMatcher
default	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    fn default() -> Self {$/;"	P	implementation:ArgMatches
default	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    fn default() -> Self {$/;"	P	implementation:Indices
default	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    fn default() -> Self {$/;"	P	implementation:OsValues
default	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    fn default() -> Self {$/;"	P	implementation:Values
default	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/matched_arg.rs	/^    fn default() -> Self {$/;"	P	implementation:MatchedArg
default	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/settings.rs	/^    fn default() -> Self {$/;"	P	implementation:ArgFlags
default	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/fmt.rs	/^    fn default() -> Self {$/;"	P	implementation:Colorizer
default	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^    pub(crate) fn default(_pool: &Pool<A>) -> Self$/;"	P	implementation:Arc
default	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^    pub(crate) fn default(_pool: &Pool<A>) -> Self$/;"	P	implementation:Rc
default	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn default() -> Self {$/;"	f
default	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    fn default() -> Self {$/;"	f
default	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    fn default() -> Self {$/;"	P	implementation:Node
default	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    fn default() -> Self {$/;"	P	implementation:Node
default	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    fn default() -> Self {$/;"	P	implementation:Node
default	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn default() -> Self {$/;"	P	implementation:OrdMap
default	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    fn default() -> Self {$/;"	P	implementation:OrdSet
default	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/test.rs	/^    fn default() -> Self {$/;"	P	implementation:LolHasher
default	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn default() -> Self {$/;"	P	implementation:Vector
default	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/pool.rs	/^    fn default() -> Self {$/;"	P	implementation:RRBPool
default	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    default: Default,$/;"	m	struct:Container
default	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    default: Default,$/;"	m	struct:Field
default	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn default(&self) -> &Default {$/;"	P	implementation:Container
default	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn default(&self) -> &Default {$/;"	P	implementation:Field
default	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    fn default() -> Self {$/;"	P	implementation:Uuid
default	/home/darrion/projects/ClearHeadToDo/src/task.rs	/^    fn default() -> Self {$/;"	P	implementation:PriEnum
default	/home/darrion/projects/ClearHeadToDo/src/task.rs	/^    fn default() -> Task {$/;"	P	implementation:Task
default_creation_test	/home/darrion/projects/ClearHeadToDo/src/task.rs	/^    fn default_creation_test() {$/;"	f	module:test
default_uninit	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    unsafe fn default_uninit(target: &mut mem::MaybeUninit<Self>) {$/;"	P	implementation:Node
default_uninit	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    unsafe fn default_uninit(target: &mut mem::MaybeUninit<Self>) {$/;"	P	implementation:Node
default_val	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    fn default_val(&self) -> Option<&'e OsStr> {$/;"	P	implementation:App
default_val	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn default_val(&self) -> Option<&'e OsStr> {$/;"	f
default_val	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn default_val(&self) -> Option<&'e OsStr>;$/;"	P	interface:AnyArg
default_val	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^    fn default_val(&self) -> Option<&'e OsStr> {$/;"	P	implementation:FlagBuilder
default_val	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    fn default_val(&self) -> Option<&'e OsStr> {$/;"	P	implementation:OptBuilder
default_val	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    fn default_val(&self) -> Option<&'e OsStr> {$/;"	P	implementation:PosBuilder
default_val	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/valued.rs	/^    pub default_val: Option<&'b OsStr>,$/;"	m	struct:Valued
default_vals_ifs	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    fn default_vals_ifs(&self) -> Option<map::Values<(&'n str, Option<&'e OsStr>, &'e OsStr)>> {$/;"	P	implementation:App
default_vals_ifs	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn default_vals_ifs(&self) -> Option<map::Values<(&'n str, Option<&'e OsStr>, &'e OsStr)>> {$/;"	f
default_vals_ifs	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn default_vals_ifs(&self) -> Option<map::Values<(&'n str, Option<&'e OsStr>, &'e OsStr)>>;$/;"	P	interface:AnyArg
default_vals_ifs	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^    fn default_vals_ifs(&self) -> Option<map::Values<(&'n str, Option<&'e OsStr>, &'e OsStr)>> {$/;"	P	implementation:FlagBuilder
default_vals_ifs	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    fn default_vals_ifs(&self) -> Option<map::Values<(&'n str, Option<&'e OsStr>, &'e OsStr)>> {$/;"	P	implementation:OptBuilder
default_vals_ifs	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    fn default_vals_ifs(&self) -> Option<map::Values<(&'n str, Option<&'e OsStr>, &'e OsStr)>> {$/;"	P	implementation:PosBuilder
default_vals_ifs	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/valued.rs	/^    pub default_vals_ifs: Option<VecMap<(&'a str, Option<&'b OsStr>, &'b OsStr)>>,$/;"	m	struct:Valued
default_value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn default_value(self, val: &'a str) -> Self {$/;"	P	implementation:Arg
default_value_if	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn default_value_if(self, arg: &'a str, val: Option<&'b str>, default: &'b str) -> Self /;"	P	implementation:Arg
default_value_if_os	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn default_value_if_os($/;"	P	implementation:Arg
default_value_ifs	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn default_value_ifs(mut self, ifs: &[(&'a str, Option<&'b str>, &'b str)]) -> Self {$/;"	P	implementation:Arg
default_value_ifs_os	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn default_value_ifs_os(mut self, ifs: &[(&'a str, Option<&'b OsStr>, &'b OsStr)]) -> Se/;"	P	implementation:Arg
default_value_os	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn default_value_os(mut self, val: &'a OsStr) -> Self {$/;"	P	implementation:Arg
delegate	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    delegate: S,$/;"	m	struct:TaggedSerializer
deletes_correctly	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn deletes_correctly() {$/;"	f	module:test
deny_unknown_fields	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    deny_unknown_fields: bool,$/;"	m	struct:Container
deny_unknown_fields	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn deny_unknown_fields(&self) -> bool {$/;"	P	implementation:Container
deref	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^    fn deref(&self) -> &Self::Target {$/;"	P	implementation:Arc
deref	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^    fn deref(&self) -> &Self::Target {$/;"	P	implementation:Rc
deref	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    fn deref(&self) -> &Self::Target {$/;"	P	implementation:Value
deref	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    fn deref(&self) -> &Self::Target {$/;"	P	implementation:Value
deref_impl	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^macro_rules! deref_impl {$/;"	M
derive	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/lib.rs	/^mod derive {$/;"	n
derive_deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/lib.rs	/^pub fn derive_deserialize(input: TokenStream) -> TokenStream {$/;"	f
derive_display_order	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn derive_display_order(&mut self) {$/;"	f
derive_serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/lib.rs	/^pub fn derive_serialize(input: TokenStream) -> TokenStream {$/;"	f
description	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:Error
description	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:Error
description	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:Error
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ser.rs	/^    fn deserialize<D>(des: D) -> Result<Self, D::Error>$/;"	P	implementation:HashSet
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ser.rs	/^    fn deserialize<D>(des: D) -> Result<Self, D::Error>$/;"	P	implementation:OrdMap
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ser.rs	/^    fn deserialize<D>(des: D) -> Result<Self, D::Error>$/;"	P	implementation:OrdSet
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ser.rs	/^    fn deserialize<D>(des: D) -> Result<Self, D::Error>$/;"	P	implementation:Vector
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ser.rs	/^    fn deserialize<D>(des: D) -> Result<Self, D::Error>$/;"	f
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/ignored_any.rs	/^    fn deserialize<D>(deserializer: D) -> Result<IgnoredAny, D::Error>$/;"	P	implementation:IgnoredAny
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:Duration::deserialize::Field
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:SystemTime::deserialize::Field
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:deserialize::Field
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:range::Field
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn deserialize<D>(_deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:Deserialize
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:CString
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:Deserialize
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:Duration
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:IpAddr
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:OsString
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:Path
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:PathBuf
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:PhantomData
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:SocketAddr
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:String
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:SystemTime
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:T
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:bool
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:char
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:str
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:u8
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	f
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	interface:Deserialize
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	interface:DeserializeSeed
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>$/;"	f
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^        fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	f	module:private
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:content::Content
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:content::TagContentOtherFieldVisitor
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:content::TagOrContentFieldVisitor
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:content::TagOrContentVisitor
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	f	module:content
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	f
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    deserialize: RenameRule,$/;"	m	struct:RenameAllRules
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    deserialize: String,$/;"	m	struct:Name
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/compact.rs	/^pub fn deserialize<'de, D>(deserializer: D) -> Result<crate::Uuid, D::Error>$/;"	f
deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/serde_support.rs	/^    fn deserialize<D: Deserializer<'de>>($/;"	P	implementation:Uuid
deserialize_adjacently_tagged_enum	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn deserialize_adjacently_tagged_enum($/;"	f
deserialize_aliases	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    deserialize_aliases: Vec<String>,$/;"	m	struct:Name
deserialize_aliases	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    fn deserialize_aliases(&self) -> Vec<String> {$/;"	P	implementation:Name
deserialize_any	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_any	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    fn deserialize_any<V>(mut self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_any	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    fn deserialize_any<V>(self, _visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_any	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_any	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize_any<V>(mut self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_any	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize_any<V>(self, _visitor: V) -> Result<V::Value, E>$/;"	f	function:missing_field
deserialize_any	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, E>$/;"	f	module:content
deserialize_any	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_any	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_body	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn deserialize_body(cont: &Container, params: &Parameters) -> Fragment {$/;"	f
deserialize_bool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn deserialize_bool<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_bool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize_bool<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_byte_buf	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn deserialize_byte_buf<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_byte_buf	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize_byte_buf<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_char	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn deserialize_char<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_char	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize_char<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_custom_identifier	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn deserialize_custom_identifier($/;"	f
deserialize_enum	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^macro_rules! deserialize_enum {$/;"	M
deserialize_enum	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn deserialize_enum<V>($/;"	P	interface:Deserializer
deserialize_enum	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    fn deserialize_enum<V>($/;"	f
deserialize_enum	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize_enum<V>($/;"	f	module:content
deserialize_enum	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    fn deserialize_enum<V>($/;"	f
deserialize_enum	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn deserialize_enum($/;"	f
deserialize_externally_tagged_enum	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn deserialize_externally_tagged_enum($/;"	f
deserialize_externally_tagged_newtype_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn deserialize_externally_tagged_newtype_variant($/;"	f
deserialize_externally_tagged_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn deserialize_externally_tagged_variant($/;"	f
deserialize_f32	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn deserialize_f32<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_f32	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize_f32<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_f64	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn deserialize_f64<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_f64	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize_f64<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn deserialize_from(type_from: &syn::Type) -> Fragment {$/;"	f
deserialize_generated_identifier	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn deserialize_generated_identifier($/;"	f
deserialize_i16	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn deserialize_i16<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_i16	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize_i16<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_i32	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn deserialize_i32<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_i32	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize_i32<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_i64	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn deserialize_i64<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_i64	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize_i64<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_i8	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn deserialize_i8<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_i8	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize_i8<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_identifier	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn deserialize_identifier<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_identifier	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize_identifier<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_identifier	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn deserialize_identifier($/;"	f
deserialize_ignored_any	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn deserialize_ignored_any<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_ignored_any	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize_ignored_any<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_in_place	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn deserialize_in_place<D>(deserializer: D, place: &mut Self) -> Result<(), D::Error>$/;"	P	implementation:String
deserialize_in_place	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn deserialize_in_place<D>(deserializer: D, place: &mut Self) -> Result<(), D::Error>$/;"	f
deserialize_in_place	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn deserialize_in_place<D>(deserializer: D, place: &mut Self) -> Result<(), D::Error>$/;"	P	interface:Deserialize
deserialize_in_place_body	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn deserialize_in_place_body(_cont: &Container, _params: &Parameters) -> Option<Stmts> {$/;"	f
deserialize_in_place_body	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn deserialize_in_place_body(cont: &Container, params: &Parameters) -> Option<Stmts> {$/;"	f
deserialize_integer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize_integer<V>(self, visitor: V) -> Result<V::Value, E>$/;"	f	module:content
deserialize_internally_tagged_enum	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn deserialize_internally_tagged_enum($/;"	f
deserialize_internally_tagged_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn deserialize_internally_tagged_variant($/;"	f
deserialize_map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn deserialize_map<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize_map<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    fn deserialize_map<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn deserialize_map($/;"	f
deserialize_map_in_place	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn deserialize_map_in_place($/;"	f
deserialize_name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn deserialize_name(&self) -> String {$/;"	P	implementation:Name
deserialize_newtype_struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn deserialize_newtype_struct<V>($/;"	P	interface:Deserializer
deserialize_newtype_struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize_newtype_struct<V>($/;"	f	module:content
deserialize_newtype_struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize_newtype_struct<V>(self, _name: &str, visitor: V) -> Result<V::Value, E>$/;"	f	module:content
deserialize_newtype_struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    fn deserialize_newtype_struct<V>(self, _name: &str, visitor: V) -> Result<V::Value, Self::Er/;"	f
deserialize_newtype_struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn deserialize_newtype_struct($/;"	f
deserialize_newtype_struct_in_place	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn deserialize_newtype_struct_in_place(params: &Parameters, field: &Field) -> TokenStream {$/;"	f
deserialize_option	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn deserialize_option<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_option	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    fn deserialize_option<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_option	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize_option<V>(self, visitor: V) -> Result<V::Value, E>$/;"	f	function:missing_field
deserialize_option	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize_option<V>(self, visitor: V) -> Result<V::Value, E>$/;"	f	module:content
deserialize_option	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize_option<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_option	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    fn deserialize_option<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_other	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    fn deserialize_other<V>() -> Result<V, E> {$/;"	f
deserialize_renamed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    deserialize_renamed: bool,$/;"	m	struct:Name
deserialize_seq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_seq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    fn deserialize_seq<V>(mut self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_seq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_seq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_seq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn deserialize_seq($/;"	f
deserialize_seq_in_place	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn deserialize_seq_in_place($/;"	f
deserialize_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn deserialize_str<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize_str<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_string	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn deserialize_string<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_string	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize_string<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn deserialize_struct<V>($/;"	P	interface:Deserializer
deserialize_struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize_struct<V>($/;"	f	module:content
deserialize_struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    fn deserialize_struct<V>($/;"	f
deserialize_struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn deserialize_struct($/;"	f
deserialize_struct_as_map_visitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn deserialize_struct_as_map_visitor($/;"	f
deserialize_struct_as_struct_in_place_visitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn deserialize_struct_as_struct_in_place_visitor($/;"	f
deserialize_struct_as_struct_visitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn deserialize_struct_as_struct_visitor($/;"	f
deserialize_struct_in_place	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn deserialize_struct_in_place($/;"	f
deserialize_transparent	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn deserialize_transparent(cont: &Container, params: &Parameters) -> Fragment {$/;"	f
deserialize_try_from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn deserialize_try_from(type_try_from: &syn::Type) -> Fragment {$/;"	f
deserialize_tuple	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn deserialize_tuple<V>(self, len: usize, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_tuple	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    fn deserialize_tuple<V>(self, len: usize, visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_tuple	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize_tuple<V>(self, _len: usize, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_tuple	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn deserialize_tuple($/;"	f
deserialize_tuple_in_place	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn deserialize_tuple_in_place($/;"	f
deserialize_tuple_struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn deserialize_tuple_struct<V>($/;"	P	interface:Deserializer
deserialize_tuple_struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize_tuple_struct<V>($/;"	f	module:content
deserialize_u16	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn deserialize_u16<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_u16	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize_u16<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_u32	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn deserialize_u32<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_u32	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize_u32<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_u64	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn deserialize_u64<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_u64	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize_u64<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_u8	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn deserialize_u8<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_u8	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize_u8<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_unit	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn deserialize_unit<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:Deserializer
deserialize_unit	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize_unit<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
deserialize_unit	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    fn deserialize_unit<V>(self, visitor: V) -> Result<V::Value, Self::Error>$/;"	f
deserialize_unit_struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn deserialize_unit_struct<V>($/;"	P	interface:Deserializer
deserialize_unit_struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn deserialize_unit_struct<V>($/;"	f	module:content
deserialize_unit_struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn deserialize_unit_struct(params: &Parameters, cattrs: &attr::Container) -> Fragment {$/;"	f
deserialize_untagged_enum	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn deserialize_untagged_enum($/;"	f
deserialize_untagged_newtype_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn deserialize_untagged_newtype_variant($/;"	f
deserialize_untagged_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn deserialize_untagged_variant($/;"	f
deserialize_with	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    deserialize_with: Option<syn::ExprPath>,$/;"	m	struct:Field
deserialize_with	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    deserialize_with: Option<syn::ExprPath>,$/;"	m	struct:Variant
deserialize_with	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn deserialize_with(&self) -> Option<&syn::ExprPath> {$/;"	P	implementation:Field
deserialize_with	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn deserialize_with(&self) -> Option<&syn::ExprPath> {$/;"	P	implementation:Variant
did_you_mean	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/suggestions.rs	/^pub fn did_you_mean<'a, T: ?Sized, I>(_: &str, _: I) -> Option<&'a str>$/;"	f
did_you_mean	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/suggestions.rs	/^pub fn did_you_mean<'a, T: ?Sized, I>(v: &str, possible_values: I) -> Option<&'a str>$/;"	f
did_you_mean_error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    fn did_you_mean_error($/;"	f
did_you_mean_flag_suffix	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/suggestions.rs	/^pub fn did_you_mean_flag_suffix<'z, T, I>($/;"	f
did_you_mean_value_suffix	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/suggestions.rs	/^pub fn did_you_mean_value_suffix<'z, T, I>(arg: &str, values: I) -> (String, Option<&'z str>)$/;"	f
diff	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn diff<'a>(&'a self, other: &'a Self) -> DiffIter<'a, K, V> {$/;"	f
diff	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    pub fn diff<'a>(&'a self, other: &'a Self) -> DiffIter<'_, A> {$/;"	f
difference	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn difference(self, other: Self) -> Self {$/;"	f
difference	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    pub fn difference(self, other: Self) -> Self {$/;"	f
difference	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn difference(self, other: Self) -> Self {$/;"	f
difference	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    pub fn difference(self, other: Self) -> Self {$/;"	f
difference_with	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn difference_with<F>(self, other: Self, f: F) -> Self$/;"	f
difference_with	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn difference_with<F>(self, other: Self, f: F) -> Self$/;"	f
difference_with_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn difference_with_key<F>(self, other: Self, f: F) -> Self$/;"	f
difference_with_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn difference_with_key<F>(self, other: Self, f: F) -> Self$/;"	f
dimensions	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^    pub fn dimensions() -> Option<(usize, usize)> {$/;"	f	module:term_size
disp_ord	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^    fn disp_ord(&self) -> usize {$/;"	P	implementation:App
disp_ord	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/meta.rs	/^    pub disp_ord: usize,$/;"	m	struct:AppMeta
disp_ord	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn disp_ord(&self) -> usize;$/;"	P	interface:DispOrder
disp_ord	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^    fn disp_ord(&self) -> usize {$/;"	P	implementation:FlagBuilder
disp_ord	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    fn disp_ord(&self) -> usize {$/;"	P	implementation:OptBuilder
disp_ord	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    fn disp_ord(&self) -> usize {$/;"	P	implementation:PosBuilder
disp_ord	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/switched.rs	/^    pub disp_ord: usize,$/;"	m	struct:Switched
display_mult	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    fn display_mult() {$/;"	f	module:test
display_order	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn display_order(mut self, ord: usize) -> Self {$/;"	P	implementation:App
display_order	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn display_order(mut self, ord: usize) -> Self {$/;"	P	implementation:Arg
display_required	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    fn display_required() {$/;"	f	module:test
display_val_names	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    fn display_val_names() {$/;"	f	module:test
display_val_names_req	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    fn display_val_names_req() {$/;"	f	module:test
do_quicksort	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/sort.rs	/^fn do_quicksort<A, F, R>(vector: FocusMut<'_, A>, cmp: &F, rng: &mut R)$/;"	f
double_ended_iterator_1	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn double_ended_iterator_1() {$/;"	f	module:test
double_ended_iterator_2	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn double_ended_iterator_2() {$/;"	f	module:test
drive	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/rayon.rs	/^    fn drive<C>(self, consumer: C) -> C::Result$/;"	f
drive_unindexed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/rayon.rs	/^    fn drive_unindexed<C>(self, consumer: C) -> C::Result$/;"	f
drop	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ctxt.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Ctxt
dummy	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/lib.rs	/^mod dummy;$/;"	n
effective_style	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn effective_style(variant: &Variant) -> Style {$/;"	f
effective_style	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^fn effective_style(variant: &Variant) -> Style {$/;"	f
elements	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        elements: Vec<Content>,$/;"	m	struct:content::SerializeSeq
elements	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        elements: Vec<Content>,$/;"	m	struct:content::SerializeTuple
elevate	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    pub(crate) fn elevate(self, pool: &RRBPool<A>, level_increment: usize) -> Self {$/;"	P	implementation:Node
elvish	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/mod.rs	/^mod elvish;$/;"	n
empty	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/arbitrary.rs	/^fn empty<T: 'static>() -> Box<dyn Iterator<Item = T>> {$/;"	f
empty_value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    pub fn empty_value<U>(arg: &AnyArg, usage: U, color: ColorWhen) -> Self$/;"	P	implementation:Error
empty_values	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn empty_values(mut self, ev: bool) -> Self {$/;"	P	implementation:Arg
encode	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/utf8.rs	/^pub fn encode(c: char) -> Encode {$/;"	f
encode	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^fn encode<'a>($/;"	f
encode_buffer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    pub const fn encode_buffer() -> [u8; adapter::Urn::LENGTH] {$/;"	P	implementation:Uuid
encode_lower	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^    pub fn encode_lower<'buf>(&self, buffer: &'buf mut [u8]) -> &'buf mut str {$/;"	P	implementation:Hyphenated
encode_lower	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^    pub fn encode_lower<'buf>(&self, buffer: &'buf mut [u8]) -> &'buf mut str {$/;"	P	implementation:HyphenatedRef
encode_lower	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^    pub fn encode_lower<'buf>(&self, buffer: &'buf mut [u8]) -> &'buf mut str {$/;"	P	implementation:Simple
encode_lower	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^    pub fn encode_lower<'buf>(&self, buffer: &'buf mut [u8]) -> &'buf mut str {$/;"	P	implementation:SimpleRef
encode_lower	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^    pub fn encode_lower<'buf>(&self, buffer: &'buf mut [u8]) -> &'buf mut str {$/;"	P	implementation:Urn
encode_lower	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^    pub fn encode_lower<'buf>(&self, buffer: &'buf mut [u8]) -> &'buf mut str {$/;"	P	implementation:UrnRef
encode_upper	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^    pub fn encode_upper<'buf>(&self, buffer: &'buf mut [u8]) -> &'buf mut str {$/;"	P	implementation:Hyphenated
encode_upper	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^    pub fn encode_upper<'buf>(&self, buffer: &'buf mut [u8]) -> &'buf mut str {$/;"	P	implementation:HyphenatedRef
encode_upper	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^    pub fn encode_upper<'buf>(&self, buffer: &'buf mut [u8]) -> &'buf mut str {$/;"	P	implementation:Simple
encode_upper	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^    pub fn encode_upper<'buf>(&self, buffer: &'buf mut [u8]) -> &'buf mut str {$/;"	P	implementation:SimpleRef
encode_upper	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^    pub fn encode_upper<'buf>(&self, buffer: &'buf mut [u8]) -> &'buf mut str {$/;"	P	implementation:Urn
encode_upper	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^    pub fn encode_upper<'buf>(&self, buffer: &'buf mut [u8]) -> &'buf mut str {$/;"	P	implementation:UrnRef
end	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    pub fn end(self) -> Result<(), E> {$/;"	f
end	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fn end(mut self) -> Result<M::Ok, M::Error> {$/;"	f	module:content
end	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fn end(self) -> Result<Content, E> {$/;"	f	module:content
end	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn end(self) -> Result<(), Self::Error> {$/;"	f
end	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impossible.rs	/^    fn end(self) -> Result<Ok, Error> {$/;"	f
end	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn end(self) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:SerializeMap
end	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn end(self) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:SerializeSeq
end	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn end(self) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:SerializeStruct
end	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn end(self) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:SerializeStructVariant
end	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn end(self) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:SerializeTuple
end	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn end(self) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:SerializeTupleStruct
end	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn end(self) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:SerializeTupleVariant
entries	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        entries: Vec<(Content, Content)>,$/;"	m	struct:content::SerializeMap
entry	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matcher.rs	/^    pub fn entry(&mut self, arg: &'a str) -> Entry<&'a str, MatchedArg> {$/;"	P	implementation:ArgMatcher
entry	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/map.rs	/^        pub fn entry(&mut self, key: usize) -> Entry<V> {$/;"	P	implementation:vec_map::VecMap
entry	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S> {$/;"	f
entry	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn entry(&mut self, key: K) -> Entry<'_, K, V> {$/;"	f
entry_api	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn entry_api() {$/;"	f	module:test
entry_api	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn entry_api() {$/;"	f	module:test
enum_from_ast	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ast.rs	/^fn enum_from_ast<'a>($/;"	f
env	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    fn env<'s>(&'s self) -> Option<(&'n OsStr, Option<&'s OsString>)> {$/;"	P	implementation:App
env	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn env<'s>(&'s self) -> Option<(&'n OsStr, Option<&'s OsString>)> {$/;"	f
env	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn env<'s>(&'s self) -> Option<(&'n OsStr, Option<&'s OsString>)>;$/;"	P	interface:AnyArg
env	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn env(self, name: &'a str) -> Self {$/;"	P	implementation:Arg
env	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^    fn env<'s>(&'s self) -> Option<(&'n OsStr, Option<&'s OsString>)> {$/;"	P	implementation:FlagBuilder
env	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    fn env<'s>(&'s self) -> Option<(&'n OsStr, Option<&'s OsString>)> {$/;"	P	implementation:OptBuilder
env	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    fn env<'s>(&'s self) -> Option<(&'n OsStr, Option<&'s OsString>)> {$/;"	P	implementation:PosBuilder
env	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/valued.rs	/^    pub env: Option<(&'a OsStr, Option<OsString>)>,$/;"	m	struct:Valued
env_os	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn env_os(mut self, name: &'a OsStr) -> Self {$/;"	P	implementation:Arg
eq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    fn eq(&self, other: &Arg<'n, 'e>) -> bool {$/;"	P	implementation:Arg
eq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/base.rs	/^    fn eq(&self, other: &Base<'n, 'e>) -> bool {$/;"	P	implementation:Base
eq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^    fn eq(&self, other: &FlagBuilder<'n, 'e>) -> bool {$/;"	P	implementation:FlagBuilder
eq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    fn eq(&self, other: &OptBuilder<'n, 'e>) -> bool {$/;"	P	implementation:OptBuilder
eq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    fn eq(&self, other: &PosBuilder<'n, 'e>) -> bool {$/;"	P	implementation:PosBuilder
eq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^    fn eq(&self, other: &Self) -> bool {$/;"	f
eq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    default fn eq(&self, other: &Self) -> bool {$/;"	f
eq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn eq(&self, other: &Self) -> bool {$/;"	f
eq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    fn eq(&self, other: &Self) -> bool {$/;"	f
eq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    default fn eq(&self, other: &Self) -> bool {$/;"	f
eq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn eq(&self, other: &Self) -> bool {$/;"	f
eq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    fn eq(&self, other: &Self) -> bool {$/;"	P	implementation:OrdSet
eq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    default fn eq(&self, other: &Self) -> bool {$/;"	P	implementation:Vector
eq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn eq(&self, other: &Self) -> bool {$/;"	P	implementation:Vector
eq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/symbol.rs	/^    fn eq(&self, word: &Symbol) -> bool {$/;"	P	implementation:Ident
eq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/symbol.rs	/^    fn eq(&self, word: &Symbol) -> bool {$/;"	P	implementation:Path
equality2	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn equality2() {$/;"	f	module:test
err	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    err: ErrorImpl,$/;"	m	struct:Error
err	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        err: PhantomData<E>,$/;"	m	struct:content::ContentDeserializer
err	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        err: PhantomData<E>,$/;"	m	struct:content::ContentRefDeserializer
err	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        err: PhantomData<E>,$/;"	m	struct:content::EnumDeserializer
err	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        err: PhantomData<E>,$/;"	m	struct:content::EnumRefDeserializer
err	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        err: PhantomData<E>,$/;"	m	struct:content::MapDeserializer
err	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        err: PhantomData<E>,$/;"	m	struct:content::MapRefDeserializer
err	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        err: PhantomData<E>,$/;"	m	struct:content::SeqDeserializer
err	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        err: PhantomData<E>,$/;"	m	struct:content::SeqRefDeserializer
err	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        err: PhantomData<E>,$/;"	m	struct:content::VariantDeserializer
err	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        err: PhantomData<E>,$/;"	m	struct:content::VariantRefDeserializer
error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/fmt.rs	/^    pub fn error<T>(&self, msg: T) -> Format<T>$/;"	P	implementation:Colorizer
error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    error: PhantomData<E>,$/;"	m	struct:MapDeserializer
error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        error: PhantomData<E>,$/;"	m	struct:content::ContentSerializer
error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        error: PhantomData<E>,$/;"	m	struct:content::SerializeMap
error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        error: PhantomData<E>,$/;"	m	struct:content::SerializeSeq
error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        error: PhantomData<E>,$/;"	m	struct:content::SerializeStruct
error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        error: PhantomData<E>,$/;"	m	struct:content::SerializeStructVariant
error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        error: PhantomData<E>,$/;"	m	struct:content::SerializeTuple
error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        error: PhantomData<E>,$/;"	m	struct:content::SerializeTupleStruct
error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        error: PhantomData<E>,$/;"	m	struct:content::SerializeTupleVariant
error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impossible.rs	/^    error: PhantomData<Error>,$/;"	m	struct:Impossible
error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/mod.rs	/^mod error;$/;"	n
error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^mod error;$/;"	n
error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/parser/mod.rs	/^pub(crate) mod error;$/;"	n
error_spanned_by	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ctxt.rs	/^    pub fn error_spanned_by<A: ToTokens, T: Display>(&self, obj: A, msg: T) {$/;"	P	implementation:Ctxt
errors	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/lib.rs	/^mod errors;$/;"	n
errors	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ctxt.rs	/^    errors: RefCell<Option<Vec<syn::Error>>>,$/;"	m	struct:Ctxt
escape_string	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/elvish.rs	/^fn escape_string(string: &str) -> String {$/;"	f
escape_string	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/fish.rs	/^fn escape_string(string: &str) -> String {$/;"	f
escape_string	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/powershell.rs	/^fn escape_string(string: &str) -> String {$/;"	f
exit	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    pub fn exit(&self) -> ! {$/;"	P	implementation:Error
expand_derive_deserialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^pub fn expand_derive_deserialize(input: &syn::DeriveInput) -> Result<TokenStream, Vec<syn::Error/;"	f
expand_derive_serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^pub fn expand_derive_serialize(input: &syn::DeriveInput) -> Result<TokenStream, Vec<syn::Error>>/;"	f
expect_parser	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/error.rs	/^        pub(crate) fn expect_parser(self) -> parser::Error {$/;"	P	implementation:test_util::Error
expected	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/error.rs	/^    const fn expected(&self) -> usize {$/;"	P	implementation:Error
expected	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/error.rs	/^    expected: usize,$/;"	m	struct:Error
expecting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ser.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	f
expecting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/ignored_any.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:IgnoredAny
expecting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Duration::deserialize::Field::deserialize::FieldVisitor
expecting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:SystemTime::deserialize::Field::deserialize::FieldVisitor
expecting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:deserialize::Field::deserialize::FieldVisitor
expecting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^                fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:IpAddr::deserialize::IpAddrVisitor
expecting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^                fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:SocketAddr::deserialize::SocketAddrVisitor
expecting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^                fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:range::Field::deserialize::FieldVisitor
expecting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Duration::deserialize::DurationVisitor
expecting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:SystemTime::deserialize::DurationVisitor
expecting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	f	function:deserialize
expecting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	f	function:deserialize_in_place
expecting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	f	module:range
expecting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^        pub expecting: &'static str,$/;"	m	struct:range::RangeVisitor
expecting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:ArrayVisitor
expecting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:BoolVisitor
expecting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:BytesVisitor
expecting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:CStringVisitor
expecting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:CharVisitor
expecting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:OsStringVisitor
expecting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:PathBufVisitor
expecting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:PathVisitor
expecting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:PhantomDataVisitor
expecting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:StrVisitor
expecting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:StringInPlaceVisitor
expecting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:StringVisitor
expecting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:UnitVisitor
expecting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	f
expecting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result;$/;"	P	interface:Visitor
expecting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn expecting(&self, fmt: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:content::ContentVisitor
expecting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn expecting(&self, fmt: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:content::TagOrContentVisitor
expecting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn expecting(&self, fmt: &mut fmt::Formatter) -> fmt::Result {$/;"	f	module:content
expecting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:borrow_cow_bytes::CowBytesVisitor
expecting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:borrow_cow_str::CowStrVisitor
expecting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:content::InternallyTaggedUnitVisitor
expecting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:content::TagContentOtherFieldVisitor
expecting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:content::TagOrContentFieldVisitor
expecting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:content::UntaggedUnitVisitor
expecting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/serde_support.rs	/^                fn expecting($/;"	P	implementation:Uuid::deserialize::UuidBytesVisitor
expecting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/serde_support.rs	/^                fn expecting($/;"	P	implementation:Uuid::deserialize::UuidStringVisitor
explicit_name_set	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    explicit_name_set: bool,$/;"	m	struct:UsageParser
export	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/lib.rs	/^pub mod export;$/;"	n
expr_is_missing	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn expr_is_missing(field: &Field, cattrs: &attr::Container) -> Fragment {$/;"	f
extend	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn extend<I>(&mut self, iter: I)$/;"	f
extend	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    fn extend<I>(&mut self, iter: I)$/;"	f
extend	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn extend<I>(&mut self, iter: I)$/;"	f
extend	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    fn extend<I>(&mut self, iter: I)$/;"	f
extend	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn extend<I>(&mut self, iter: I)$/;"	P	implementation:Vector
extract	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn extract<BK>(&self, k: &BK) -> Option<(V, Self)>$/;"	f
extract	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn extract<BK>(&self, k: &BK) -> Option<(V, Self)>$/;"	f
extract_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn extract_key(&self) -> &Self::Key {$/;"	f
extract_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    fn extract_key(&self) -> &Self::Key {$/;"	f
extract_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    fn extract_key(&self) -> &Self::Key;$/;"	P	interface:HashValue
extract_with_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn extract_with_key<BK>(&self, k: &BK) -> Option<(K, V, Self)>$/;"	f
extract_with_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn extract_with_key<BK>(&self, k: &BK) -> Option<(K, V, Self)>$/;"	f
failing_cli_remove_task_invalid_index_test	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    fn failing_cli_remove_task_invalid_index_test() {$/;"	f	module:tests
failing_completion_test	/home/darrion/projects/ClearHeadToDo/src/task.rs	/^    fn failing_completion_test() -> Result<(), Box<dyn Error>> {$/;"	f	module:test
failing_reprioritize_test	/home/darrion/projects/ClearHeadToDo/src/task.rs	/^    fn failing_reprioritize_test() -> Result<(), Box<dyn Error>> {$/;"	f	module:test
failing_task_completion_already_complete_test	/home/darrion/projects/ClearHeadToDo/src/lib.rs	/^        fn failing_task_completion_already_complete_test() {$/;"	f	module:tests::task_list
failing_task_completion_bad_index_test	/home/darrion/projects/ClearHeadToDo/src/lib.rs	/^        fn failing_task_completion_bad_index_test() {$/;"	f	module:tests::task_list
failing_task_removal_test	/home/darrion/projects/ClearHeadToDo/src/lib.rs	/^        fn failing_task_removal_test() {$/;"	f	module:tests::task_list
failing_task_rename_bad_index_test	/home/darrion/projects/ClearHeadToDo/src/lib.rs	/^        fn failing_task_rename_bad_index_test() {$/;"	f	module:tests::task_list
failing_task_reprioritize_bad_index_test	/home/darrion/projects/ClearHeadToDo/src/lib.rs	/^        fn failing_task_reprioritize_bad_index_test() {$/;"	f	module:tests::task_list
failing_task_reprioritize_bad_priority_test	/home/darrion/projects/ClearHeadToDo/src/lib.rs	/^        fn failing_task_reprioritize_bad_priority_test() {$/;"	f	module:tests::task_list
fakepool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/lib.rs	/^mod fakepool;$/;"	n
feed_me	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/test.rs	/^    fn feed_me(&mut self, byte: u8) {$/;"	P	implementation:LolHasher
field_i	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn field_i(i: usize) -> Ident {$/;"	f
fields	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    fields: &'static [&'static str],$/;"	m	struct:FlatStructAccess
fields	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fields: Vec<(&'static str, Content)>,$/;"	m	struct:content::SerializeStruct
fields	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fields: Vec<(&'static str, Content)>,$/;"	m	struct:content::SerializeStructVariant
fields	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fields: Vec<(&'static str, Content)>,$/;"	m	struct:content::SerializeStructVariantAsMapValue
fields	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fields: Vec<Content>,$/;"	m	struct:content::SerializeTupleStruct
fields	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fields: Vec<Content>,$/;"	m	struct:content::SerializeTupleVariant
fields	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fields: Vec<Content>,$/;"	m	struct:content::SerializeTupleVariantAsMapValue
fields	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fields: Vec<(&'static str, Content)>,$/;"	m	struct:FlatMapSerializeStructVariantAsMapValue
fields	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ast.rs	/^    pub fields: Vec<Field<'a>>,$/;"	m	struct:Variant
fields_from_ast	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ast.rs	/^fn fields_from_ast<'a>($/;"	f
fill	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^    pub(crate) fn fill(&self) {}$/;"	P	implementation:Pool
fill	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/pool.rs	/^    pub fn fill(&self) {$/;"	P	implementation:RRBPool
fill_in	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/valued.rs	/^    pub fn fill_in(&mut self) {$/;"	P	implementation:Valued
fill_in_global_values	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matcher.rs	/^    fn fill_in_global_values($/;"	P	implementation:ArgMatcher
find_any_arg	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn find_any_arg(&self, name: &str) -> Option<&AnyArg<'a, 'b>> {$/;"	f
find_any_by_name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs	/^macro_rules! find_any_by_name {$/;"	M
find_by_name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs	/^macro_rules! find_by_name {$/;"	M
find_flag_by_long	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs	/^macro_rules! find_flag_by_long {$/;"	M
find_flag_by_short	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs	/^macro_rules! find_flag_by_short {$/;"	M
find_from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs	/^macro_rules! find_from {$/;"	M
find_opt_by_long	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs	/^macro_rules! find_opt_by_long {$/;"	M
find_opt_by_short	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs	/^macro_rules! find_opt_by_short {$/;"	M
find_subcmd	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs	/^macro_rules! find_subcmd {$/;"	M
find_subcommand	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn find_subcommand(&'b self, sc: &str) -> Option<&'b App<'a, 'b>> {$/;"	f
finish	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/test.rs	/^    fn finish(&self) -> u64 {$/;"	P	implementation:LolHasher
first_child	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    pub(crate) fn first_child(&self) -> &Self {$/;"	P	implementation:Node
first_dup_tokens	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    first_dup_tokens: TokenStream,$/;"	m	struct:VecAttr
fish	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/mod.rs	/^mod fish;$/;"	n
flag	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/mod.rs	/^mod flag;$/;"	n
flagbuilder_display	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^    fn flagbuilder_display() {$/;"	f	module:test
flagbuilder_display_multiple_aliases	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^    fn flagbuilder_display_multiple_aliases() {$/;"	f	module:test
flagbuilder_display_single_alias	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^    fn flagbuilder_display_single_alias() {$/;"	f	module:test
flags	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub flags: Vec<FlagBuilder<'a, 'b>>,$/;"	m	struct:Parser
flags	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn flags(&self) -> Iter<FlagBuilder<'a, 'b>> {$/;"	f
flatten	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    flatten: bool,$/;"	m	struct:Field
flatten	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn flatten(&self) -> bool {$/;"	P	implementation:Field
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:App
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^    fn fmt(&self, f: &mut Formatter) -> Result {$/;"	P	implementation:FlagBuilder
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    fn fmt(&self, f: &mut Formatter) -> Result {$/;"	P	implementation:OptBuilder
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    fn fmt(&self, f: &mut Formatter) -> Result {$/;"	P	implementation:PosBuilder
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/group.rs	/^    fn fmt(&self, f: &mut Formatter) -> Result {$/;"	P	implementation:ArgGroup
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/shell.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Shell
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    fn fmt(&self, f: &mut std_fmt::Formatter) -> std_fmt::Result {$/;"	P	implementation:Error
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/fmt.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Format
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/lib.rs	/^mod fmt;$/;"	n
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/map.rs	/^        fn fmt(&self, f: &mut Formatter) -> fmt::Result {$/;"	P	implementation:vec_map::Iter
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {$/;"	f
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    default fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error> {$/;"	f
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error> {$/;"	f
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    default fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error> {$/;"	f
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error> {$/;"	f
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error> {$/;"	P	implementation:Node
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error> {$/;"	f
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error> {$/;"	P	implementation:OrdSet
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/tests/hashset.rs	/^    fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error> {$/;"	f
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/tests/ordset.rs	/^    fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error> {$/;"	f
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/tests/vector.rs	/^    fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error> {$/;"	f
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error> {$/;"	P	implementation:Vector
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> Result<(), fmt::Error> {$/;"	P	implementation:Unexpected
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:OneOf
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:a
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:str
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result;$/;"	P	interface:Expected
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> Result<(), fmt::Error> {$/;"	P	implementation:Error
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:ExpectedInMap
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:ExpectedInSeq
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn fmt(&self, _: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Error
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Unsupported
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^mod fmt;$/;"	n
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/symbol.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Symbol
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/error.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Error
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/error.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Error
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Uuid
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Variant
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/parser/error.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Error
fmt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/parser/error.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:ExpectedLength
fmt	/home/darrion/projects/ClearHeadToDo/src/task.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:PriEnum
fmt_primitives	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/fmt.rs	/^macro_rules! fmt_primitives {$/;"	M
focus	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    focus: Focus<'a, A>,$/;"	m	struct:Chunks
focus	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    focus: Focus<'a, A>,$/;"	m	struct:Iter
focus	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    focus: FocusMut<'a, A>,$/;"	m	struct:ChunksMut
focus	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    focus: FocusMut<'a, A>,$/;"	m	struct:IterMut
focus	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn focus(&self) -> Focus<'_, A> {$/;"	P	implementation:Vector
focus	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^mod focus;$/;"	n
focus	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/rayon.rs	/^    focus: Focus<'a, A>,$/;"	m	struct:ParIter
focus	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/rayon.rs	/^    focus: Focus<'a, A>,$/;"	m	struct:VectorProducer
focus	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/rayon.rs	/^    focus: FocusMut<'a, A>,$/;"	m	struct:ParIterMut
focus	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/rayon.rs	/^    focus: FocusMut<'a, A>,$/;"	m	struct:VectorMutProducer
focus_mut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn focus_mut(&mut self) -> FocusMut<'_, A> {$/;"	P	implementation:Vector
force_next_line	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^    force_next_line: bool,$/;"	m	struct:Help
format	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/fmt.rs	/^    fn format(&self) -> &T {$/;"	P	implementation:Format
format	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/fmt.rs	/^    fn format(&self) -> ANSIString {$/;"	P	implementation:Format
forward_to_deserialize_any	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/macros.rs	/^macro_rules! forward_to_deserialize_any {$/;"	M
forward_to_deserialize_any_helper	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/macros.rs	/^macro_rules! forward_to_deserialize_any_helper {$/;"	M
forward_to_deserialize_any_method	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/macros.rs	/^macro_rules! forward_to_deserialize_any_method {$/;"	M
forward_to_deserialize_other	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^macro_rules! forward_to_deserialize_other {$/;"	M
forwarded_impl	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^macro_rules! forwarded_impl {$/;"	M
found	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/error.rs	/^    const fn found(&self) -> usize {$/;"	P	implementation:Error
found	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/error.rs	/^    found: usize,$/;"	m	struct:Error
fragment	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/lib.rs	/^mod fragment;$/;"	n
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    fn from(mut yaml: &'a Yaml) -> Self {$/;"	P	implementation:App
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    fn from(a: &'z Arg<'a, 'b>) -> Self {$/;"	P	implementation:Arg
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/base.rs	/^    fn from(a: &'z Arg<'n, 'e>) -> Self {$/;"	P	implementation:Base
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^    fn from(a: &'z Arg<'a, 'b>) -> Self {$/;"	P	implementation:FlagBuilder
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^    fn from(mut a: Arg<'a, 'b>) -> Self {$/;"	P	implementation:FlagBuilder
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    fn from(a: &'z Arg<'n, 'e>) -> Self {$/;"	P	implementation:OptBuilder
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    fn from(mut a: Arg<'n, 'e>) -> Self {$/;"	P	implementation:OptBuilder
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/switched.rs	/^    fn from(a: &'z Arg<'n, 'e>) -> Self {$/;"	P	implementation:Switched
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/valued.rs	/^    fn from(a: &'z Arg<'n, 'e>) -> Self {$/;"	P	implementation:Valued
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/group.rs	/^    fn from(b: &'a BTreeMap<Yaml, Yaml>) -> Self {$/;"	P	implementation:ArgGroup
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/group.rs	/^    fn from(g: &'z ArgGroup<'a>) -> Self {$/;"	P	implementation:ArgGroup
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    fn from(e: io::Error) -> Self {$/;"	P	implementation:Error
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    fn from(e: std_fmt::Error) -> Self {$/;"	P	implementation:Error
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn from(m: &'a Vec<(K, V)>) -> Self {$/;"	f
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn from(m: &'a [(K, V)]) -> Self {$/;"	f
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn from(m: &'a collections::BTreeMap<K, V>) -> Self {$/;"	f
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn from(m: &'a collections::HashMap<K, V>) -> Self {$/;"	f
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn from(m: &HashMap<&K, &V, SA>) -> Self {$/;"	f
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn from(m: Vec<(K, V)>) -> Self {$/;"	f
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn from(m: collections::BTreeMap<K, V>) -> Self {$/;"	f
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn from(m: collections::HashMap<K, V>) -> Self {$/;"	f
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    fn from(btree_set: &BTreeSet<A>) -> Self {$/;"	f
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    fn from(hash_set: &collections::HashSet<A>) -> Self {$/;"	f
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    fn from(hash_set: collections::HashSet<A>) -> Self {$/;"	f
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    fn from(ordset: &OrdSet<A>) -> Self {$/;"	f
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    fn from(ordset: OrdSet<A>) -> Self {$/;"	f
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    fn from(set: &HashSet<&A, SA>) -> Self {$/;"	f
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    fn from(slice: &'a [A]) -> Self {$/;"	f
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    fn from(vec: &Vec<A>) -> Self {$/;"	f
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    fn from(vec: Vec<A>) -> Self {$/;"	f
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    fn from(node: CollisionNode<A>) -> Self {$/;"	P	implementation:Entry
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn from(m: &'a HashMap<K, V, S>) -> Self {$/;"	P	implementation:OrdMap
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn from(m: &'a Vec<(RK, RV)>) -> OrdMap<K, V> {$/;"	f
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn from(m: &'a [(RK, RV)]) -> OrdMap<K, V> {$/;"	f
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn from(m: &'a collections::BTreeMap<RK, RV>) -> OrdMap<K, V> {$/;"	f
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn from(m: &'a collections::HashMap<RK, RV>) -> OrdMap<K, V> {$/;"	f
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn from(m: &OrdMap<&K, &V>) -> Self {$/;"	f
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn from(m: HashMap<K, V, S>) -> Self {$/;"	P	implementation:OrdMap
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn from(m: Vec<(RK, RV)>) -> OrdMap<K, V> {$/;"	f
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn from(m: collections::BTreeMap<RK, RV>) -> OrdMap<K, V> {$/;"	f
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn from(m: collections::HashMap<RK, RV>) -> OrdMap<K, V> {$/;"	f
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    fn from(btree_set: &collections::BTreeSet<A>) -> Self {$/;"	P	implementation:OrdSet
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    fn from(btree_set: collections::BTreeSet<A>) -> Self {$/;"	P	implementation:OrdSet
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    fn from(hash_set: &collections::HashSet<A>) -> Self {$/;"	P	implementation:OrdSet
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    fn from(hash_set: collections::HashSet<A>) -> Self {$/;"	P	implementation:OrdSet
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    fn from(hashset: &HashSet<A, S>) -> Self {$/;"	P	implementation:OrdSet
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    fn from(hashset: HashSet<A, S>) -> Self {$/;"	P	implementation:OrdSet
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    fn from(set: &OrdSet<&A>) -> Self {$/;"	f
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    fn from(slice: &'a [A]) -> Self {$/;"	f
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    fn from(vec: &Vec<A>) -> Self {$/;"	P	implementation:OrdSet
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    fn from(vec: Vec<A>) -> Self {$/;"	P	implementation:OrdSet
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn from(slice: &[A]) -> Self {$/;"	P	implementation:Vector
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn from(vec: &Vec<A>) -> Self {$/;"	P	implementation:Vector
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn from(vec: &Vector<&A>) -> Self {$/;"	f
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn from(vec: Vec<A>) -> Self {$/;"	P	implementation:Vector
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    fn from(self) -> Self::Deserializer {$/;"	f
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    fn from(self) -> Self::Deserializer;$/;"	P	interface:IdentifierDeserializer
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/error.rs	/^    fn from(err: builder::Error) -> Self {$/;"	P	implementation:Error
from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/error.rs	/^    fn from(err: parser::Error) -> Self {$/;"	P	implementation:Error
from_arg	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    pub fn from_arg(mut a: Arg<'n, 'e>, idx: u64) -> Self {$/;"	P	implementation:PosBuilder
from_arg_ref	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    pub fn from_arg_ref(a: &Arg<'n, 'e>, idx: u64) -> Self {$/;"	P	implementation:PosBuilder
from_argmatches	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/lib.rs	/^        fn from_argmatches<'a>(matches: clap::ArgMatches<'a>) -> Self;$/;"	P	interface:derive::FromArgMatches
from_ascii	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/osstringext.rs	/^    fn from_ascii(ascii: &[u8]) -> OsString {$/;"	f	function:test_windows_osstr_starts_with
from_ast	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ast.rs	/^    pub fn from_ast($/;"	P	implementation:Container
from_ast	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn from_ast($/;"	P	implementation:Field
from_ast	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn from_ast(cx: &Ctxt, item: &syn::DeriveInput) -> Self {$/;"	P	implementation:Container
from_ast	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn from_ast(cx: &Ctxt, variant: &syn::Variant) -> Self {$/;"	P	implementation:Variant
from_attrs	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    fn from_attrs($/;"	P	implementation:Name
from_bounds	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    pub fn from_bounds<I>(iter: &I) -> Option<usize>$/;"	f	module:size_hint
from_bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/osstringext.rs	/^    fn from_bytes(b: &[u8]) -> &Self {$/;"	P	implementation:OsStr
from_bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/osstringext.rs	/^    fn from_bytes(b: &[u8]) -> &Self;$/;"	P	interface:OsStrExt3
from_bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/mod.rs	/^    pub const fn from_bytes(b: Bytes) -> Self {$/;"	P	implementation:Builder
from_bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/mod.rs	/^    pub const fn from_bytes(bytes: Bytes) -> Uuid {$/;"	P	implementation:Uuid
from_chunk	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    pub(crate) fn from_chunk(pool: &RRBPool<A>, level: usize, chunk: PoolRef<Chunk<A>>) -> Self /;"	P	implementation:Node
from_fields	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/mod.rs	/^    pub fn from_fields($/;"	P	implementation:Builder
from_fields	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/mod.rs	/^    pub fn from_fields($/;"	P	implementation:Uuid
from_fields_le	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/mod.rs	/^    pub fn from_fields_le($/;"	P	implementation:Uuid
from_focus	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn from_focus(focus: Focus<'a, A>) -> Self {$/;"	P	implementation:Iter
from_focus	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn from_focus(focus: FocusMut<'a, A>) -> Self {$/;"	f
from_guid	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/winapi_support.rs	/^    pub fn from_guid(guid: guiddef::GUID) -> Result<Uuid, crate::Error> {$/;"	P	implementation:Uuid
from_i16	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/from_primitive.rs	/^    fn from_i16(n: i16) -> Option<Self>;$/;"	P	interface:FromPrimitive
from_i32	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/from_primitive.rs	/^    fn from_i32(n: i32) -> Option<Self>;$/;"	P	interface:FromPrimitive
from_i64	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/from_primitive.rs	/^    fn from_i64(n: i64) -> Option<Self>;$/;"	P	interface:FromPrimitive
from_i8	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/from_primitive.rs	/^    fn from_i8(n: i8) -> Option<Self>;$/;"	P	interface:FromPrimitive
from_iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn from_iter<T>(i: T) -> Self$/;"	f
from_iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    fn from_iter<T>(i: T) -> Self$/;"	f
from_iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn from_iter<T>(i: T) -> Self$/;"	f
from_iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    fn from_iter<T>(i: T) -> Self$/;"	f
from_iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn from_iter<I>(iter: I) -> Self$/;"	P	implementation:Vector
from_node	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    fn from_node(pool: &Pool<Node<A>>, node: Node<A>) -> Self {$/;"	P	implementation:Entry
from_primitive	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^mod from_primitive;$/;"	n
from_rfc4122	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v1.rs	/^    pub const fn from_rfc4122(ticks: u64, counter: u16) -> Self {$/;"	P	implementation:Timestamp
from_slice	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/mod.rs	/^    pub fn from_slice(b: &[u8]) -> Result<Self, crate::Error> {$/;"	P	implementation:Builder
from_slice	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/mod.rs	/^    pub fn from_slice(b: &[u8]) -> Result<Uuid, crate::Error> {$/;"	P	implementation:Uuid
from_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    fn from_str(s: &str) -> Result<Self, <Self as FromStr>::Err> {$/;"	P	implementation:AppSettings
from_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/settings.rs	/^    fn from_str(s: &str) -> Result<Self, <Self as FromStr>::Err> {$/;"	P	implementation:ArgSettings
from_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/shell.rs	/^    fn from_str(s: &str) -> Result<Self, Self::Err> {$/;"	P	implementation:Shell
from_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/case.rs	/^    fn from_str(rename_all_str: &str) -> Result<Self, Self::Err> {$/;"	P	implementation:RenameRule
from_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    fn from_str(uuid_str: &str) -> Result<Self, Self::Err> {$/;"	P	implementation:Uuid
from_u128	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/mod.rs	/^    pub const fn from_u128(v: u128) -> Self {$/;"	P	implementation:Uuid
from_u128	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/mod.rs	/^    pub fn from_u128(v: u128) -> Self {$/;"	P	implementation:Builder
from_u128_le	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/mod.rs	/^    pub const fn from_u128_le(v: u128) -> Self {$/;"	P	implementation:Uuid
from_u16	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/from_primitive.rs	/^    fn from_u16(n: u16) -> Option<Self>;$/;"	P	interface:FromPrimitive
from_u32	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/from_primitive.rs	/^    fn from_u32(n: u32) -> Option<Self>;$/;"	P	interface:FromPrimitive
from_u64	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/from_primitive.rs	/^    fn from_u64(n: u64) -> Option<Self>;$/;"	P	interface:FromPrimitive
from_u8	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/from_primitive.rs	/^    fn from_u8(n: u8) -> Option<Self>;$/;"	P	interface:FromPrimitive
from_unix	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v1.rs	/^    pub fn from_unix($/;"	P	implementation:Timestamp
from_usage	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn from_usage(u: &'a str) -> Self {$/;"	P	implementation:Arg
from_usage	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    pub fn from_usage(usage: &'a str) -> Self {$/;"	P	implementation:UsageParser
from_utf8_lossy	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/export.rs	/^    pub fn from_utf8_lossy(bytes: &[u8]) -> &str {$/;"	f	module:string
from_utf8_lossy	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/export.rs	/^    pub fn from_utf8_lossy(bytes: &[u8]) -> Cow<str> {$/;"	f	module:string
from_uuid	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^    pub const fn from_uuid(uuid: Uuid) -> Self {$/;"	P	implementation:Hyphenated
from_uuid	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^    pub const fn from_uuid(uuid: Uuid) -> Self {$/;"	P	implementation:Simple
from_uuid	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^    pub const fn from_uuid(uuid: Uuid) -> Self {$/;"	P	implementation:Urn
from_uuid_ref	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^    pub const fn from_uuid_ref(uuid: &'a Uuid) -> Self {$/;"	P	implementation:HyphenatedRef
from_uuid_ref	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^    pub const fn from_uuid_ref(uuid: &'a Uuid) -> Self {$/;"	P	implementation:SimpleRef
from_uuid_ref	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^    pub const fn from_uuid_ref(uuid: &'a Uuid) -> Self {$/;"	P	implementation:UrnRef
from_yaml	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn from_yaml(yaml: &'a Yaml) -> App<'a, 'a> {$/;"	P	implementation:App
from_yaml	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn from_yaml(y: &BTreeMap<Yaml, Yaml>) -> Arg {$/;"	P	implementation:Arg
from_yaml	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/group.rs	/^    pub fn from_yaml(y: &'a Yaml) -> ArgGroup<'a> {$/;"	P	implementation:ArgGroup
from_yaml	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/subcommand.rs	/^    pub fn from_yaml(yaml: &Yaml) -> App {$/;"	P	implementation:SubCommand
front	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn front(&self) -> Option<&A> {$/;"	P	implementation:Vector
front_index	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    front_index: usize,$/;"	m	struct:Chunks
front_index	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    front_index: usize,$/;"	m	struct:ChunksMut
front_index	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    front_index: usize,$/;"	m	struct:Iter
front_index	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    front_index: usize,$/;"	m	struct:IterMut
front_mut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn front_mut(&mut self) -> Option<&mut A> {$/;"	P	implementation:Vector
fwd_last	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    fwd_last: Option<A>,$/;"	m	struct:ConsumingIter
fwd_path	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    fwd_path: Vec<(&'a Node<A>, usize)>,$/;"	m	struct:Iter
fwd_stack	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    fwd_stack: Vec<ConsumingIterItem<A>>,$/;"	m	struct:ConsumingIter
g_settings	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub g_settings: AppFlags,$/;"	m	struct:Parser
gen_completions	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn gen_completions<T: Into<OsString>, S: Into<String>>($/;"	P	implementation:App
gen_completions	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn gen_completions(&mut self, for_shell: Shell, od: OsString) {$/;"	f
gen_completions_to	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn gen_completions_to<W: Write, S: Into<String>>($/;"	P	implementation:App
gen_completions_to	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn gen_completions_to<W: Write>(&mut self, for_shell: Shell, buf: &mut W) {$/;"	f
gen_range	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/sort.rs	/^fn gen_range<R: RngCore>(rng: &mut R, min: usize, max: usize) -> usize {$/;"	f
generate	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/mod.rs	/^    pub fn generate<W: Write>(&self, for_shell: Shell, buf: &mut W) {$/;"	P	implementation:ComplGen
generate_inner	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/elvish.rs	/^fn generate_inner<'a, 'b, 'p>($/;"	f
generate_inner	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/powershell.rs	/^fn generate_inner<'a, 'b, 'p>($/;"	f
generate_sequence	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v1.rs	/^    fn generate_sequence(&self, _: u64, _: u32) -> u16 {$/;"	P	implementation:Context
generate_sequence	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v1.rs	/^    fn generate_sequence(&self, seconds: u64, subsec_nanos: u32) -> u16 {$/;"	P	implementation:T
generate_sequence	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v1.rs	/^    fn generate_sequence(&self, seconds: u64, subsec_nanos: u32) -> u16;$/;"	P	interface:ClockSequence
generate_to	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/bash.rs	/^    pub fn generate_to<W: Write>(&self, buf: &mut W) {$/;"	P	implementation:BashGen
generate_to	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/elvish.rs	/^    pub fn generate_to<W: Write>(&self, buf: &mut W) {$/;"	P	implementation:ElvishGen
generate_to	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/fish.rs	/^    pub fn generate_to<W: Write>(&self, buf: &mut W) {$/;"	P	implementation:FishGen
generate_to	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/powershell.rs	/^    pub fn generate_to<W: Write>(&self, buf: &mut W) {$/;"	P	implementation:PowerShellGen
generate_to	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/zsh.rs	/^    pub fn generate_to<W: Write>(&self, buf: &mut W) {$/;"	P	implementation:ZshGen
generics	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^    generics: syn::Generics,$/;"	m	struct:Parameters
generics	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ast.rs	/^    pub generics: &'a syn::Generics,$/;"	m	struct:Container
generics	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^    generics: syn::Generics,$/;"	m	struct:Parameters
get	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matcher.rs	/^    pub fn get(&self, arg: &str) -> Option<&MatchedArg> {$/;"	P	implementation:ArgMatcher
get	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/map.rs	/^        pub fn get(&self, key: usize) -> Option<&V> {$/;"	P	implementation:vec_map::VecMap
get	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn get(&self) -> &V {$/;"	f
get	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn get<BK>(&self, key: &BK) -> Option<&V>$/;"	f
get	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    fn get(path: &[(&'a Node<A>, usize)]) -> Option<&'a A> {$/;"	P	implementation:Iter
get	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    fn get<BK>(&self, key: &BK) -> Option<&A>$/;"	P	implementation:CollisionNode
get	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    pub(crate) fn get<BK>(&self, hash: HashBits, shift: usize, key: &BK) -> Option<&A>$/;"	P	implementation:Node
get	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn get(&self) -> &V {$/;"	f
get	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn get<BK>(&self, key: &BK) -> Option<&V>$/;"	f
get	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    pub fn get(&mut self, index: usize) -> Option<&A> {$/;"	f
get	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    pub fn get(&mut self, pool: &RRBPool<A>, index: usize) -> Option<&mut A> {$/;"	f
get	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn get(&self, index: usize) -> Option<&A> {$/;"	P	implementation:Vector
get	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    fn get(&self) -> bool {$/;"	P	implementation:BoolAttr
get	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    fn get(self) -> Option<T> {$/;"	P	implementation:Attr
get	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    fn get(self) -> Vec<T> {$/;"	P	implementation:VecAttr
get_all_subcommand_paths	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/mod.rs	/^pub fn get_all_subcommand_paths(p: &Parser, first: bool) -> Vec<String> {$/;"	f
get_args_tag	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/usage.rs	/^fn get_args_tag(p: &Parser, incl_reqs: bool) -> Option<String> {$/;"	f
get_bin_name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn get_bin_name(&self) -> Option<&str> {$/;"	P	implementation:App
get_chunk	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    pub fn get_chunk(&mut self, index: usize) -> (Range<usize>, &[A]) {$/;"	f
get_chunk	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    pub fn get_chunk(&mut self, pool: &RRBPool<A>, index: usize) -> (Range<usize>, &mut [A]) {$/;"	f
get_focus	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    fn get_focus(&mut self) -> &mut Chunk<A> {$/;"	f
get_focus	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    fn get_focus(&self) -> &Chunk<A> {$/;"	f
get_in	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/lib.rs	/^    fn get_in() {$/;"	f	module:lib_test
get_in	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/lib.rs	/^macro_rules! get_in {$/;"	M
get_key_value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn get_key_value<BK>(&self, key: &BK) -> Option<(&K, &V)>$/;"	f
get_key_value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn get_key_value<BK>(&self, key: &BK) -> Option<(&K, &V)>$/;"	f
get_lit_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^fn get_lit_str<'a>(cx: &Ctxt, attr_name: Symbol, lit: &'a syn::Lit) -> Result<&'a syn::LitStr, (/;"	f
get_lit_str2	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^fn get_lit_str2<'a>($/;"	f
get_matches	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn get_matches(self) -> ArgMatches<'a> {$/;"	P	implementation:App
get_matches_from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn get_matches_from<I, T>(mut self, itr: I) -> ArgMatches<'a>$/;"	P	implementation:App
get_matches_from_safe	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn get_matches_from_safe<I, T>(mut self, itr: I) -> ClapResult<ArgMatches<'a>>$/;"	P	implementation:App
get_matches_from_safe_borrow	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn get_matches_from_safe_borrow<I, T>(&mut self, itr: I) -> ClapResult<ArgMatches<'a>>$/;"	P	implementation:App
get_matches_safe	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn get_matches_safe(self) -> ClapResult<ArgMatches<'a>> {$/;"	P	implementation:App
get_matches_with	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn get_matches_with<I, T>($/;"	f
get_max	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn get_max(&self) -> Option<&(K, V)> {$/;"	f
get_max	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    pub fn get_max(&self) -> Option<&A> {$/;"	f
get_member	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^fn get_member(params: &Parameters, field: &Field, member: &Member) -> TokenStream {$/;"	f
get_min	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn get_min(&self) -> Option<&(K, V)> {$/;"	f
get_min	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    pub fn get_min(&self) -> Option<&A> {$/;"	f
get_multiple_renames	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^fn get_multiple_renames<'a>($/;"	f
get_mut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matcher.rs	/^    pub fn get_mut(&mut self, arg: &str) -> Option<&mut MatchedArg> {$/;"	P	implementation:ArgMatcher
get_mut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn get_mut(&mut self) -> &mut V {$/;"	f
get_mut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn get_mut<BK>(&mut self, key: &BK) -> Option<&mut V>$/;"	f
get_mut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    fn get_mut<BK>(&mut self, key: &BK) -> Option<&mut A>$/;"	P	implementation:CollisionNode
get_mut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    pub(crate) fn get_mut<BK>($/;"	P	implementation:Node
get_mut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn get_mut(&mut self) -> &mut V {$/;"	f
get_mut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn get_mut<BK>(&mut self, key: &BK) -> Option<&mut V>$/;"	f
get_mut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    pub fn get_mut(&mut self, index: usize) -> Option<&mut A> {$/;"	f
get_mut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn get_mut(&mut self, index: usize) -> Option<&mut A> {$/;"	P	implementation:Vector
get_name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn get_name(&self) -> &str {$/;"	P	implementation:App
get_next	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn get_next<BK>(&self, key: &BK) -> Option<(&K, &V)>$/;"	f
get_next	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    pub fn get_next(&self, key: &A) -> Option<&A> {$/;"	f
get_next_mut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn get_next_mut<BK>(&mut self, key: &BK) -> Option<(&K, &mut V)>$/;"	f
get_pool_size	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^    pub(crate) fn get_pool_size(&self) -> usize {$/;"	P	implementation:Pool
get_prev	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn get_prev<BK>(&self, key: &BK) -> Option<(&K, &V)>$/;"	f
get_prev	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    pub fn get_prev(&self, key: &A) -> Option<&A> {$/;"	f
get_prev_mut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn get_prev_mut<BK>(&mut self, key: &BK) -> Option<(&K, &mut V)>$/;"	f
get_renames	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^fn get_renames<'a>($/;"	f
get_required_usage_from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/usage.rs	/^pub fn get_required_usage_from<'a, 'b>($/;"	f
get_requires	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/usage.rs	/^    macro_rules! get_requires {$/;"	M	function:get_required_usage_from
get_ser_and_de	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^fn get_ser_and_de<'a, 'b, T, F>($/;"	f
get_serde_meta_items	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^pub fn get_serde_meta_items(cx: &Ctxt, attr: &syn::Attribute) -> Result<Vec<syn::NestedMeta>, ()/;"	f
get_tooltip	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/elvish.rs	/^fn get_tooltip<T: ToString>(help: Option<&str>, data: T) -> String {$/;"	f
get_tooltip	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/powershell.rs	/^fn get_tooltip<T: ToString>(help: Option<&str>, data: T) -> String {$/;"	f
get_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    pub fn get_variant(&self) -> Option<Variant> {$/;"	P	implementation:Uuid
get_version	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    pub fn get_version(&self) -> Option<Version> {$/;"	P	implementation:Uuid
get_version_num	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    pub const fn get_version_num(&self) -> usize {$/;"	P	implementation:Uuid
get_where_predicates	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^fn get_where_predicates($/;"	f
get_with_tokens	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    fn get_with_tokens(self) -> Option<(TokenStream, T)> {$/;"	P	implementation:Attr
get_zsh_arg_conflicts	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/macros.rs	/^macro_rules! get_zsh_arg_conflicts {$/;"	M
getter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    getter: Option<syn::ExprPath>,$/;"	m	struct:Field
getter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn getter(&self) -> Option<&syn::ExprPath> {$/;"	P	implementation:Field
global	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn global(self, g: bool) -> Self {$/;"	P	implementation:Arg
global_args	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub global_args: Vec<Arg<'a, 'b>>,$/;"	m	struct:Parser
global_setting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn global_setting(mut self, setting: AppSettings) -> Self {$/;"	P	implementation:App
global_settings	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn global_settings(mut self, settings: &[AppSettings]) -> Self {$/;"	P	implementation:App
good	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/fmt.rs	/^    pub fn good<T>(&self, msg: T) -> Format<T>$/;"	P	implementation:Colorizer
group	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn group(mut self, group: ArgGroup<'a>) -> Self {$/;"	P	implementation:App
group	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn group(mut self, name: &'a str) -> Self {$/;"	P	implementation:Arg
group	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/mod.rs	/^mod group;$/;"	n
groups	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn groups(mut self, groups: &[ArgGroup<'a>]) -> Self {$/;"	P	implementation:App
groups	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub groups: Vec<ArgGroup<'a>>,$/;"	m	struct:Parser
groups	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn groups(mut self, names: &[&'a str]) -> Self {$/;"	P	implementation:Arg
groups	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/base.rs	/^    pub groups: Option<Vec<&'a str>>,$/;"	m	struct:Base
groups	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/group.rs	/^    fn groups() {$/;"	f	module:test
groups_for_arg	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn groups_for_arg(&self, name: &str) -> Option<Vec<&'a str>> {$/;"	f
hamt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/mod.rs	/^pub(crate) mod hamt;$/;"	n
handle_self_overrides	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matcher.rs	/^    pub fn handle_self_overrides<'b>(&mut self, a: Option<&AnyArg<'a, 'b>>) {$/;"	P	implementation:ArgMatcher
has_args	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn has_args(&self) -> bool {$/;"	f
has_flags	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn has_flags(&self) -> bool {$/;"	f
has_flatten	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    has_flatten: bool,$/;"	m	struct:Container
has_flatten	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn has_flatten(&self) -> bool {$/;"	P	implementation:Container
has_getter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^    has_getter: bool,$/;"	m	struct:Parameters
has_getter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ast.rs	/^    pub fn has_getter(&self) -> bool {$/;"	P	implementation:Data
has_opts	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn has_opts(&self) -> bool {$/;"	f
has_positionals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn has_positionals(&self) -> bool {$/;"	f
has_room	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    fn has_room(&self) -> bool {$/;"	P	implementation:Node
has_subcommands	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn has_subcommands(&self) -> bool {$/;"	f
has_switch	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    fn has_switch(&self) -> bool {$/;"	P	implementation:App
has_switch	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn has_switch(&self) -> bool {$/;"	f
has_switch	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn has_switch(&self) -> bool;$/;"	P	interface:AnyArg
has_switch	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^    fn has_switch(&self) -> bool {$/;"	P	implementation:FlagBuilder
has_switch	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    fn has_switch(&self) -> bool {$/;"	P	implementation:OptBuilder
has_switch	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    fn has_switch(&self) -> bool {$/;"	P	implementation:PosBuilder
has_visible_flags	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn has_visible_flags(&self) -> bool {$/;"	f
has_visible_opts	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn has_visible_opts(&self) -> bool {$/;"	f
has_visible_positionals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn has_visible_positionals(&self) -> bool {$/;"	f
has_visible_subcommands	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn has_visible_subcommands(&self) -> bool {$/;"	f
hash	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn hash<H>(&self, state: &mut H)$/;"	f
hash	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    hash: HashBits,$/;"	m	struct:OccupiedEntry
hash	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    hash: HashBits,$/;"	m	struct:VacantEntry
hash	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    fn hash<H>(&self, state: &mut H)$/;"	f
hash	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/lib.rs	/^mod hash;$/;"	n
hash	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    hash: HashBits,$/;"	m	struct:CollisionNode
hash	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn hash<H>(&self, state: &mut H)$/;"	f
hash	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    fn hash<H>(&self, state: &mut H)$/;"	P	implementation:OrdSet
hash	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn hash<H: Hasher>(&self, state: &mut H) {$/;"	P	implementation:Vector
hash_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^pub(crate) fn hash_key<K: Hash + ?Sized, S: BuildHasher>(bh: &S, key: &K) -> HashBits {$/;"	f
hash_map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/proptest.rs	/^pub fn hash_map<K: Strategy + 'static, V: Strategy + 'static>($/;"	f
hash_set	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/proptest.rs	/^pub fn hash_set<A: Strategy + 'static>($/;"	f
hasher	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    hasher: Ref<S>,$/;"	m	struct:HashMap
hasher	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn hasher(&self) -> &Ref<S> {$/;"	P	implementation:HashMap
hasher	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    hasher: Ref<S>,$/;"	m	struct:HashSet
hasher	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    pub fn hasher(&self) -> &Ref<S> {$/;"	P	implementation:HashSet
hashmap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^macro_rules! hashmap {$/;"	M
hashset	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^macro_rules! hashset {$/;"	M
hashset	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/tests/mod.rs	/^mod hashset;$/;"	n
head	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn head(&self) -> Option<&A> {$/;"	P	implementation:Vector
help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^    fn help<'b, 'c>(&mut self, arg: &ArgWithDisplay<'b, 'c>, spec_vals: &str) -> io::Result<()> /;"	P	implementation:Help
help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    fn help(&self) -> Option<&'e str> {$/;"	P	implementation:App
help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn help<S: Into<&'b str>>(mut self, help: S) -> Self {$/;"	P	implementation:App
help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^mod help;$/;"	n
help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn help(&self) -> Option<&'e str> {$/;"	f
help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn help(&self) -> Option<&'e str>;$/;"	P	interface:AnyArg
help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn help(mut self, h: &'b str) -> Self {$/;"	P	implementation:Arg
help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/base.rs	/^    pub help: Option<&'b str>,$/;"	m	struct:Base
help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^    fn help(&self) -> Option<&'e str> {$/;"	P	implementation:FlagBuilder
help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    fn help(&self) -> Option<&'e str> {$/;"	P	implementation:OptBuilder
help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    fn help(&self) -> Option<&'e str> {$/;"	P	implementation:PosBuilder
help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn help(&mut self, arg: &mut Arg<'a, 'a>) {$/;"	P	implementation:UsageParser
help_message	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn help_message<S: Into<&'a str>>(mut self, s: S) -> Self {$/;"	P	implementation:App
help_message	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub help_message: Option<&'a str>,$/;"	m	struct:Parser
help_short	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn help_short<S: AsRef<str> + 'b>(mut self, s: S) -> Self {$/;"	P	implementation:App
help_short	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    help_short: Option<char>,$/;"	m	struct:Parser
help_short	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn help_short(&mut self, s: &str) {$/;"	f
help_start	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^fn help_start(b: u8) -> bool {$/;"	f
help_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/meta.rs	/^    pub help_str: Option<&'b str>,$/;"	m	struct:AppMeta
helper	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    fn helper(bounds: (usize, Option<usize>)) -> Option<usize> {$/;"	f	module:size_hint
helper	/home/darrion/projects/ClearHeadToDo/src/lib.rs	/^pub mod helper;$/;"	n
hidden	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn hidden(self, h: bool) -> Self {$/;"	P	implementation:Arg
hidden_long_help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn hidden_long_help(self, hide: bool) -> Self {$/;"	P	implementation:Arg
hidden_short_help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn hidden_short_help(self, hide: bool) -> Self {$/;"	P	implementation:Arg
hide_default_value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn hide_default_value(self, hide: bool) -> Self {$/;"	P	implementation:Arg
hide_env_values	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn hide_env_values(self, hide: bool) -> Self {$/;"	P	implementation:Arg
hide_possible_values	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn hide_possible_values(self, hide: bool) -> Self {$/;"	P	implementation:Arg
hide_pv	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^    hide_pv: bool,$/;"	m	struct:Help
hyphenated_ref_too_small	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^    fn hyphenated_ref_too_small() {$/;"	f	module:tests
hyphenated_ref_trailing	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^    fn hyphenated_ref_trailing() {$/;"	f	module:tests
hyphenated_too_small	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^    fn hyphenated_too_small() {$/;"	f	module:tests
hyphenated_trailing	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^    fn hyphenated_trailing() {$/;"	f	module:tests
id	/home/darrion/projects/ClearHeadToDo/src/task.rs	/^    pub id: Uuid,$/;"	m	struct:Task
ident	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ast.rs	/^    pub ident: syn::Ident,$/;"	m	struct:Container
ident	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ast.rs	/^    pub ident: syn::Ident,$/;"	m	struct:Variant
identifier	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    identifier: Identifier,$/;"	m	struct:Container
identifier	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn identifier(&self) -> Identifier {$/;"	P	implementation:Container
ignored_any	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^mod ignored_any;$/;"	n
impl_adapter_from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^macro_rules! impl_adapter_from {$/;"	M
impl_adapter_traits	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^macro_rules! impl_adapter_traits {$/;"	M
impl_copy_clone	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^macro_rules! impl_copy_clone {$/;"	M
impl_deserialize_num	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^macro_rules! impl_deserialize_num {$/;"	M
impl_from_primitive_for_float	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/from_primitive.rs	/^macro_rules! impl_from_primitive_for_float {$/;"	M
impl_from_primitive_for_int	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/from_primitive.rs	/^macro_rules! impl_from_primitive_for_int {$/;"	M
impl_from_primitive_for_uint	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/from_primitive.rs	/^macro_rules! impl_from_primitive_for_uint {$/;"	M
impl_settings	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs	/^macro_rules! impl_settings {$/;"	M
implied_settings	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    fn implied_settings(&mut self, a: &Arg<'a, 'b>) {$/;"	f
impls	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^mod impls;$/;"	n
impls	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^mod impls;$/;"	n
impossible	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^mod impossible;$/;"	n
in_place	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^    fn in_place(self) -> InPlaceImplGenerics<'a> {$/;"	P	implementation:DeImplGenerics
in_place	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^    fn in_place(self) -> InPlaceTypeGenerics<'a> {$/;"	P	implementation:DeTypeGenerics
inc_occurrence_of	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matcher.rs	/^    pub fn inc_occurrence_of(&mut self, arg: &'a str) {$/;"	P	implementation:ArgMatcher
inc_occurrences_of	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matcher.rs	/^    pub fn inc_occurrences_of(&mut self, args: &[&'a str]) {$/;"	P	implementation:ArgMatcher
index	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn index(mut self, idx: u64) -> Self {$/;"	P	implementation:Arg
index	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub index: Option<u64>,$/;"	m	struct:Arg
index	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    pub index: u64,$/;"	m	struct:PosBuilder
index	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn index(&self, key: &BK) -> &Self::Output {$/;"	f
index	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    pub(crate) fn index(&self, level: usize, index: usize) -> &A {$/;"	P	implementation:Node
index	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn index(&self, key: &BK) -> &Self::Output {$/;"	f
index	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    pub fn index(&mut self, index: usize) -> &A {$/;"	f
index	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn index(&self, index: usize) -> &Self::Output {$/;"	P	implementation:Vector
index_in	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    fn index_in(&self, level: usize, index: usize) -> Option<usize> {$/;"	P	implementation:Node
index_mut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn index_mut(&mut self, key: &BK) -> &mut Self::Output {$/;"	f
index_mut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    pub(crate) fn index_mut(&mut self, pool: &RRBPool<A>, level: usize, index: usize) -> &mut A /;"	P	implementation:Node
index_mut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn index_mut(&mut self, key: &BK) -> &mut Self::Output {$/;"	f
index_mut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    pub fn index_mut(&mut self, index: usize) -> &mut A {$/;"	f
index_mut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn index_mut(&mut self, index: usize) -> &mut Self::Output {$/;"	P	implementation:Vector
index_of	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    pub fn index_of<S: AsRef<str>>(&self, name: S) -> Option<usize> {$/;"	P	implementation:ArgMatches
index_of	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn index_of(&self, value: &A) -> Option<usize>$/;"	P	implementation:Vector
index_operator	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn index_operator() {$/;"	f	module:test
index_operator	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn index_operator() {$/;"	f	module:test
indexing	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn indexing() {$/;"	f	module:test
indices	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/matched_arg.rs	/^    pub indices: Vec<usize>,$/;"	m	struct:MatchedArg
indices_of	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    pub fn indices_of<S: AsRef<str>>(&'a self, name: S) -> Option<Indices<'a>> {$/;"	P	implementation:ArgMatches
info	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    pub info: Option<Vec<String>>,$/;"	m	struct:Error
inner	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/map.rs	/^        inner: BTreeMap<usize, V>,$/;"	m	struct:vec_map::VecMap
inner	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/map.rs	/^        inner: btree_map::Iter<'a, usize, V>,$/;"	m	struct:vec_map::Iter
inner_b	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    inner_b: PoolRef<Chunk<A>>,$/;"	m	struct:RRB
inner_f	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    inner_f: PoolRef<Chunk<A>>,$/;"	m	struct:RRB
insert	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matcher.rs	/^    pub fn insert(&mut self, name: &'a str) {$/;"	P	implementation:ArgMatcher
insert	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/map.rs	/^        pub fn insert(&mut self, key: usize, value: V) -> Option<V> {$/;"	P	implementation:vec_map::VecMap
insert	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn insert(&mut self, k: K, v: V) -> Option<V> {$/;"	f
insert	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn insert(&mut self, value: V) -> V {$/;"	f
insert	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn insert(self, value: V) -> &'a mut V {$/;"	f
insert	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    pub fn insert(&mut self, a: A) -> Option<A> {$/;"	f
insert	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    pub(crate) fn insert(&mut self, pool: &Pool<Node<A>>, value: A) -> Insert<A>$/;"	P	implementation:Node
insert	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    fn insert(&mut self, value: A) -> Option<A> {$/;"	P	implementation:CollisionNode
insert	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    pub(crate) fn insert($/;"	P	implementation:Node
insert	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn insert(&mut self, key: K, value: V) -> Option<V> {$/;"	f
insert	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn insert(&mut self, value: V) -> V {$/;"	f
insert	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn insert(self, value: V) -> &'a mut V {$/;"	f
insert	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    pub fn insert(&mut self, a: A) -> Option<A> {$/;"	f
insert	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn insert(&mut self, index: usize, value: A) {$/;"	P	implementation:Vector
insert	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    fn insert<A: ToTokens>(&mut self, obj: A, value: T) {$/;"	P	implementation:VecAttr
insert_failing	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    fn insert_failing() {$/;"	f	module:test
insert_ord	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn insert_ord(&mut self, item: A)$/;"	P	implementation:Vector
insert_remove_single_mut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn insert_remove_single_mut() {$/;"	f	module:test
int_to_int	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/from_primitive.rs	/^macro_rules! int_to_int {$/;"	M
int_to_uint	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/from_primitive.rs	/^macro_rules! int_to_uint {$/;"	M
integer128	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/lib.rs	/^mod integer128;$/;"	n
internals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/lib.rs	/^mod internals;$/;"	n
intersection	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn intersection(self, other: Self) -> Self {$/;"	f
intersection	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    pub fn intersection(self, other: Self) -> Self {$/;"	f
intersection	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn intersection(self, other: Self) -> Self {$/;"	f
intersection	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    pub fn intersection(self, other: Self) -> Self {$/;"	f
intersection_with	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn intersection_with<B, C, F>(self, other: HashMap<K, B, S>, mut f: F) -> HashMap<K, C, /;"	f
intersection_with	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn intersection_with<B, C, F>(self, other: OrdMap<K, B>, mut f: F) -> OrdMap<K, C>$/;"	f
intersection_with_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn intersection_with_key<B, C, F>($/;"	f
intersection_with_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn intersection_with_key<B, C, F>(mut self, other: OrdMap<K, B>, mut f: F) -> OrdMap<K, /;"	f
into	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matcher.rs	/^    fn into(self) -> ArgMatches<'a> {$/;"	P	implementation:ArgMatcher
into	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    fn into(self) -> Focus<'a, A> {$/;"	f
into_app	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/lib.rs	/^        fn into_app<'a, 'b>() -> clap::App<'a, 'b>;$/;"	P	interface:derive::IntoApp
into_deserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn into_deserializer(self) -> Self::Deserializer;$/;"	P	interface:IntoDeserializer
into_deserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    fn into_deserializer(self) -> CowStrDeserializer<'a, E> {$/;"	f
into_deserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    fn into_deserializer(self) -> Self::Deserializer {$/;"	f
into_deserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    fn into_deserializer(self) -> StrDeserializer<'a, E> {$/;"	f
into_deserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    fn into_deserializer(self) -> StringDeserializer<E> {$/;"	f
into_deserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    fn into_deserializer(self) -> U32Deserializer<E> {$/;"	f
into_deserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    fn into_deserializer(self) -> UnitDeserializer<E> {$/;"	f
into_deserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn into_deserializer(self) -> Self {$/;"	f	module:content
into_iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn into_iter(self) -> Self::IntoIter {$/;"	f
into_iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    fn into_iter(self) -> Self::IntoIter {$/;"	f
into_iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn into_iter() {$/;"	f	module:test
into_iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn into_iter(self) -> Self::IntoIter {$/;"	f
into_iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    fn into_iter(self) -> Self::IntoIter {$/;"	f
into_iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    fn into_iter(self) -> Self::IntoIter {$/;"	f
into_iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn into_iter(self) -> Self::IntoIter {$/;"	P	implementation:Vector
into_iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/rayon.rs	/^    fn into_iter(self) -> Self::IntoIter {$/;"	f
into_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn into_key(self) -> K {$/;"	f
into_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn into_key(self) -> K {$/;"	f
into_mut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn into_mut(self) -> &'a mut V {$/;"	f
into_mut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn into_mut(self) -> &'a mut V {$/;"	f
invalid_subcommand	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    pub fn invalid_subcommand<S, D, N, U>($/;"	P	implementation:Error
invalid_type	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn invalid_type(self, exp: &Expected) -> E {$/;"	f	module:content
invalid_utf8	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    pub fn invalid_utf8<U>(usage: U, color: ColorWhen) -> Self$/;"	P	implementation:Error
invalid_value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    pub fn invalid_value<B, G, U>($/;"	P	implementation:Error
io_error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    pub fn io_error(e: &Error, color: ColorWhen) -> Self {$/;"	P	implementation:Error
is_a_tty	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/fmt.rs	/^pub fn is_a_tty(_: bool) -> bool {$/;"	f
is_a_tty	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/fmt.rs	/^pub fn is_a_tty(stderr: bool) -> bool {$/;"	f
is_alias	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    fn is_alias(&self, value: &str) -> bool {$/;"	f
is_bin_name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    fn is_bin_name(&self, value: &str) -> bool {$/;"	f
is_completely_dense	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    fn is_completely_dense(&self, level: usize) -> bool {$/;"	P	implementation:Node
is_cow	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^fn is_cow(ty: &syn::Type, elem: fn(&syn::Type) -> bool) -> bool {$/;"	f
is_dense	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    fn is_dense(&self) -> bool {$/;"	P	implementation:Node
is_empty	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matcher.rs	/^    pub fn is_empty(&self) -> bool {$/;"	P	implementation:ArgMatcher
is_empty	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/map.rs	/^        pub fn is_empty(&self) -> bool {$/;"	P	implementation:vec_map::VecMap
is_empty	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn is_empty(&self) -> bool {$/;"	P	implementation:HashMap
is_empty	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    pub fn is_empty(&self) -> bool {$/;"	P	implementation:HashSet
is_empty	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    pub(crate) fn is_empty(&self) -> bool {$/;"	P	implementation:Node
is_empty	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn is_empty(&self) -> bool {$/;"	P	implementation:OrdMap
is_empty	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    pub fn is_empty(&self) -> bool {$/;"	P	implementation:OrdSet
is_empty	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    pub fn is_empty(&self) -> bool {$/;"	f
is_empty	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn is_empty(&self) -> bool {$/;"	P	implementation:Vector
is_empty_node	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    fn is_empty_node(&self) -> bool {$/;"	P	implementation:Entry
is_full	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    fn is_full(&self) -> bool {$/;"	P	implementation:Entry
is_full	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    pub(crate) fn is_full(&self) -> bool {$/;"	P	implementation:Node
is_human_readable	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn is_human_readable(&self) -> bool {$/;"	P	interface:Deserializer
is_human_readable	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn is_human_readable(&self) -> bool {$/;"	P	interface:Serializer
is_implicitly_borrowed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^fn is_implicitly_borrowed(ty: &syn::Type) -> bool {$/;"	f
is_implicitly_borrowed_reference	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^fn is_implicitly_borrowed_reference(ty: &syn::Type) -> bool {$/;"	f
is_inline	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn is_inline(&self) -> bool {$/;"	P	implementation:Vector
is_leaf	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    fn is_leaf(&self) -> bool {$/;"	P	implementation:Node
is_missing_required_ok	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/validator.rs	/^    fn is_missing_required_ok(&self, a: &AnyArg, matcher: &ArgMatcher) -> bool {$/;"	P	implementation:Validator
is_new_arg	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    fn is_new_arg(&mut self, arg_os: &OsStr, needs_val_of: ParseResult) -> bool {$/;"	f
is_nil	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    pub fn is_nil(&self) -> bool {$/;"	P	implementation:Uuid
is_none	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn is_none(&self) -> bool {$/;"	P	implementation:Default
is_option	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^fn is_option(ty: &syn::Type, elem: fn(&syn::Type) -> bool) -> bool {$/;"	f
is_packed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    is_packed: bool,$/;"	m	struct:Container
is_packed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn is_packed(&self) -> bool {$/;"	P	implementation:Container
is_packed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^    is_packed: bool,$/;"	m	struct:Parameters
is_present	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matcher.rs	/^    pub fn is_present(&self, name: &str) -> bool {$/;"	P	implementation:ArgMatcher
is_present	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    pub fn is_present<S: AsRef<str>>(&self, name: S) -> bool {$/;"	P	implementation:ArgMatches
is_primitive_path	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^fn is_primitive_path(path: &syn::Path, primitive: &str) -> bool {$/;"	f
is_primitive_type	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^fn is_primitive_type(ty: &syn::Type, primitive: &str) -> bool {$/;"	f
is_proper_submap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn is_proper_submap<RM>(&self, other: RM) -> bool$/;"	f
is_proper_submap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn is_proper_submap<RM>(&self, other: RM) -> bool$/;"	f
is_proper_submap_by	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn is_proper_submap_by<B, RM, F>(&self, other: RM, cmp: F) -> bool$/;"	f
is_proper_submap_by	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn is_proper_submap_by<B, RM, F>(&self, other: RM, cmp: F) -> bool$/;"	f
is_proper_subset	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    pub fn is_proper_subset<RS>(&self, other: RS) -> bool$/;"	f
is_proper_subset	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    pub fn is_proper_subset<RS>(&self, other: RS) -> bool$/;"	f
is_reference	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^fn is_reference(ty: &syn::Type, elem: fn(&syn::Type) -> bool) -> bool {$/;"	f
is_remote	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^    is_remote: bool,$/;"	m	struct:Parameters
is_set	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    fn is_set(&self, _: ArgSettings) -> bool {$/;"	P	implementation:App
is_set	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn is_set(&self, s: AS) -> bool {$/;"	f
is_set	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn is_set(&self, ArgSettings) -> bool;$/;"	P	interface:AnyArg
is_set	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn is_set(&self, a: ArgSettings) -> bool {$/;"	f
is_set	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn is_set(&self, s: ArgSettings) -> bool {$/;"	P	implementation:Arg
is_set	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/base.rs	/^    pub fn is_set(&self, s: ArgSettings) -> bool {$/;"	P	implementation:Base
is_set	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^    fn is_set(&self, s: ArgSettings) -> bool {$/;"	P	implementation:FlagBuilder
is_set	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    fn is_set(&self, s: ArgSettings) -> bool {$/;"	P	implementation:OptBuilder
is_set	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    fn is_set(&self, s: ArgSettings) -> bool {$/;"	P	implementation:PosBuilder
is_single	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    pub(crate) fn is_single(&self) -> bool {$/;"	P	implementation:Node
is_size	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    fn is_size(&self) -> bool {$/;"	P	implementation:Size
is_slice_u8	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^fn is_slice_u8(ty: &syn::Type) -> bool {$/;"	f
is_some	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn is_some(self) -> bool {$/;"	P	implementation:Identifier
is_sorted	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/test.rs	/^pub(crate) fn is_sorted<A, I>(l: I) -> bool$/;"	f
is_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^fn is_str(ty: &syn::Type) -> bool {$/;"	f
is_submap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn is_submap<RM>(&self, other: RM) -> bool$/;"	f
is_submap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn is_submap<RM>(&self, other: RM) -> bool$/;"	f
is_submap_by	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn is_submap_by<B, RM, F>(&self, other: RM, mut cmp: F) -> bool$/;"	f
is_submap_by	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn is_submap_by<B, RM, F>(&self, other: RM, mut cmp: F) -> bool$/;"	f
is_subset	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    pub fn is_subset<RS>(&self, other: RS) -> bool$/;"	f
is_subset	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    pub fn is_subset<RS>(&self, other: RS) -> bool$/;"	f
is_term_dumb	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/fmt.rs	/^pub fn is_term_dumb() -> bool {$/;"	f
is_value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    fn is_value(&self) -> bool {$/;"	P	implementation:Entry
issue_105	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn issue_105() {$/;"	f	module:test
issue_107_split_off_causes_overflow	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn issue_107_split_off_causes_overflow() {$/;"	f	module:test
issue_116	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn issue_116() {$/;"	f	module:test
issue_131	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn issue_131() {$/;"	f	module:test
issue_55_append	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn issue_55_append() {$/;"	f	module:test
issue_55_back	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn issue_55_back() {$/;"	f	module:test
issue_55_fwd	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn issue_55_fwd() {$/;"	f	module:test
issue_60_drain_iterator_memory_corruption	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    fn issue_60_drain_iterator_memory_corruption() {$/;"	f	module:test
issue_67	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn issue_67() {$/;"	f	module:test
issue_70	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn issue_70() {$/;"	f	module:test
issue_74_simple_size	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn issue_74_simple_size() {$/;"	f	module:test
issue_77	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn issue_77() {$/;"	f	module:test
it	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    it: NodeDrain<A>,$/;"	m	struct:ConsumingIter
it	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    it: NodeIter<'a, (K, V)>,$/;"	m	struct:Iter
it	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    it: NodeIter<'a, (K, V)>,$/;"	m	struct:Keys
it	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    it: NodeIter<'a, (K, V)>,$/;"	m	struct:Values
it	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    it: NodeIterMut<'a, (K, V)>,$/;"	m	struct:IterMut
it	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    it: NodeDrain<Value<A>>,$/;"	m	struct:ConsumingIter
it	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    it: NodeIter<'a, Value<A>>,$/;"	m	struct:Iter
it	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    it: Iter<'a, K, V>,$/;"	m	struct:Keys
it	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    it: Iter<'a, K, V>,$/;"	m	struct:Values
it	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    it: NodeDiffIter<'a, (K, V)>,$/;"	m	struct:DiffIter
it	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    it: RangedIter<'a, (K, V)>,$/;"	m	struct:Iter
it	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    it: ConsumingNodeIter<Value<A>>,$/;"	m	struct:ConsumingIter
it	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    it: NodeDiffIter<'a, Value<A>>,$/;"	m	struct:DiffIter
it	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    it: NodeIter<'a, Value<A>>,$/;"	m	struct:Iter
it	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    it: NodeIter<'a, Value<A>>,$/;"	m	struct:RangedIter
iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matcher.rs	/^    pub fn iter(&self) -> Iter<&str, MatchedArg> {$/;"	P	implementation:ArgMatcher
iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    iter: Map<Iter<'a, OsString>, fn(&'a OsString) -> &'a OsStr>,$/;"	m	struct:OsValues
iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    iter: Map<Iter<'a, OsString>, fn(&'a OsString) -> &'a str>,$/;"	m	struct:Values
iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    iter: Map<Iter<'a, usize>, fn(&'a usize) -> usize>,$/;"	m	struct:Indices
iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/map.rs	/^        pub fn iter(&self) -> Iter<V> {$/;"	P	implementation:vec_map::VecMap
iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn iter(&self) -> Iter<'_, K, V> {$/;"	P	implementation:HashMap
iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    pub fn iter(&self) -> Iter<'_, A> {$/;"	P	implementation:HashSet
iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/lib.rs	/^pub mod iter;$/;"	n
iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn iter(&self) -> Iter<'_, K, V> {$/;"	f
iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    pub fn iter(&self) -> Iter<'_, A> {$/;"	f
iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn iter(&self) -> Iter<'_, A> {$/;"	P	implementation:Vector
iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    iter: iter::Fuse<I>,$/;"	m	struct:MapDeserializer
iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    iter: iter::Fuse<I>,$/;"	m	struct:SeqDeserializer
iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        iter: <&'a [(Content<'de>, Content<'de>)] as IntoIterator>::IntoIter,$/;"	m	struct:content::MapRefDeserializer
iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        iter: <&'a [Content<'de>] as IntoIterator>::IntoIter,$/;"	m	struct:content::SeqRefDeserializer
iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        iter: <Vec<(Content<'de>, Content<'de>)> as IntoIterator>::IntoIter,$/;"	m	struct:content::MapDeserializer
iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        iter: <Vec<Content<'de>> as IntoIterator>::IntoIter,$/;"	m	struct:content::SeqDeserializer
iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    iter: slice::Iter<'a, Option<(Content<'de>, Content<'de>)>>,$/;"	m	struct:FlatMapAccess
iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    iter: slice::IterMut<'a, Option<(Content<'de>, Content<'de>)>>,$/;"	m	struct:FlatInternallyTaggedAccess
iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    iter: slice::IterMut<'a, Option<(Content<'de>, Content<'de>)>>,$/;"	m	struct:FlatStructAccess
iter_mut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn iter_mut(&mut self) -> IterMut<'_, K, V> {$/;"	f
iter_mut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn iter_mut(&mut self) -> IterMut<'_, A> {$/;"	P	implementation:Vector
iterates_in_order	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn iterates_in_order() {$/;"	f	module:test
iterator_len_hint	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^fn iterator_len_hint<I>(iter: &I) -> Option<usize>$/;"	f
join_branches	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    pub(crate) fn join_branches(self, pool: &RRBPool<A>, right: Self, level: usize) -> Self {$/;"	P	implementation:Node
join_dense	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    pub(crate) fn join_dense(pool: &RRBPool<A>, left: Self, right: Self) -> Self {$/;"	P	implementation:Node
key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    key: K,$/;"	m	struct:OccupiedEntry
key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    key: K,$/;"	m	struct:VacantEntry
key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn key(&self) -> &K {$/;"	f
key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    key: K,$/;"	m	struct:OccupiedEntry
key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    key: K,$/;"	m	struct:VacantEntry
key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn key(&self) -> &K {$/;"	f
key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        key: Option<Content>,$/;"	m	struct:content::SerializeMap
keys	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn keys(&self) -> Keys<'_, K, V> {$/;"	P	implementation:HashMap
keys	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    keys: Chunk<A, NodeSize>,$/;"	m	struct:Node
keys	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn keys(&self) -> Keys<'_, K, V> {$/;"	f
kind	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    pub kind: ErrorKind,$/;"	m	struct:Error
large_map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn large_map() {$/;"	f	module:test
large_vector_focus	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn large_vector_focus() {$/;"	f	module:test
large_vector_focus_mut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn large_vector_focus_mut() {$/;"	f	module:test
last	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn last(self, l: bool) -> Self {$/;"	P	implementation:Arg
last	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn last(&self) -> Option<&A> {$/;"	P	implementation:Vector
leaf_pool_size	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/pool.rs	/^    pub fn leaf_pool_size(&self) -> usize {$/;"	P	implementation:RRBPool
leaves	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn leaves(&self) -> Chunks<'_, A> {$/;"	P	implementation:Vector
leaves_mut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn leaves_mut(&mut self) -> ChunksMut<'_, A> {$/;"	P	implementation:Vector
len	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/map.rs	/^        pub fn len(&self) -> usize {$/;"	P	implementation:vec_map::VecMap
len	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn len(&self) -> usize {$/;"	P	implementation:HashMap
len	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    pub fn len(&self) -> usize {$/;"	P	implementation:HashSet
len	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    fn len(&self) -> usize {$/;"	P	implementation:CollisionNode
len	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    fn len(&self) -> usize {$/;"	P	implementation:Node
len	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    fn len(&self) -> usize {$/;"	P	implementation:Entry
len	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    pub(crate) fn len(&self) -> usize {$/;"	P	implementation:Node
len	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn len(&self) -> usize {$/;"	P	implementation:OrdMap
len	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    pub fn len(&self) -> usize {$/;"	P	implementation:OrdSet
len	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    fn len(&self) -> usize {$/;"	f
len	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    pub fn len(&self) -> usize {$/;"	f
len	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn len(&self) -> usize {$/;"	P	implementation:Vector
len	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/rayon.rs	/^    fn len(&self) -> usize {$/;"	f
len	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^        len: usize,$/;"	m	struct:private::SeedTupleVariant
len_matches_any	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/parser/mod.rs	/^fn len_matches_any(len: usize, crits: &[usize]) -> bool {$/;"	f
len_matches_range	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/parser/mod.rs	/^fn len_matches_range(len: usize, min: usize, max: usize) -> bool {$/;"	f
length	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    length: usize,$/;"	m	struct:RRB
lib	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/lib.rs	/^mod lib {$/;"	n
lib_test	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/lib.rs	/^mod lib_test {$/;"	n
lifetime	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    lifetime: PhantomData<&'de ()>,$/;"	m	struct:MapDeserializer
linear_search_by	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/util.rs	/^pub(crate) fn linear_search_by<'a, A, I, F>(iterable: I, mut cmp: F) -> Result<usize, usize>$/;"	f
load_csv	/home/darrion/projects/ClearHeadToDo/src/storage.rs	/^pub fn load_csv(task_list: &TaskList, file_name: &str) -> Result<String, Box<dyn Error>> {$/;"	f
load_from_csv_bad_completion_status_test	/home/darrion/projects/ClearHeadToDo/src/storage.rs	/^    fn load_from_csv_bad_completion_status_test() {$/;"	f	module:tests
load_from_csv_bad_file_test	/home/darrion/projects/ClearHeadToDo/src/storage.rs	/^    fn load_from_csv_bad_file_test() {$/;"	f	module:tests
load_from_csv_bad_id_test	/home/darrion/projects/ClearHeadToDo/src/storage.rs	/^    fn load_from_csv_bad_id_test() {$/;"	f	module:tests
load_from_csv_bad_priority_test	/home/darrion/projects/ClearHeadToDo/src/storage.rs	/^    fn load_from_csv_bad_priority_test() {$/;"	f	module:tests
load_from_csv_sucessful_test	/home/darrion/projects/ClearHeadToDo/src/storage.rs	/^    fn load_from_csv_sucessful_test() {$/;"	f	module:tests
load_tasks_from_csv	/home/darrion/projects/ClearHeadToDo/src/storage.rs	/^pub fn load_tasks_from_csv(file_name: &str) -> Result<TaskList, Box<dyn Error>> {$/;"	f
load_to_csv_successful_test	/home/darrion/projects/ClearHeadToDo/src/storage.rs	/^    fn load_to_csv_successful_test() -> Result<(), Box<dyn Error>> {$/;"	f	module:tests
load_yaml	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs	/^macro_rules! load_yaml {$/;"	M
local	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^    local: syn::Ident,$/;"	m	struct:Parameters
lock	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/sync.rs	/^        lock: Arc<Mutex<A>>,$/;"	m	struct:lock::Lock
lock	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/sync.rs	/^        lock: Rc<RefCell<A>>,$/;"	m	struct:lock::Lock
lock	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/sync.rs	/^        pub(crate) fn lock(&mut self) -> Option<MutexGuard<'_, A>> {$/;"	P	implementation:lock::Lock
lock	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/sync.rs	/^        pub(crate) fn lock(&mut self) -> Option<RefMut<'_, A>> {$/;"	P	implementation:lock::Lock
lock	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/sync.rs	/^mod lock {$/;"	n
logical_range	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    fn logical_range(&self, range: &Range<usize>) -> Range<usize> {$/;"	f
long	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^    fn long<'b, 'c>(&mut self, arg: &ArgWithDisplay<'b, 'c>) -> io::Result<()> {$/;"	P	implementation:Help
long	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    fn long(&self) -> Option<&'e str> {$/;"	P	implementation:App
long	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn long(&self) -> Option<&'e str> {$/;"	f
long	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn long(&self) -> Option<&'e str>;$/;"	P	interface:AnyArg
long	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn long(mut self, l: &'b str) -> Self {$/;"	P	implementation:Arg
long	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^    fn long(&self) -> Option<&'e str> {$/;"	P	implementation:FlagBuilder
long	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    fn long(&self) -> Option<&'e str> {$/;"	P	implementation:OptBuilder
long	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    fn long(&self) -> Option<&'e str> {$/;"	P	implementation:PosBuilder
long	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/switched.rs	/^    pub long: Option<&'b str>,$/;"	m	struct:Switched
long	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn long(&mut self, arg: &mut Arg<'a, 'a>) {$/;"	P	implementation:UsageParser
long_about	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/meta.rs	/^    pub long_about: Option<&'b str>,$/;"	m	struct:AppMeta
long_about	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn long_about<S: Into<&'b str>>(mut self, about: S) -> Self {$/;"	P	implementation:App
long_end	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^fn long_end(b: u8) -> bool {$/;"	f
long_help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    fn long_help(&self) -> Option<&'e str> {$/;"	P	implementation:App
long_help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn long_help(&self) -> Option<&'e str> {$/;"	f
long_help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn long_help(&self) -> Option<&'e str>;$/;"	P	interface:AnyArg
long_help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn long_help(mut self, h: &'b str) -> Self {$/;"	P	implementation:Arg
long_help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/base.rs	/^    pub long_help: Option<&'b str>,$/;"	m	struct:Base
long_help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^    fn long_help(&self) -> Option<&'e str> {$/;"	P	implementation:FlagBuilder
long_help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    fn long_help(&self) -> Option<&'e str> {$/;"	P	implementation:OptBuilder
long_help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    fn long_help(&self) -> Option<&'e str> {$/;"	P	implementation:PosBuilder
long_version	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/meta.rs	/^    pub long_version: Option<&'b str>,$/;"	m	struct:AppMeta
long_version	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn long_version<S: Into<&'b str>>(mut self, ver: S) -> Self {$/;"	P	implementation:App
longest	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^    longest: usize,$/;"	m	struct:Help
longest_filter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    fn longest_filter(&self) -> bool {$/;"	P	implementation:App
longest_filter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn longest_filter(&self) -> bool {$/;"	f
longest_filter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn longest_filter(&self) -> bool;$/;"	P	interface:AnyArg
longest_filter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^    fn longest_filter(&self) -> bool {$/;"	P	implementation:FlagBuilder
longest_filter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    fn longest_filter(&self) -> bool {$/;"	P	implementation:OptBuilder
longest_filter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    fn longest_filter(&self) -> bool {$/;"	P	implementation:PosBuilder
longs	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs	/^macro_rules! longs {$/;"	M
lookup	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    pub(crate) fn lookup<BK>(&self, key: &BK) -> Option<&A>$/;"	P	implementation:Node
lookup_chunk	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    pub(crate) fn lookup_chunk($/;"	P	implementation:Node
lookup_chunk_mut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    pub(crate) fn lookup_chunk_mut($/;"	P	implementation:Node
lookup_mut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    pub(crate) fn lookup_mut<BK>(&mut self, pool: &Pool<Node<A>>, key: &BK) -> Option<&mut A>$/;"	P	implementation:Node
lookup_next	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    pub(crate) fn lookup_next<'a, BK>(&'a self, key: &BK) -> Option<&A>$/;"	P	implementation:Node
lookup_next_mut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    pub(crate) fn lookup_next_mut<'a, BK>($/;"	P	implementation:Node
lookup_prev	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    pub(crate) fn lookup_prev<'a, BK>(&'a self, key: &BK) -> Option<&A>$/;"	P	implementation:Node
lookup_prev_mut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    pub(crate) fn lookup_prev_mut<'a, BK>($/;"	P	implementation:Node
macro_allows_trailing_comma	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn macro_allows_trailing_comma() {$/;"	f	module:test
macro_allows_trailing_comma	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    fn macro_allows_trailing_comma() {$/;"	f	module:test
macro_allows_trailing_comma	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn macro_allows_trailing_comma() {$/;"	f	module:test
macros	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/mod.rs	/^mod macros;$/;"	n
macros	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/mod.rs	/^mod macros;$/;"	n
macros	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/lib.rs	/^mod macros;$/;"	n
macros	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/lib.rs	/^mod macros;$/;"	n
macros	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/mod.rs	/^mod macros;$/;"	n
main	/home/darrion/projects/ClearHeadToDo/src/main.rs	/^fn main() {$/;"	f
make_mut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^    pub(crate) fn make_mut<'a>(_pool: &Pool<A>, this: &'a mut Self) -> &'a mut A$/;"	P	implementation:Arc
make_mut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^    pub(crate) fn make_mut<'a>(_pool: &Pool<A>, this: &'a mut Self) -> &'a mut A$/;"	P	implementation:Rc
map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/lib.rs	/^mod map;$/;"	n
map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    map: &'a mut HashMap<K, V, S>,$/;"	m	struct:OccupiedEntry
map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    map: &'a mut HashMap<K, V, S>,$/;"	m	struct:VacantEntry
map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/mod.rs	/^pub mod map;$/;"	n
map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    map: &'a mut OrdMap<K, V>,$/;"	m	struct:OccupiedEntry
map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    map: &'a mut OrdMap<K, V>,$/;"	m	struct:VacantEntry
map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/mod.rs	/^pub mod map;$/;"	n
map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^        map: A,$/;"	m	struct:private::MapAsEnum
map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    map: A,$/;"	m	struct:MapAccessDeserializer
map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        map: M,$/;"	m	struct:content::SerializeStructVariantAsMapValue
map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        map: M,$/;"	m	struct:content::SerializeTupleVariantAsMapValue
map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    map: &'a mut M,$/;"	m	struct:FlatMapSerializeStructVariantAsMapValue
map_as_enum	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    pub fn map_as_enum<A>(map: A) -> MapAsEnum<A> {$/;"	f	module:private
map_impl	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^macro_rules! map_impl {$/;"	M
map_impl	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^macro_rules! map_impl {$/;"	M
mark_complete	/home/darrion/projects/ClearHeadToDo/src/task.rs	/^    pub fn mark_complete(&self) -> Result<Task, Box<dyn Error>> {$/;"	P	implementation:Task
mark_has_flatten	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn mark_has_flatten(&mut self) {$/;"	P	implementation:Container
mark_transparent	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn mark_transparent(&mut self) {$/;"	P	implementation:Field
marker	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^            marker: PhantomData<T>,$/;"	m	struct:deserialize::VecVisitor
marker	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    marker: PhantomData<A>,$/;"	m	struct:ArrayVisitor
marker	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    marker: PhantomData<T>,$/;"	m	struct:OptionVisitor
marker	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    marker: PhantomData<T>,$/;"	m	struct:PhantomDataVisitor
marker	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^        marker: PhantomData<E>,$/;"	m	struct:private::UnitOnly
marker	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    marker: PhantomData<E>,$/;"	m	struct:BorrowedBytesDeserializer
marker	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    marker: PhantomData<E>,$/;"	m	struct:BorrowedStrDeserializer
marker	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    marker: PhantomData<E>,$/;"	m	struct:CowStrDeserializer
marker	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    marker: PhantomData<E>,$/;"	m	struct:NeverDeserializer
marker	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    marker: PhantomData<E>,$/;"	m	struct:SeqDeserializer
marker	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    marker: PhantomData<E>,$/;"	m	struct:StrDeserializer
marker	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    marker: PhantomData<E>,$/;"	m	struct:StringDeserializer
marker	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    marker: PhantomData<E>,$/;"	m	struct:U32Deserializer
marker	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    marker: PhantomData<E>,$/;"	m	struct:UnitDeserializer
marker	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    marker: PhantomData<E>,$/;"	m	struct:BytesDeserializer
marker	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    marker: PhantomData<E>,$/;"	m	struct:StrDeserializer
mask	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^fn mask(hash: HashBits, shift: usize) -> HashBits {$/;"	f
match_string_keys_with_string_slices	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn match_string_keys_with_string_slices() {$/;"	f	module:test
match_string_keys_with_string_slices	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn match_string_keys_with_string_slices() {$/;"	f	module:test
match_strings_with_string_slices	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    fn match_strings_with_string_slices() {$/;"	f	module:test
match_strings_with_string_slices	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    fn match_strings_with_string_slices() {$/;"	f	module:test
matched_arg	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/mod.rs	/^mod matched_arg;$/;"	n
matches	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/subcommand.rs	/^    pub matches: ArgMatches<'a>,$/;"	m	struct:SubCommand
max	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    pub(crate) fn max(&self) -> Option<&A> {$/;"	P	implementation:Node
max_term_width	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn max_term_width(mut self, w: usize) -> Self {$/;"	P	implementation:App
max_vals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    fn max_vals(&self) -> Option<u64> {$/;"	P	implementation:App
max_vals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn max_vals(&self) -> Option<u64> {$/;"	f
max_vals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn max_vals(&self) -> Option<u64>;$/;"	P	interface:AnyArg
max_vals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^    fn max_vals(&self) -> Option<u64> {$/;"	P	implementation:FlagBuilder
max_vals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    fn max_vals(&self) -> Option<u64> {$/;"	P	implementation:OptBuilder
max_vals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    fn max_vals(&self) -> Option<u64> {$/;"	P	implementation:PosBuilder
max_vals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/valued.rs	/^    pub max_vals: Option<u64>,$/;"	m	struct:Valued
max_values	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn max_values(mut self, qty: u64) -> Self {$/;"	P	implementation:Arg
max_w	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/meta.rs	/^    pub max_w: Option<usize>,$/;"	m	struct:AppMeta
member	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ast.rs	/^    pub member: syn::Member,$/;"	m	struct:Field
member_message	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/check.rs	/^fn member_message(member: &Member) -> String {$/;"	f
merge	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    fn merge(middle: A, left: Node<A>, mut right: Node<A>) -> Node<A> {$/;"	P	implementation:Node
merge	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    pub(crate) fn merge(pool: &RRBPool<A>, mut left: Self, mut right: Self, level: usize) -> Sel/;"	P	implementation:Node
merge_leaves	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    fn merge_leaves(pool: &RRBPool<A>, mut left: Self, mut right: Self) -> Self {$/;"	P	implementation:Node
merge_rebalance	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    fn merge_rebalance($/;"	P	implementation:Node
merge_values	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    fn merge_values($/;"	P	implementation:Node
message	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    pub message: String,$/;"	m	struct:Error
meta	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^mod meta;$/;"	n
meta	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub meta: AppMeta<'b>,$/;"	m	struct:Parser
middle	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    middle: Ref<Node<A>>,$/;"	m	struct:RRB
middle_level	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    middle_level: usize,$/;"	m	struct:RRB
middle_range	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    middle_range: Range<usize>,$/;"	m	struct:TreeFocus
middle_range	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    middle_range: Range<usize>,$/;"	m	struct:TreeFocusMut
min	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    pub(crate) fn min(&self) -> Option<&A> {$/;"	P	implementation:Node
min_vals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    fn min_vals(&self) -> Option<u64> {$/;"	P	implementation:App
min_vals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn min_vals(&self) -> Option<u64> {$/;"	f
min_vals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn min_vals(&self) -> Option<u64>;$/;"	P	interface:AnyArg
min_vals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^    fn min_vals(&self) -> Option<u64> {$/;"	P	implementation:FlagBuilder
min_vals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    fn min_vals(&self) -> Option<u64> {$/;"	P	implementation:OptBuilder
min_vals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    fn min_vals(&self) -> Option<u64> {$/;"	P	implementation:PosBuilder
min_vals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/valued.rs	/^    pub min_vals: Option<u64>,$/;"	m	struct:Valued
min_values	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn min_values(mut self, qty: u64) -> Self {$/;"	P	implementation:Arg
missing_field	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>$/;"	f
missing_required_argument	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    pub fn missing_required_argument<R, U>(required: R, usage: U, color: ColorWhen) -> Self$/;"	P	implementation:Error
missing_required_error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/validator.rs	/^    fn missing_required_error(&self, matcher: &ArgMatcher, extra: Option<&str>) -> ClapResult<()/;"	P	implementation:Validator
missing_subcommand	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    pub fn missing_subcommand<N, U>(name: N, usage: U, color: ColorWhen) -> Self$/;"	P	implementation:Error
more_help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/meta.rs	/^    pub more_help: Option<&'b str>,$/;"	m	struct:AppMeta
mul	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    fn mul(self, other: Self) -> Self::Output {$/;"	f
mul	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    fn mul(self, other: Self) -> Self::Output {$/;"	P	implementation:OrdSet
multiple	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn multiple(self, multi: bool) -> Self {$/;"	P	implementation:Arg
multiple	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/group.rs	/^    pub fn multiple(mut self, m: bool) -> Self {$/;"	P	implementation:ArgGroup
multiple	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/group.rs	/^    pub multiple: bool,$/;"	m	struct:ArgGroup
multiple	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn multiple(&mut self, arg: &mut Arg) {$/;"	P	implementation:UsageParser
multiple_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    pub fn multiple_str(&self) -> &str {$/;"	P	implementation:PosBuilder
mut_if	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^fn mut_if(is_mut: bool) -> Option<TokenStream> {$/;"	f
name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/meta.rs	/^    pub name: String,$/;"	m	struct:AppMeta
name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    fn name(&self) -> &'n str {$/;"	P	implementation:App
name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn name<S: Into<String>>(mut self, name: S) -> Self {$/;"	P	implementation:App
name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn name(&self) -> &'n str {$/;"	f
name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn name(&self) -> &'n str;$/;"	P	interface:AnyArg
name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/base.rs	/^    pub name: &'a str,$/;"	m	struct:Base
name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^    fn name(&self) -> &'n str {$/;"	P	implementation:FlagBuilder
name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    fn name(&self) -> &'n str {$/;"	P	implementation:OptBuilder
name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    fn name(&self) -> &'n str {$/;"	P	implementation:PosBuilder
name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/group.rs	/^    pub name: &'a str,$/;"	m	struct:ArgGroup
name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/subcommand.rs	/^    pub name: String,$/;"	m	struct:SubCommand
name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn name(&mut self, arg: &mut Arg<'a, 'a>) {$/;"	P	implementation:UsageParser
name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        name: &'static str,$/;"	m	struct:content::TagOrContentVisitor
name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        name: &'static str,$/;"	m	struct:content::SerializeStruct
name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        name: &'static str,$/;"	m	struct:content::SerializeStructVariant
name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        name: &'static str,$/;"	m	struct:content::SerializeStructVariantAsMapValue
name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        name: &'static str,$/;"	m	struct:content::SerializeTupleStruct
name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        name: &'static str,$/;"	m	struct:content::SerializeTupleVariant
name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        name: &'static str,$/;"	m	struct:content::SerializeTupleVariantAsMapValue
name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    name: &'static str,$/;"	m	struct:FlatMapSerializeStructVariantAsMapValue
name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    name: Name,$/;"	m	struct:Container
name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    name: Name,$/;"	m	struct:Field
name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    name: Name,$/;"	m	struct:Variant
name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    name: Symbol,$/;"	m	struct:Attr
name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    name: Symbol,$/;"	m	struct:VecAttr
name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn name(&self) -> &Name {$/;"	P	implementation:Container
name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn name(&self) -> &Name {$/;"	P	implementation:Field
name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn name(&self) -> &Name {$/;"	P	implementation:Variant
name	/home/darrion/projects/ClearHeadToDo/src/task.rs	/^    pub name: String,$/;"	m	struct:Task
name_end	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^fn name_end(b: u8) -> bool {$/;"	f
name_no_brackets	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    pub fn name_no_brackets(&self) -> Cow<str> {$/;"	P	implementation:PosBuilder
names	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    names: &'static [&'static str],$/;"	m	struct:OneOf
narrow	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    fn narrow(self, mut view: Range<usize>) -> Self {$/;"	f
narrow	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    pub fn narrow<R>(self, range: R) -> Self$/;"	f
needs_deserialize_bound	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn needs_deserialize_bound(field: &attr::Field, variant: Option<&attr::Variant>) -> bool {$/;"	f
needs_flags_tag	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/usage.rs	/^fn needs_flags_tag(p: &Parser) -> bool {$/;"	f
needs_more_vals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matcher.rs	/^    pub fn needs_more_vals<'b, A>(&self, o: &A) -> bool$/;"	P	implementation:ArgMatcher
needs_promotion	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn needs_promotion(&self) -> bool {$/;"	P	implementation:Vector
needs_serialize_bound	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^fn needs_serialize_bound(field: &attr::Field, variant: Option<&attr::Variant>) -> bool {$/;"	f
never	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    never: !,$/;"	m	struct:NeverDeserializer
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^    pub fn new($/;"	P	implementation:Help
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/meta.rs	/^    pub fn new() -> Self {$/;"	P	implementation:AppMeta
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn new<S: Into<String>>(n: S) -> Self {$/;"	P	implementation:App
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    pub fn new() -> Self {$/;"	P	implementation:AppFlags
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/validator.rs	/^    pub fn new(p: &'z mut Parser<'a, 'b>) -> Self {$/;"	P	implementation:Validator
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/base.rs	/^    pub fn new(name: &'n str) -> Self {$/;"	P	implementation:Base
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^    pub fn new(name: &'n str) -> Self {$/;"	P	implementation:FlagBuilder
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    pub fn new(name: &'n str) -> Self {$/;"	P	implementation:OptBuilder
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    pub fn new(name: &'n str, idx: u64) -> Self {$/;"	P	implementation:PosBuilder
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matcher.rs	/^    pub fn new() -> Self {$/;"	P	implementation:ArgMatcher
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    pub fn new() -> Self {$/;"	P	implementation:ArgMatches
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/matched_arg.rs	/^    pub fn new() -> Self {$/;"	P	implementation:MatchedArg
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/settings.rs	/^    pub fn new() -> Self {$/;"	P	implementation:ArgFlags
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/bash.rs	/^    pub fn new(p: &'b Parser<'a, 'b>) -> Self {$/;"	P	implementation:BashGen
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/elvish.rs	/^    pub fn new(p: &'b Parser<'a, 'b>) -> Self {$/;"	P	implementation:ElvishGen
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/fish.rs	/^    pub fn new(p: &'b Parser<'a, 'b>) -> Self {$/;"	P	implementation:FishGen
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/mod.rs	/^    pub fn new(p: &'b Parser<'a, 'b>) -> Self {$/;"	P	implementation:ComplGen
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/powershell.rs	/^    pub fn new(p: &'b Parser<'a, 'b>) -> Self {$/;"	P	implementation:PowerShellGen
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/zsh.rs	/^    pub fn new(p: &'b Parser<'a, 'b>) -> Self {$/;"	P	implementation:ZshGen
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/fmt.rs	/^    pub fn new(option: ColorizerOption) -> Colorizer {$/;"	P	implementation:Colorizer
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/map.rs	/^        pub fn new() -> Self {$/;"	P	implementation:vec_map::VecMap
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn new(usage: &'a str) -> Self {$/;"	P	implementation:UsageParser
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^    pub(crate) fn new(_pool: &Pool<A>, value: A) -> Self {$/;"	P	implementation:Arc
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^    pub(crate) fn new(_pool: &Pool<A>, value: A) -> Self {$/;"	P	implementation:Rc
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^    pub(crate) fn new(_size: usize) -> Self {$/;"	P	implementation:Pool
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn new() -> Self {$/;"	P	implementation:HashMap
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    pub fn new() -> Self {$/;"	P	implementation:HashSet
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    pub(crate) fn new(old: &'a Node<A>, new: &'a Node<A>) -> Self {$/;"	P	implementation:DiffIter
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    pub(crate) fn new(root: &Node<A>, total: usize) -> Self {$/;"	P	implementation:ConsumingIter
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    pub(crate) fn new<R, BK>(root: &'a Node<A>, size: usize, range: R) -> Self$/;"	P	implementation:Iter
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    fn new(hash: HashBits, value1: A, value2: A) -> Self {$/;"	P	implementation:CollisionNode
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    pub(crate) fn new() -> Self {$/;"	P	implementation:Node
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    pub(crate) fn new(pool: &Pool<Node<A>>, root: &'a mut Node<A>, size: usize) -> Self {$/;"	f
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    pub(crate) fn new(pool: &Pool<Node<A>>, root: PoolRef<Node<A>>, size: usize) -> Self {$/;"	f
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    pub(crate) fn new(root: &'a Node<A>, size: usize) -> Self {$/;"	f
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    pub(crate) fn new() -> Self {$/;"	P	implementation:Node
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn new() -> Self {$/;"	P	implementation:OrdMap
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    pub fn new() -> Self {$/;"	P	implementation:OrdSet
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ser.rs	/^    pub(crate) fn new() -> MapVisitor<'de, S, K, V> {$/;"	f
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ser.rs	/^    pub(crate) fn new() -> SeqVisitor<'de, S, A> {$/;"	f
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/sync.rs	/^        pub(crate) fn new(value: A) -> Self {$/;"	P	implementation:lock::Lock
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/test.rs	/^    pub(crate) fn new(seed: u64) -> Self {$/;"	P	implementation:MetroHashBuilder
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    fn new(tree: &'a mut RRB<A>) -> Self {$/;"	f
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    fn new(tree: &RRB<A>) -> Self {$/;"	f
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    pub fn new(vector: &'a Vector<A>) -> Self {$/;"	f
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    pub fn new(vector: &'a mut Vector<A>) -> Self {$/;"	f
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn new(pool: &RRBPool<A>) -> Self {$/;"	P	implementation:RRB
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn new(seq: &'a Vector<A>) -> Self {$/;"	P	implementation:Chunks
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn new(seq: &'a Vector<A>) -> Self {$/;"	P	implementation:Iter
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn new(seq: &'a mut Vector<A>) -> Self {$/;"	P	implementation:ChunksMut
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn new(seq: &'a mut Vector<A>) -> Self {$/;"	f
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn new(vector: Vector<A>) -> Self {$/;"	P	implementation:ConsumingIter
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn new() -> Self {$/;"	P	implementation:Vector
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/pool.rs	/^    pub fn new(size: usize) -> Self {$/;"	P	implementation:RRBPool
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn new() -> Self {$/;"	P	implementation:ArrayVisitor
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    pub fn new(iter: I) -> Self {$/;"	f
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    pub fn new(map: A) -> Self {$/;"	P	implementation:MapAccessDeserializer
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    pub fn new(seq: A) -> Self {$/;"	P	implementation:SeqAccessDeserializer
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    pub fn new(value: &'de [u8]) -> BorrowedBytesDeserializer<'de, E> {$/;"	P	implementation:BorrowedBytesDeserializer
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    pub fn new(value: &'de str) -> BorrowedStrDeserializer<'de, E> {$/;"	P	implementation:BorrowedStrDeserializer
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn new() -> Self {$/;"	P	implementation:content::ContentVisitor
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn new(map: &'a [(Content<'de>, Content<'de>)]) -> Self {$/;"	f	module:content
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn new(map: Vec<(Content<'de>, Content<'de>)>) -> Self {$/;"	f	module:content
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn new(name: &'static str) -> Self {$/;"	P	implementation:content::TagOrContentVisitor
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn new(slice: &'a [Content<'de>]) -> Self {$/;"	f	module:content
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn new(vec: Vec<Content<'de>>) -> Self {$/;"	f	module:content
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        pub fn new(content: &'a Content<'de>) -> Self {$/;"	P	implementation:content::ContentRefDeserializer
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        pub fn new(content: Content<'de>) -> Self {$/;"	P	implementation:content::ContentDeserializer
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        pub fn new(name: &'static str) -> Self {$/;"	P	implementation:content::TaggedContentVisitor
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        pub fn new(type_name: &'a str, variant_name: &'a str) -> Self {$/;"	P	implementation:content::InternallyTaggedUnitVisitor
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        pub fn new(type_name: &'a str, variant_name: &'a str) -> Self {$/;"	P	implementation:content::UntaggedUnitVisitor
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        pub fn new(variant: Content<'de>, value: Option<Content<'de>>) -> EnumDeserializer<'de, /;"	f	module:content
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    fn new($/;"	P	implementation:FlatMapAccess
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    fn new($/;"	P	implementation:FlatStructAccess
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        pub fn new() -> Self {$/;"	P	implementation:content::ContentSerializer
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        pub fn new(map: M, name: &'static str, len: usize) -> Self {$/;"	P	implementation:content::SerializeStructVariantAsMapValue
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        pub fn new(map: M, name: &'static str, len: usize) -> Self {$/;"	P	implementation:content::SerializeTupleVariantAsMapValue
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn new(map: &'a mut M, name: &'static str) -> FlatMapSerializeStructVariantAsMapValue<'a, M>/;"	f
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^    fn new(cont: &Container) -> Self {$/;"	P	implementation:Parameters
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ctxt.rs	/^    pub fn new() -> Self {$/;"	P	implementation:Ctxt
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^    fn new(cont: &Container) -> Self {$/;"	P	implementation:Parameters
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/error.rs	/^    pub(crate) const fn new(expected: usize, found: usize) -> Self {$/;"	P	implementation:Error
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/test_util.rs	/^pub const fn new() -> Uuid {$/;"	f
new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v1.rs	/^    pub const fn new(count: u16) -> Self {$/;"	P	implementation:Context
new2	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/test_util.rs	/^pub const fn new2() -> Uuid {$/;"	f
new_from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn new_from<K1, V1>(&self) -> HashMap<K1, V1, S>$/;"	P	implementation:HashMap
new_from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    pub fn new_from<A1>(&self) -> HashSet<A1, S>$/;"	P	implementation:HashSet
new_from_split	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    pub(crate) fn new_from_split($/;"	P	implementation:Node
new_stack	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    new_stack: Vec<IterItem<'a, A>>,$/;"	m	struct:DiffIter
new_v1	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v1.rs	/^    pub fn new_v1(ts: Timestamp, node_id: &[u8]) -> Result<Self, crate::Error> {$/;"	P	implementation:Uuid
new_v3	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v3.rs	/^    pub fn new_v3(namespace: &Uuid, name: &[u8]) -> Uuid {$/;"	P	implementation:Uuid
new_v4	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v4.rs	/^    pub fn new_v4() -> Uuid {$/;"	P	implementation:Uuid
new_v5	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v5.rs	/^    pub fn new_v5(namespace: &Uuid, name: &[u8]) -> Uuid {$/;"	P	implementation:Uuid
newtype_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn newtype_variant<T>(self) -> Result<T, Self::Error>$/;"	P	interface:VariantAccess
newtype_variant_seed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn newtype_variant_seed<T>(self, seed: T) -> Result<T::Value, Self::Error>$/;"	P	interface:VariantAccess
newtype_variant_seed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^        fn newtype_variant_seed<T>(mut self, seed: T) -> Result<T::Value, Self::Error>$/;"	f	module:private
newtype_variant_seed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^        fn newtype_variant_seed<T>(self, _seed: T) -> Result<T::Value, Self::Error>$/;"	f	module:private
newtype_variant_seed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn newtype_variant_seed<T>(self, seed: T) -> Result<T::Value, E>$/;"	f	module:content
next	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    fn next(&mut self) -> Option<&'a OsStr> {$/;"	P	implementation:OsValues
next	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    fn next(&mut self) -> Option<&'a str> {$/;"	P	implementation:Values
next	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    fn next(&mut self) -> Option<usize> {$/;"	P	implementation:Indices
next	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/map.rs	/^        fn next(&mut self) -> Option<Self::Item> {$/;"	P	implementation:vec_map::Iter
next	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/osstringext.rs	/^    fn next(&mut self) -> Option<&'a OsStr> {$/;"	P	implementation:OsSplit
next	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	P	implementation:Iter
next	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	P	implementation:Keys
next	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	P	implementation:Values
next	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	f
next	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	f
next	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	P	implementation:Iter
next	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	f
next	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	f
next	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	f
next	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	f
next	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	P	implementation:Chunks
next	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	P	implementation:ChunksMut
next	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	P	implementation:ConsumingIter
next	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	P	implementation:Iter
next	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	f
next_back	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    fn next_back(&mut self) -> Option<&'a OsStr> {$/;"	P	implementation:OsValues
next_back	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    fn next_back(&mut self) -> Option<&'a str> {$/;"	P	implementation:Values
next_back	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    fn next_back(&mut self) -> Option<usize> {$/;"	P	implementation:Indices
next_back	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/map.rs	/^        fn next_back(&mut self) -> Option<Self::Item> {$/;"	P	implementation:vec_map::Iter
next_back	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    fn next_back(&mut self) -> Option<Self::Item> {$/;"	P	implementation:Iter
next_back	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    fn next_back(&mut self) -> Option<Self::Item> {$/;"	f
next_back	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn next_back(&mut self) -> Option<Self::Item> {$/;"	f
next_back	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    fn next_back(&mut self) -> Option<Self::Item> {$/;"	f
next_back	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn next_back(&mut self) -> Option<Self::Item> {$/;"	P	implementation:Chunks
next_back	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn next_back(&mut self) -> Option<Self::Item> {$/;"	P	implementation:ChunksMut
next_back	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn next_back(&mut self) -> Option<Self::Item> {$/;"	P	implementation:ConsumingIter
next_back	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn next_back(&mut self) -> Option<Self::Item> {$/;"	P	implementation:Iter
next_back	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn next_back(&mut self) -> Option<Self::Item> {$/;"	f
next_element	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>$/;"	P	interface:SeqAccess
next_element	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>$/;"	f
next_element_seed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>$/;"	P	interface:SeqAccess
next_element_seed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>$/;"	f
next_element_seed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>$/;"	f
next_element_seed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    fn next_element_seed<V>(&mut self, seed: V) -> Result<Option<V::Value>, Self::Error>$/;"	f
next_element_seed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>$/;"	f	module:content
next_entry	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn next_entry<K, V>(&mut self) -> Result<Option<(K, V)>, Self::Error>$/;"	P	interface:MapAccess
next_entry	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn next_entry<K, V>(&mut self) -> Result<Option<(K, V)>, Self::Error>$/;"	f
next_entry_seed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn next_entry_seed<K, V>($/;"	P	interface:MapAccess
next_entry_seed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn next_entry_seed<K, V>($/;"	f
next_entry_seed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    fn next_entry_seed<TK, TV>($/;"	f
next_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn next_key<K>(&mut self) -> Result<Option<K>, Self::Error>$/;"	P	interface:MapAccess
next_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn next_key<K>(&mut self) -> Result<Option<K>, Self::Error>$/;"	f
next_key_seed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn next_key_seed<K>(&mut self, seed: K) -> Result<Option<K::Value>, Self::Error>$/;"	P	interface:MapAccess
next_key_seed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn next_key_seed<K>(&mut self, seed: K) -> Result<Option<K::Value>, Self::Error>$/;"	f
next_key_seed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    fn next_key_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>$/;"	f
next_key_seed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn next_key_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>$/;"	f	module:content
next_key_seed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    fn next_key_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>$/;"	f
next_line_help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^    next_line_help: bool,$/;"	m	struct:Help
next_line_help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn next_line_help(mut self, nlh: bool) -> Self {$/;"	P	implementation:Arg
next_pair	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    fn next_pair(&mut self) -> Option<(First<I::Item>, Second<I::Item>)> {$/;"	f
next_value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn next_value<V>(&mut self) -> Result<V, Self::Error>$/;"	P	interface:MapAccess
next_value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn next_value<V>(&mut self) -> Result<V, Self::Error>$/;"	f
next_value_seed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn next_value_seed<V>(&mut self, seed: V) -> Result<V::Value, Self::Error>$/;"	P	interface:MapAccess
next_value_seed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn next_value_seed<V>(&mut self, seed: V) -> Result<V::Value, Self::Error>$/;"	f
next_value_seed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    fn next_value_seed<T>(&mut self, seed: T) -> Result<T::Value, Self::Error>$/;"	f
next_value_seed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn next_value_seed<T>(&mut self, seed: T) -> Result<T::Value, Self::Error>$/;"	f	module:content
next_value_seed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    fn next_value_seed<T>(&mut self, seed: T) -> Result<T::Value, Self::Error>$/;"	f
nil	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/mod.rs	/^    pub const fn nil() -> Self {$/;"	P	implementation:Builder
nil	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/mod.rs	/^    pub const fn nil() -> Self {$/;"	P	implementation:Uuid
node_pool_size	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/pool.rs	/^    pub fn node_pool_size(&self) -> usize {$/;"	P	implementation:RRBPool
nodes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/lib.rs	/^mod nodes;$/;"	n
nodes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    fn nodes(self) -> Chunk<Node<A>> {$/;"	P	implementation:Entry
nonascii	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn nonascii() {$/;"	f	module:test
none	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/fmt.rs	/^    pub fn none<T>(&self, msg: T) -> Format<T>$/;"	P	implementation:Colorizer
none	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    fn none(cx: &'c Ctxt, name: Symbol) -> Self {$/;"	P	implementation:Attr
none	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    fn none(cx: &'c Ctxt, name: Symbol) -> Self {$/;"	P	implementation:BoolAttr
none	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    fn none(cx: &'c Ctxt, name: Symbol) -> Self {$/;"	P	implementation:VecAttr
nonzero_integers	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^macro_rules! nonzero_integers {$/;"	M
nonzero_integers	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^macro_rules! nonzero_integers {$/;"	M
nop_reserve	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^fn nop_reserve<T>(_seq: T, _n: usize) {}$/;"	f
num_vals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    fn num_vals(&self) -> Option<u64> {$/;"	P	implementation:App
num_vals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn num_vals(&self) -> Option<u64> {$/;"	f
num_vals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn num_vals(&self) -> Option<u64>;$/;"	P	interface:AnyArg
num_vals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^    fn num_vals(&self) -> Option<u64> {$/;"	P	implementation:FlagBuilder
num_vals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    fn num_vals(&self) -> Option<u64> {$/;"	P	implementation:OptBuilder
num_vals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    fn num_vals(&self) -> Option<u64> {$/;"	P	implementation:PosBuilder
num_vals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/valued.rs	/^    pub num_vals: Option<u64>,$/;"	m	struct:Valued
number_of_children	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    pub(crate) fn number_of_children(&self) -> usize {$/;"	P	implementation:Node
number_of_values	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn number_of_values(mut self, qty: u64) -> Self {$/;"	P	implementation:Arg
occurrences_of	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    pub fn occurrences_of<S: AsRef<str>>(&self, name: S) -> u64 {$/;"	P	implementation:ArgMatches
occurs	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/matched_arg.rs	/^    pub occurs: u64,$/;"	m	struct:MatchedArg
ok	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impossible.rs	/^    ok: PhantomData<Ok>,$/;"	m	struct:Impossible
old_stack	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    old_stack: Vec<IterItem<'a, A>>,$/;"	m	struct:DiffIter
optbuilder_display1	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    fn optbuilder_display1() {$/;"	f	module:test
optbuilder_display2	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    fn optbuilder_display2() {$/;"	f	module:test
optbuilder_display3	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    fn optbuilder_display3() {$/;"	f	module:test
optbuilder_display_multiple_aliases	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    fn optbuilder_display_multiple_aliases() {$/;"	f	module:test
optbuilder_display_single_alias	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    fn optbuilder_display_single_alias() {$/;"	f	module:test
option	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/mod.rs	/^mod option;$/;"	n
option_details_for_path	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/bash.rs	/^    fn option_details_for_path(&self, path: &str) -> String {$/;"	P	implementation:BashGen
opts	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn opts(&self) -> Iter<OptBuilder<'a, 'b>> {$/;"	f
opts	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub opts: Vec<OptBuilder<'a, 'b>>,$/;"	m	struct:Parser
or_default	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn or_default(self) -> &'a mut V$/;"	f
or_default	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn or_default(self) -> &'a mut V$/;"	f
or_insert	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn or_insert(self, default: V) -> &'a mut V {$/;"	f
or_insert	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn or_insert(self, default: V) -> &'a mut V {$/;"	f
or_insert_with	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn or_insert_with<F>(self, default: F) -> &'a mut V$/;"	f
or_insert_with	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn or_insert_with<F>(self, default: F) -> &'a mut V$/;"	f
ord	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/lib.rs	/^mod ord;$/;"	n
ord_map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/proptest.rs	/^pub fn ord_map<K: Strategy + 'static, V: Strategy + 'static>($/;"	f
ord_set	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/proptest.rs	/^pub fn ord_set<A: Strategy + 'static>($/;"	f
ordmap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^macro_rules! ordmap {$/;"	M
ordset	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^macro_rules! ordset {$/;"	M
ordset	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/tests/mod.rs	/^mod ordset;$/;"	n
original	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ast.rs	/^    pub original: &'a syn::DeriveInput,$/;"	m	struct:Container
original	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ast.rs	/^    pub original: &'a syn::Field,$/;"	m	struct:Field
original	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ast.rs	/^    pub original: &'a syn::Variant,$/;"	m	struct:Variant
osstringext	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/lib.rs	/^mod osstringext;$/;"	n
other	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    other: bool,$/;"	m	struct:Variant
other	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn other(&self) -> bool {$/;"	P	implementation:Variant
outer_b	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    outer_b: PoolRef<Chunk<A>>,$/;"	m	struct:RRB
outer_f	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    outer_f: PoolRef<Chunk<A>>,$/;"	m	struct:RRB
overrides	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    fn overrides(&self) -> Option<&[&'e str]> {$/;"	P	implementation:App
overrides	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub overrides: Vec<(&'b str, &'a str)>,$/;"	m	struct:Parser
overrides	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn overrides(&self) -> Option<&[&'e str]> {$/;"	f
overrides	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn overrides(&self) -> Option<&[&'e str]>;$/;"	P	interface:AnyArg
overrides	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/base.rs	/^    pub overrides: Option<Vec<&'a str>>,$/;"	m	struct:Base
overrides	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^    fn overrides(&self) -> Option<&[&'e str]> {$/;"	P	implementation:FlagBuilder
overrides	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    fn overrides(&self) -> Option<&[&'e str]> {$/;"	P	implementation:OptBuilder
overrides	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    fn overrides(&self) -> Option<&[&'e str]> {$/;"	P	implementation:PosBuilder
overrides_with	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn overrides_with(mut self, name: &'a str) -> Self {$/;"	P	implementation:Arg
overrides_with_all	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn overrides_with_all(mut self, names: &[&'a str]) -> Self {$/;"	P	implementation:Arg
p	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub p: Parser<'a, 'b>,$/;"	m	struct:App
p	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/bash.rs	/^    p: &'b Parser<'a, 'b>,$/;"	m	struct:BashGen
p	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/elvish.rs	/^    p: &'b Parser<'a, 'b>,$/;"	m	struct:ElvishGen
p	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/fish.rs	/^    p: &'b Parser<'a, 'b>,$/;"	m	struct:FishGen
p	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/mod.rs	/^    p: &'b Parser<'a, 'b>,$/;"	m	struct:ComplGen
p	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/powershell.rs	/^    p: &'b Parser<'a, 'b>,$/;"	m	struct:PowerShellGen
p	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/zsh.rs	/^    p: &'b Parser<'a, 'b>,$/;"	m	struct:ZshGen
pair	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    pub(crate) fn pair(index1: usize, value1: Entry<A>, index2: usize, value2: Entry<A>) -> Self/;"	P	implementation:Node
pair	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    pub fn pair<F, B>(&mut self, a: usize, b: usize, mut f: F) -> B$/;"	f
par_iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/rayon.rs	/^    fn par_iter(&'a self) -> Self::Iter {$/;"	f
par_iter_mut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/rayon.rs	/^    fn par_iter_mut(&'a mut self) -> Self::Iter {$/;"	f
parent	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    pub(crate) fn parent(pool: &RRBPool<A>, level: usize, children: Chunk<Self>) -> Self {$/;"	P	implementation:Node
parse	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/lib.rs	/^        fn parse() -> Self {$/;"	P	interface:derive::ClapApp
parse	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    pub fn parse(mut self) -> Arg<'a, 'a> {$/;"	P	implementation:UsageParser
parse	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^        fn parse(input: ParseStream) -> parse::Result<Self> {$/;"	P	implementation:parse_lit_into_lifetimes::BorrowedLifetimes
parse_desired_name	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    fn parse_desired_name(&self, subcommand_name: String) -> String {$/;"	P	implementation:ArgMatches
parse_desired_name	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    fn parse_desired_name(&self, subcommand_name: String) -> String;$/;"	P	interface:SubcommandArgumentParser
parse_desired_priority	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    fn parse_desired_priority(&self, subcommand_name: String) -> String {$/;"	P	implementation:ArgMatches
parse_desired_priority	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    fn parse_desired_priority(&self, subcommand_name: String) -> String;$/;"	P	interface:SubcommandArgumentParser
parse_flag	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    fn parse_flag($/;"	f
parse_from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/lib.rs	/^        fn parse_from<I, T>(argv: I) -> Self$/;"	P	interface:derive::ClapApp
parse_help_subcommand	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    fn parse_help_subcommand<I, T>(&self, it: &mut I) -> ClapResult<ParseResult<'a>>$/;"	f
parse_id_for_subcommand	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    fn parse_id_for_subcommand(&self, subcommand_name: String) -> usize {$/;"	P	implementation:ArgMatches
parse_id_for_subcommand	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    fn parse_id_for_subcommand(&self, subcommand_name: String) -> usize;$/;"	P	interface:SubcommandArgumentParser
parse_ip_impl	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^macro_rules! parse_ip_impl {$/;"	M
parse_lit_into_expr_path	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^fn parse_lit_into_expr_path($/;"	f
parse_lit_into_lifetimes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^fn parse_lit_into_lifetimes($/;"	f
parse_lit_into_path	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^fn parse_lit_into_path(cx: &Ctxt, attr_name: Symbol, lit: &syn::Lit) -> Result<syn::Path, ()> {$/;"	f
parse_lit_into_ty	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^fn parse_lit_into_ty(cx: &Ctxt, attr_name: Symbol, lit: &syn::Lit) -> Result<syn::Type, ()> {$/;"	f
parse_lit_into_where	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^fn parse_lit_into_where($/;"	f
parse_lit_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^fn parse_lit_str<T>(s: &syn::LitStr) -> parse::Result<T>$/;"	f
parse_long_arg	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    fn parse_long_arg<I, T>($/;"	f
parse_opt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    fn parse_opt($/;"	f
parse_priority	/home/darrion/projects/ClearHeadToDo/src/task.rs	/^pub fn parse_priority(expr: &str) -> Result<PriEnum, Box<dyn Error>> {$/;"	f
parse_short_arg	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    fn parse_short_arg($/;"	f
parse_socket_impl	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^macro_rules! parse_socket_impl {$/;"	M
parse_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/parser/mod.rs	/^    pub fn parse_str(mut input: &str) -> Result<Uuid, crate::Error> {$/;"	P	implementation:Uuid
parse_subcommand	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    fn parse_subcommand<I, T>($/;"	f
parser	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^pub mod parser;$/;"	n
parser	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^mod parser;$/;"	n
partial_cmp	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {$/;"	f
partial_cmp	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {$/;"	f
partial_cmp	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {$/;"	f
partial_cmp	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {$/;"	P	implementation:OrdSet
partial_cmp	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {$/;"	P	implementation:Vector
path_first	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    pub(crate) fn path_first<'a, BK>($/;"	P	implementation:Node
path_last	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    pub(crate) fn path_last<'a, BK>($/;"	P	implementation:Node
path_next	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    pub(crate) fn path_next<'a, BK>($/;"	P	implementation:Node
path_prev	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    pub(crate) fn path_prev<'a, BK>($/;"	P	implementation:Node
pending	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    pending: Option<&'a Content<'de>>,$/;"	m	struct:FlatInternallyTaggedAccess
pending_content	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    pending_content: Option<&'a Content<'de>>,$/;"	m	struct:FlatMapAccess
pending_content	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    pending_content: Option<Content<'de>>,$/;"	m	struct:FlatStructAccess
phantom	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^        pub phantom: PhantomData<Idx>,$/;"	m	struct:range::RangeVisitor
phantom_a	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ser.rs	/^    phantom_a: PhantomData<A>,$/;"	m	struct:SeqVisitor
phantom_k	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ser.rs	/^    phantom_k: PhantomData<K>,$/;"	m	struct:MapVisitor
phantom_lifetime	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ser.rs	/^    phantom_lifetime: PhantomData<&'de ()>,$/;"	m	struct:MapVisitor
phantom_lifetime	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ser.rs	/^    phantom_lifetime: PhantomData<&'de ()>,$/;"	m	struct:SeqVisitor
phantom_s	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ser.rs	/^    phantom_s: PhantomData<S>,$/;"	m	struct:MapVisitor
phantom_s	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ser.rs	/^    phantom_s: PhantomData<S>,$/;"	m	struct:SeqVisitor
phantom_v	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ser.rs	/^    phantom_v: PhantomData<V>,$/;"	m	struct:MapVisitor
physical_index	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    fn physical_index(&self, index: usize) -> usize {$/;"	f
place_lifetime	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn place_lifetime() -> syn::LifetimeDef {$/;"	f
pool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pool: HashMapPool<K, V>,$/;"	m	struct:HashMap
pool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn pool(&self) -> &HashMapPool<K, V> {$/;"	P	implementation:HashMap
pool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    pool: HashSetPool<A>,$/;"	m	struct:HashSet
pool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    pub fn pool(&self) -> &HashSetPool<A> {$/;"	P	implementation:HashSet
pool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    pool: Pool<Node<A>>,$/;"	m	struct:Drain
pool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    pool: Pool<Node<A>>,$/;"	m	struct:IterMut
pool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pool: OrdMapPool<K, V>,$/;"	m	struct:OrdMap
pool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn pool(&self) -> &OrdMapPool<K, V> {$/;"	P	implementation:OrdMap
pool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    pool: OrdSetPool<A>,$/;"	m	struct:OrdSet
pool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    pub fn pool(&self) -> &OrdSetPool<A> {$/;"	P	implementation:OrdSet
pool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn pool(&self) -> &RRBPool<A> {$/;"	P	implementation:Vector
pool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^mod pool;$/;"	n
pop	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    fn pop(&mut self) -> Entry<A> {$/;"	P	implementation:CollisionNode
pop	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    fn pop(&mut self) -> Entry<A> {$/;"	P	implementation:Node
pop	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    fn pop(&mut self, pool: &Pool<Chunk<usize>>, side: Side, level: usize, value: usize) {$/;"	P	implementation:Size
pop_back	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn pop_back(&mut self, pool: &RRBPool<A>) -> Option<A> {$/;"	P	implementation:RRB
pop_back	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn pop_back(&mut self) -> Option<A> {$/;"	P	implementation:Vector
pop_child_node	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    fn pop_child_node(&mut self, pool: &RRBPool<A>, side: Side) -> Node<A> {$/;"	P	implementation:Node
pop_chunk	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    pub(crate) fn pop_chunk($/;"	P	implementation:Node
pop_front	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn pop_front(&mut self, pool: &RRBPool<A>) -> Option<A> {$/;"	P	implementation:RRB
pop_front	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn pop_front(&mut self) -> Option<A> {$/;"	P	implementation:Vector
pop_max	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    fn pop_max(&mut self) -> (A, Option<PoolRef<Node<A>>>) {$/;"	P	implementation:Node
pop_middle	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn pop_middle(&mut self, pool: &RRBPool<A>, side: Side) -> Option<PoolRef<Chunk<A>>> {$/;"	P	implementation:RRB
pop_min	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    fn pop_min(&mut self) -> (A, Option<PoolRef<Node<A>>>) {$/;"	P	implementation:Node
pop_size	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    fn pop_size(&mut self, pool: &RRBPool<A>, side: Side, level: usize, value: usize) {$/;"	P	implementation:Node
pos	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/osstringext.rs	/^    pos: usize,$/;"	m	struct:OsSplit
pos	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    pos: usize,$/;"	m	struct:UsageParser
pos	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/utf8.rs	/^    pos: usize,$/;"	m	struct:Encode
pos_help_double_lit_single_quote	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn pos_help_double_lit_single_quote() {$/;"	f	module:test
pos_help_lit_single_quote	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn pos_help_lit_single_quote() {$/;"	f	module:test
pos_help_newline	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn pos_help_newline() {$/;"	f	module:test
pos_help_newline_lit_sq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn pos_help_newline_lit_sq() {$/;"	f	module:test
pos_mult	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn pos_mult() {$/;"	f	module:test
pos_mult_help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn pos_mult_help() {$/;"	f	module:test
pos_req	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn pos_req() {$/;"	f	module:test
pos_req_mult_help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn pos_req_mult_help() {$/;"	f	module:test
positional	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/mod.rs	/^mod positional;$/;"	n
positionals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn positionals(&self) -> map::Values<PosBuilder<'a, 'b>> {$/;"	f
positionals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub positionals: VecMap<PosBuilder<'a, 'b>>,$/;"	m	struct:Parser
possible_subcommand	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    fn possible_subcommand(&self, arg_os: &OsStr) -> (bool, Option<&str>) {$/;"	f
possible_vals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    fn possible_vals(&self) -> Option<&[&'e str]> {$/;"	P	implementation:App
possible_vals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn possible_vals(&self) -> Option<&[&'e str]> {$/;"	f
possible_vals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn possible_vals(&self) -> Option<&[&'e str]>;$/;"	P	interface:AnyArg
possible_vals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^    fn possible_vals(&self) -> Option<&[&'e str]> {$/;"	P	implementation:FlagBuilder
possible_vals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    fn possible_vals(&self) -> Option<&[&'e str]> {$/;"	P	implementation:OptBuilder
possible_vals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    fn possible_vals(&self) -> Option<&[&'e str]> {$/;"	P	implementation:PosBuilder
possible_vals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/valued.rs	/^    pub possible_vals: Option<Vec<&'b str>>,$/;"	m	struct:Valued
possible_value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn possible_value(mut self, name: &'b str) -> Self {$/;"	P	implementation:Arg
possible_values	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn possible_values(mut self, names: &[&'b str]) -> Self {$/;"	P	implementation:Arg
possible_values_match	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/suggestions.rs	/^    fn possible_values_match() {$/;"	f	module:test
possible_values_nomatch	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/suggestions.rs	/^    fn possible_values_nomatch() {$/;"	f	module:test
powershell	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/mod.rs	/^mod powershell;$/;"	n
pre_help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/meta.rs	/^    pub pre_help: Option<&'b str>,$/;"	m	struct:AppMeta
precondition	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn precondition(cx: &Ctxt, cont: &Container) {$/;"	f
precondition	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^fn precondition(cx: &Ctxt, cont: &Container) {$/;"	f
precondition_no_de_lifetime	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn precondition_no_de_lifetime(cx: &Ctxt, cont: &Container) {$/;"	f
precondition_sized	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn precondition_sized(cx: &Ctxt, cont: &Container) {$/;"	f
prelude	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^mod prelude;$/;"	n
prepare_enum_variant_enum	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn prepare_enum_variant_enum($/;"	f
pretend	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/lib.rs	/^mod pretend;$/;"	n
pretend_fields_used	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/pretend.rs	/^fn pretend_fields_used(cont: &Container) -> TokenStream {$/;"	f
pretend_used	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/pretend.rs	/^pub fn pretend_used(cont: &Container) -> TokenStream {$/;"	f
pretend_variants_used	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/pretend.rs	/^fn pretend_variants_used(cont: &Container) -> TokenStream {$/;"	f
prev	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    prev: UsageToken,$/;"	m	struct:UsageParser
primitive_deserializer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^macro_rules! primitive_deserializer {$/;"	M
primitive_impl	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^macro_rules! primitive_impl {$/;"	M
print_help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn print_help(&mut self) -> ClapResult<()> {$/;"	P	implementation:App
print_help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn print_help(&self) -> ClapResult<()> {$/;"	f
print_long_help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn print_long_help(&mut self) -> ClapResult<()> {$/;"	P	implementation:App
print_task_list	/home/darrion/projects/ClearHeadToDo/src/lib.rs	/^    pub fn print_task_list($/;"	P	implementation:TaskList
print_version	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    fn print_version<W: Write>(&self, w: &mut W, use_long: bool) -> ClapResult<()> {$/;"	f
priority	/home/darrion/projects/ClearHeadToDo/src/task.rs	/^    pub priority: PriEnum,$/;"	m	struct:Task
private	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^mod private {$/;"	n
private	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/lib.rs	/^pub mod private;$/;"	n
process_arg_overrides	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matcher.rs	/^    pub fn process_arg_overrides<'b>($/;"	P	implementation:ArgMatcher
promote_back	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn promote_back(&mut self) {$/;"	P	implementation:Vector
promote_front	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn promote_front(&mut self) {$/;"	P	implementation:Vector
promote_inline	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn promote_inline(&mut self) {$/;"	P	implementation:Vector
propagate_globals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn propagate_globals(&mut self) {$/;"	f
propagate_globals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matcher.rs	/^    pub fn propagate_globals(&mut self, global_arg_vec: &[&'a str]) {$/;"	P	implementation:ArgMatcher
propagate_help_version	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    fn propagate_help_version(&mut self) {$/;"	f
propagate_settings	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn propagate_settings(&mut self) {$/;"	f
proper_formatting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn proper_formatting() {$/;"	f	module:test
proptest	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^pub mod proptest {$/;"	n
proptest	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^pub mod proptest {$/;"	n
proptest	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/lib.rs	/^pub mod proptest;$/;"	n
proptest	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^pub mod proptest {$/;"	n
proptest	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^pub mod proptest {$/;"	n
proptest	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^pub mod proptest {$/;"	n
prune	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn prune(&mut self) {$/;"	P	implementation:RRB
ptr_eq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^    pub(crate) fn ptr_eq(left: &Self, right: &Self) -> bool {$/;"	P	implementation:Arc
ptr_eq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^    pub(crate) fn ptr_eq(left: &Self, right: &Self) -> bool {$/;"	P	implementation:Rc
ptr_eq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn ptr_eq(&self, _other: &Self) -> bool {$/;"	f
ptr_eq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn ptr_eq(&self, other: &Self) -> bool {$/;"	P	implementation:HashMap
ptr_eq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    fn ptr_eq(&self, _other: &Self) -> bool {$/;"	f
ptr_eq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    pub fn ptr_eq(&self, other: &Self) -> bool {$/;"	P	implementation:HashSet
ptr_eq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    fn ptr_eq(&self, other: &Self) -> bool;$/;"	P	interface:BTreeValue
ptr_eq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    fn ptr_eq(&self, other: &Self) -> bool;$/;"	P	interface:HashValue
ptr_eq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn ptr_eq(&self, _other: &Self) -> bool {$/;"	P	implementation:V
ptr_eq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn ptr_eq(&self, other: &Self) -> bool {$/;"	P	implementation:OrdMap
ptr_eq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    fn ptr_eq(&self, _other: &Self) -> bool {$/;"	P	implementation:Value
ptr_eq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    pub fn ptr_eq(&self, other: &Self) -> bool {$/;"	P	implementation:OrdSet
ptr_eq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn ptr_eq() {$/;"	f	module:test
ptr_eq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn ptr_eq(&self, other: &Self) -> bool {$/;"	P	implementation:Vector
push	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    fn push(stack: &mut Vec<ConsumingIterItem<A>>, mut node: Node<A>) {$/;"	P	implementation:ConsumingIter
push	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    fn push(stack: &mut Vec<IterItem<'a, A>>, node: &'a Node<A>) {$/;"	P	implementation:DiffIter
push	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    fn push(&mut self, pool: &Pool<Chunk<usize>>, side: Side, level: usize, value: usize) {$/;"	P	implementation:Size
push_back	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    fn push_back(&mut self, mut node: Node<A>) {$/;"	P	implementation:ConsumingIter
push_back	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn push_back(&mut self, pool: &RRBPool<A>, value: A) {$/;"	P	implementation:RRB
push_back	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn push_back(&mut self, value: A) {$/;"	P	implementation:Vector
push_child_node	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    fn push_child_node(&mut self, pool: &RRBPool<A>, side: Side, child: Node<A>) {$/;"	P	implementation:Node
push_chunk	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    pub(crate) fn push_chunk($/;"	P	implementation:Node
push_front	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn push_front(&mut self, pool: &RRBPool<A>, value: A) {$/;"	P	implementation:RRB
push_front	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn push_front(&mut self, value: A) {$/;"	P	implementation:Vector
push_fwd	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    fn push_fwd(&mut self, node: Node<A>) {$/;"	P	implementation:ConsumingIter
push_max	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    fn push_max(&mut self, child: Option<PoolRef<Node<A>>>, value: A) {$/;"	P	implementation:Node
push_middle	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn push_middle(&mut self, pool: &RRBPool<A>, side: Side, chunk: PoolRef<Chunk<A>>) {$/;"	P	implementation:RRB
push_min	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    fn push_min(&mut self, child: Option<PoolRef<Node<A>>>, value: A) {$/;"	P	implementation:Node
push_node	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    fn push_node(stack: &mut Vec<ConsumingIterItem<A>>, maybe_node: Option<PoolRef<Node<A>>>) {$/;"	P	implementation:ConsumingIter
push_node	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    fn push_node(stack: &mut Vec<IterItem<'a, A>>, maybe_node: &'a Option<PoolRef<Node<A>>>) {$/;"	P	implementation:DiffIter
push_node_back	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    fn push_node_back(&mut self, maybe_node: Option<PoolRef<Node<A>>>) {$/;"	P	implementation:ConsumingIter
push_size	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    fn push_size(&mut self, pool: &RRBPool<A>, side: Side, level: usize, value: usize) {$/;"	P	implementation:Node
quickcheck	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/lib.rs	/^pub mod quickcheck;$/;"	n
quicksort	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/sort.rs	/^pub(crate) fn quicksort<A, F>(vector: FocusMut<'_, A>, cmp: &F)$/;"	f
quote_block	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/fragment.rs	/^macro_rules! quote_block {$/;"	M
quote_expr	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/fragment.rs	/^macro_rules! quote_expr {$/;"	M
r_ifs	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub r_ifs: Vec<(&'a str, &'b str, &'a str)>,$/;"	m	struct:Parser
r_ifs	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub r_ifs: Option<Vec<(&'a str, &'b str)>>,$/;"	m	struct:Arg
r_unless	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/base.rs	/^    pub r_unless: Option<Vec<&'a str>>,$/;"	m	struct:Base
range	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn range<R, BK>(&self, range: R) -> Iter<'_, K, V>$/;"	f
range	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    pub fn range<R, BA>(&self, range: R) -> RangedIter<'_, A>$/;"	f
range	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^mod range {$/;"	n
ranged_iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn ranged_iter() {$/;"	f	module:test
ranged_iter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    fn ranged_iter() {$/;"	f	module:test
raw	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn raw(self, raw: bool) -> Self {$/;"	P	implementation:Arg
rayon	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^pub mod rayon;$/;"	n
refpool_crash	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn refpool_crash() {$/;"	f	module:test
relative_complement	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn relative_complement(mut self, other: Self) -> Self {$/;"	f
relative_complement	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    pub fn relative_complement(mut self, other: Self) -> Self {$/;"	f
relative_complement	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn relative_complement(mut self, other: Self) -> Self {$/;"	f
relative_complement	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    pub fn relative_complement(mut self, other: Self) -> Self {$/;"	f
relevant_type_params	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/bound.rs	/^        relevant_type_params: HashSet<syn::Ident>,$/;"	m	struct:with_bound::FindTyParams
remaining	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    remaining: usize,$/;"	m	struct:ConsumingIter
remote	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn remote(&self) -> Option<&syn::Path> {$/;"	P	implementation:Container
remote	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    remote: Option<syn::Path>,$/;"	m	struct:Container
remove	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matcher.rs	/^    pub fn remove(&mut self, arg: &str) {$/;"	P	implementation:ArgMatcher
remove	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn remove(self) -> V {$/;"	f
remove	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn remove<BK>(&mut self, k: &BK) -> Option<V>$/;"	f
remove	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    pub fn remove<BA>(&mut self, a: &BA) -> Option<A>$/;"	f
remove	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    pub(crate) fn remove<BK>(&mut self, pool: &Pool<Node<A>>, key: &BK) -> Remove<A>$/;"	P	implementation:Node
remove	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    fn remove<BK>(&mut self, key: &BK) -> Option<A>$/;"	P	implementation:CollisionNode
remove	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    pub(crate) fn remove<BK>($/;"	P	implementation:Node
remove	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn remove(self) -> V {$/;"	f
remove	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn remove<BK>(&mut self, k: &BK) -> Option<V>$/;"	f
remove	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    pub fn remove<BA>(&mut self, a: &BA) -> Option<A>$/;"	f
remove	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn remove(&mut self, index: usize) -> A {$/;"	P	implementation:Vector
remove_all	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matcher.rs	/^    pub fn remove_all(&mut self, args: &[&str]) {$/;"	P	implementation:ArgMatcher
remove_entry	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn remove_entry(self) -> (K, V) {$/;"	f
remove_entry	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn remove_entry(self) -> (K, V) {$/;"	f
remove_failing	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn remove_failing() {$/;"	f	module:test
remove_index	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    fn remove_index<BK>($/;"	P	implementation:Node
remove_max	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    pub fn remove_max(&mut self) -> Option<A> {$/;"	f
remove_min	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    pub fn remove_min(&mut self) -> Option<A> {$/;"	f
remove_overrides	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    fn remove_overrides(&mut self, matcher: &mut ArgMatcher) {$/;"	f
remove_task	/home/darrion/projects/ClearHeadToDo/src/lib.rs	/^    pub fn remove_task(&self, index: usize) -> Result<TaskList, Box<dyn Error>> {$/;"	P	implementation:TaskList
remove_top_level_collisions	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn remove_top_level_collisions() {$/;"	f	module:test
remove_with_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn remove_with_key<BK>(&mut self, k: &BK) -> Option<(K, V)>$/;"	f
remove_with_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn remove_with_key<BK>(&mut self, k: &BK) -> Option<(K, V)>$/;"	f
rename	/home/darrion/projects/ClearHeadToDo/src/task.rs	/^    pub fn rename(&self, new_task_name: &String) -> Task {$/;"	P	implementation:Task
rename_all_rules	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn rename_all_rules(&self) -> &RenameAllRules {$/;"	P	implementation:Container
rename_all_rules	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn rename_all_rules(&self) -> &RenameAllRules {$/;"	P	implementation:Variant
rename_all_rules	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    rename_all_rules: RenameAllRules,$/;"	m	struct:Container
rename_all_rules	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    rename_all_rules: RenameAllRules,$/;"	m	struct:Variant
rename_by_rules	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn rename_by_rules(&mut self, rules: &RenameAllRules) {$/;"	P	implementation:Field
rename_by_rules	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn rename_by_rules(&mut self, rules: &RenameAllRules) {$/;"	P	implementation:Variant
rename_fields	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/case.rs	/^fn rename_fields() {$/;"	f
rename_task	/home/darrion/projects/ClearHeadToDo/src/lib.rs	/^    pub fn rename_task(&self, index: usize, new_name: String) -> Result<TaskList, Box<dyn Error>/;"	P	implementation:TaskList
rename_test	/home/darrion/projects/ClearHeadToDo/src/task.rs	/^    fn rename_test() {$/;"	f	module:test
rename_variants	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/case.rs	/^fn rename_variants() {$/;"	f
replace_pool_def	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^fn replace_pool_def<A: PoolDefault>(pool: &Pool<A>, dest: &mut PoolRef<A>) -> PoolRef<A> {$/;"	f
replacement	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/try.rs	/^pub fn replacement() -> TokenStream {$/;"	f
require_delimiter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn require_delimiter(mut self, d: bool) -> Self {$/;"	P	implementation:Arg
require_equals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn require_equals(mut self, r: bool) -> Self {$/;"	P	implementation:Arg
required	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn required(&self) -> Iter<&str> {$/;"	f
required	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub required: Vec<&'a str>,$/;"	m	struct:Parser
required	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn required(self, r: bool) -> Self {$/;"	P	implementation:Arg
required	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/group.rs	/^    pub fn required(mut self, r: bool) -> Self {$/;"	P	implementation:ArgGroup
required	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/group.rs	/^    pub required: bool,$/;"	m	struct:ArgGroup
required_if	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn required_if(mut self, arg: &'a str, val: &'b str) -> Self {$/;"	P	implementation:Arg
required_ifs	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn required_ifs(mut self, ifs: &[(&'a str, &'b str)]) -> Self {$/;"	P	implementation:Arg
required_unless	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    fn required_unless(&self) -> Option<&[&'e str]> {$/;"	P	implementation:App
required_unless	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn required_unless(&self) -> Option<&[&'e str]> {$/;"	f
required_unless	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn required_unless(&self) -> Option<&[&'e str]>;$/;"	P	interface:AnyArg
required_unless	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn required_unless(mut self, name: &'a str) -> Self {$/;"	P	implementation:Arg
required_unless	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^    fn required_unless(&self) -> Option<&[&'e str]> {$/;"	P	implementation:FlagBuilder
required_unless	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    fn required_unless(&self) -> Option<&[&'e str]> {$/;"	P	implementation:OptBuilder
required_unless	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    fn required_unless(&self) -> Option<&[&'e str]> {$/;"	P	implementation:PosBuilder
required_unless_all	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn required_unless_all(mut self, names: &[&'a str]) -> Self {$/;"	P	implementation:Arg
required_unless_one	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn required_unless_one(mut self, names: &[&'a str]) -> Self {$/;"	P	implementation:Arg
requires	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    fn requires(&self) -> Option<&[(Option<&'e str>, &'n str)]> {$/;"	P	implementation:App
requires	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn requires(&self) -> Option<&[(Option<&'e str>, &'n str)]> {$/;"	f
requires	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn requires(&self) -> Option<&[(Option<&'e str>, &'n str)]>;$/;"	P	interface:AnyArg
requires	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn requires(mut self, name: &'a str) -> Self {$/;"	P	implementation:Arg
requires	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/base.rs	/^    pub requires: Option<Vec<(Option<&'b str>, &'a str)>>,$/;"	m	struct:Base
requires	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^    fn requires(&self) -> Option<&[(Option<&'e str>, &'n str)]> {$/;"	P	implementation:FlagBuilder
requires	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    fn requires(&self) -> Option<&[(Option<&'e str>, &'n str)]> {$/;"	P	implementation:OptBuilder
requires	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    fn requires(&self) -> Option<&[(Option<&'e str>, &'n str)]> {$/;"	P	implementation:PosBuilder
requires	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/group.rs	/^    pub fn requires(mut self, n: &'a str) -> Self {$/;"	P	implementation:ArgGroup
requires	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/group.rs	/^    pub requires: Option<Vec<&'a str>>,$/;"	m	struct:ArgGroup
requires_all	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn requires_all(mut self, names: &[&'a str]) -> Self {$/;"	P	implementation:Arg
requires_all	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/group.rs	/^    pub fn requires_all(mut self, ns: &[&'a str]) -> Self {$/;"	P	implementation:ArgGroup
requires_default	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn requires_default(field: &attr::Field, _variant: Option<&attr::Variant>) -> bool {$/;"	f
requires_if	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn requires_if(mut self, val: &'b str, arg: &'a str) -> Self {$/;"	P	implementation:Arg
requires_ifs	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn requires_ifs(mut self, ifs: &[(&'b str, &'a str)]) -> Self {$/;"	P	implementation:Arg
respan_token_stream	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^fn respan_token_stream(stream: TokenStream, span: Span) -> TokenStream {$/;"	f
respan_token_tree	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^fn respan_token_tree(mut token: TokenTree, span: Span) -> TokenTree {$/;"	f
retain	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn retain<F>(&mut self, mut f: F)$/;"	f
retain	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    pub fn retain<F>(&mut self, mut f: F)$/;"	f
retain	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn retain<F>(&mut self, mut f: F)$/;"	P	implementation:Vector
root	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    root: PoolRef<Node<(K, V)>>,$/;"	m	struct:HashMap
root	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    root: PoolRef<Node<Value<A>>>,$/;"	m	struct:HashSet
root	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    root: PoolRef<Node<(K, V)>>,$/;"	m	struct:OrdMap
root	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    root: PoolRef<Node<Value<A>>>,$/;"	m	struct:OrdSet
rrb	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/mod.rs	/^pub(crate) mod rrb;$/;"	n
run	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^pub fn run(matches: ArgMatches<'_>) -> CliSubCommand {$/;"	f
run_subcommand	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^pub fn run_subcommand($/;"	f
s	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub s: Switched<'b>,$/;"	m	struct:Arg
s	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^    pub s: Switched<'e>,$/;"	m	struct:FlagBuilder
s	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    pub s: Switched<'e>,$/;"	m	struct:OptBuilder
safe_mutation	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn safe_mutation() {$/;"	f	module:test
safe_mutation	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn safe_mutation() {$/;"	f	module:test
sc_names	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs	/^macro_rules! sc_names {$/;"	M
sdebug	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs	/^    macro_rules! sdebug {$/;"	M	module:debug_macros
sdebugln	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs	/^    macro_rules! sdebugln {$/;"	M	module:debug_macros
search_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    fn search_key<BK>(slice: &[Self], key: &BK) -> Result<usize, usize>$/;"	P	interface:BTreeValue
search_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    default fn search_key<BK>(slice: &[Self], key: &BK) -> Result<usize, usize>$/;"	P	implementation:V
search_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn search_key<BK>(slice: &[Self], key: &BK) -> Result<usize, usize>$/;"	P	implementation:V
search_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    default fn search_key<BK>(slice: &[Self], key: &BK) -> Result<usize, usize>$/;"	P	implementation:Value
search_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    fn search_key<BK>(slice: &[Self], key: &BK) -> Result<usize, usize>$/;"	P	implementation:Value
search_value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    fn search_value(slice: &[Self], value: &Self) -> Result<usize, usize>$/;"	P	interface:BTreeValue
search_value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    default fn search_value(slice: &[Self], key: &Self) -> Result<usize, usize> {$/;"	P	implementation:V
search_value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn search_value(slice: &[Self], key: &Self) -> Result<usize, usize> {$/;"	P	implementation:V
search_value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    default fn search_value(slice: &[Self], key: &Self) -> Result<usize, usize> {$/;"	P	implementation:Value
search_value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    fn search_value(slice: &[Self], key: &Self) -> Result<usize, usize> {$/;"	P	implementation:Value
seed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/test.rs	/^    pub(crate) fn seed(&self) -> u64 {$/;"	P	implementation:MetroHashBuilder
seed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/test.rs	/^    seed: u64,$/;"	m	struct:MetroHashBuilder
select_task_by_id	/home/darrion/projects/ClearHeadToDo/src/lib.rs	/^    pub fn select_task_by_id(&self, id: Uuid) -> Result<Task, Box<dyn Error>> {$/;"	P	implementation:TaskList
self_var	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^    self_var: Ident,$/;"	m	struct:Parameters
sep	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/osstringext.rs	/^    sep: u8,$/;"	m	struct:OsSplit
seq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    seq: A,$/;"	m	struct:SeqAccessDeserializer
seq_impl	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^macro_rules! seq_impl {$/;"	M
seq_impl	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^macro_rules! seq_impl {$/;"	M
ser	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/lib.rs	/^pub mod ser;$/;"	n
ser	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/lib.rs	/^pub mod ser;$/;"	n
ser	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/mod.rs	/^pub mod ser;$/;"	n
ser	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/lib.rs	/^mod ser;$/;"	n
ser_bound	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn ser_bound(&self) -> Option<&[syn::WherePredicate]> {$/;"	P	implementation:Container
ser_bound	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn ser_bound(&self) -> Option<&[syn::WherePredicate]> {$/;"	P	implementation:Field
ser_bound	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn ser_bound(&self) -> Option<&[syn::WherePredicate]> {$/;"	P	implementation:Variant
ser_bound	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    ser_bound: Option<Vec<syn::WherePredicate>>,$/;"	m	struct:Container
ser_bound	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    ser_bound: Option<Vec<syn::WherePredicate>>,$/;"	m	struct:Field
ser_bound	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    ser_bound: Option<Vec<syn::WherePredicate>>,$/;"	m	struct:Variant
serde_if_integer128	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/integer128.rs	/^macro_rules! serde_if_integer128 {$/;"	M
serde_path	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn serde_path(&self) -> Cow<syn::Path> {$/;"	P	implementation:Container
serde_path	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    serde_path: Option<syn::Path>,$/;"	m	struct:Container
serde_support	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^mod serde_support;$/;"	n
serde_tests	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/serde_support.rs	/^mod serde_tests {$/;"	n
serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ser.rs	/^    fn serialize<S>(&self, ser: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:OrdMap
serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ser.rs	/^    fn serialize<S>(&self, ser: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:OrdSet
serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ser.rs	/^    fn serialize<S>(&self, ser: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:Vector
serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ser.rs	/^    fn serialize<Ser>(&self, ser: Ser) -> Result<Ser::Ok, Ser::Error>$/;"	P	implementation:HashSet
serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ser.rs	/^    fn serialize<Ser>(&self, ser: Ser) -> Result<Ser::Ok, Ser::Error>$/;"	f
serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:content::Content
serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^    fn serialize<S>(&self, _serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:Serialize
serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:Arguments
serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:CStr
serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:CString
serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:Duration
serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:IpAddr
serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:Ipv4Addr
serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:Ipv6Addr
serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:OsStr
serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:OsString
serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:Path
serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:PathBuf
serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:PhantomData
serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:Serialize
serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:SocketAddr
serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:SocketAddrV4
serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:SocketAddrV6
serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:String
serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:SystemTime
serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:T
serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:str
serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	f
serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	interface:Serialize
serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    serialize: RenameRule,$/;"	m	struct:RenameAllRules
serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    serialize: String,$/;"	m	struct:Name
serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/compact.rs	/^pub fn serialize<S>(u: &crate::Uuid, serializer: S) -> Result<S::Ok, S::Error>$/;"	f
serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/serde_support.rs	/^    fn serialize<S: Serializer>($/;"	P	implementation:Uuid
serialize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/slog_support.rs	/^    fn serialize($/;"	P	implementation:Uuid
serialize	/home/darrion/projects/ClearHeadToDo/src/task.rs	/^    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>$/;"	P	implementation:Task
serialize_adjacently_tagged_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^fn serialize_adjacently_tagged_variant($/;"	f
serialize_body	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^fn serialize_body(cont: &Container, params: &Parameters) -> Fragment {$/;"	f
serialize_bool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fn serialize_bool(self, v: bool) -> Result<Content, E> {$/;"	f	module:content
serialize_bool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn serialize_bool(self, _: bool) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_bool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn serialize_bool(self, v: bool) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fn serialize_bytes(self, value: &[u8]) -> Result<Content, E> {$/;"	f	module:content
serialize_bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn serialize_bytes(self, _: &[u8]) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/fmt.rs	/^    fn serialize_bytes(self, _v: &[u8]) -> fmt::Result {$/;"	P	implementation:Formatter
serialize_bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn serialize_bytes(self, v: &[u8]) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_char	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fn serialize_char(self, v: char) -> Result<Content, E> {$/;"	f	module:content
serialize_char	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn serialize_char(self, _: char) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_char	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn serialize_char(self, v: char) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_display_bounded_length	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^macro_rules! serialize_display_bounded_length {$/;"	M
serialize_element	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fn serialize_element<T: ?Sized>(&mut self, value: &T) -> Result<(), E>$/;"	f	module:content
serialize_element	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impossible.rs	/^    fn serialize_element<T: ?Sized>(&mut self, value: &T) -> Result<(), Error>$/;"	f
serialize_element	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn serialize_element<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>$/;"	P	interface:SerializeSeq
serialize_element	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn serialize_element<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>$/;"	P	interface:SerializeTuple
serialize_element	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^    fn serialize_element(&self, span: Span) -> TokenStream {$/;"	P	implementation:TupleTrait
serialize_entry	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fn serialize_entry<K: ?Sized, V: ?Sized>(&mut self, key: &K, value: &V) -> Result<(), E>$/;"	f	module:content
serialize_entry	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn serialize_entry<K: ?Sized, V: ?Sized>($/;"	f
serialize_entry	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn serialize_entry<K: ?Sized, V: ?Sized>($/;"	P	interface:SerializeMap
serialize_enum	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^fn serialize_enum(params: &Parameters, variants: &[Variant], cattrs: &attr::Container) -> Fragme/;"	f
serialize_externally_tagged_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^fn serialize_externally_tagged_variant($/;"	f
serialize_f32	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fn serialize_f32(self, v: f32) -> Result<Content, E> {$/;"	f	module:content
serialize_f32	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn serialize_f32(self, _: f32) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_f32	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn serialize_f32(self, v: f32) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_f64	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fn serialize_f64(self, v: f64) -> Result<Content, E> {$/;"	f	module:content
serialize_f64	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn serialize_f64(self, _: f64) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_f64	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn serialize_f64(self, v: f64) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_field	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fn serialize_field<T: ?Sized>($/;"	f	module:content
serialize_field	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fn serialize_field<T: ?Sized>(&mut self, key: &'static str, value: &T) -> Result<(), E>$/;"	f	module:content
serialize_field	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fn serialize_field<T: ?Sized>(&mut self, value: &T) -> Result<(), E>$/;"	f	module:content
serialize_field	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fn serialize_field<T: ?Sized>(&mut self, value: &T) -> Result<(), M::Error>$/;"	f	module:content
serialize_field	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn serialize_field<T: ?Sized>($/;"	f
serialize_field	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impossible.rs	/^    fn serialize_field<T: ?Sized>(&mut self, key: &'static str, value: &T) -> Result<(), Error>$/;"	f
serialize_field	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impossible.rs	/^    fn serialize_field<T: ?Sized>(&mut self, value: &T) -> Result<(), Error>$/;"	f
serialize_field	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn serialize_field<T: ?Sized>($/;"	P	interface:SerializeStruct
serialize_field	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn serialize_field<T: ?Sized>($/;"	P	interface:SerializeStructVariant
serialize_field	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn serialize_field<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>$/;"	P	interface:SerializeTupleStruct
serialize_field	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn serialize_field<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>$/;"	P	interface:SerializeTupleVariant
serialize_field	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^    fn serialize_field(&self, span: Span) -> TokenStream {$/;"	P	implementation:StructTrait
serialize_i16	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fn serialize_i16(self, v: i16) -> Result<Content, E> {$/;"	f	module:content
serialize_i16	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn serialize_i16(self, _: i16) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_i16	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn serialize_i16(self, v: i16) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_i32	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fn serialize_i32(self, v: i32) -> Result<Content, E> {$/;"	f	module:content
serialize_i32	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn serialize_i32(self, _: i32) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_i32	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn serialize_i32(self, v: i32) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_i64	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fn serialize_i64(self, v: i64) -> Result<Content, E> {$/;"	f	module:content
serialize_i64	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn serialize_i64(self, _: i64) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_i64	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn serialize_i64(self, v: i64) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_i8	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fn serialize_i8(self, v: i8) -> Result<Content, E> {$/;"	f	module:content
serialize_i8	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn serialize_i8(self, _: i8) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_i8	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn serialize_i8(self, v: i8) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_internally_tagged_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^fn serialize_internally_tagged_variant($/;"	f
serialize_into	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^fn serialize_into(params: &Parameters, type_into: &syn::Type) -> Fragment {$/;"	f
serialize_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fn serialize_key<T: ?Sized>(&mut self, key: &T) -> Result<(), E>$/;"	f	module:content
serialize_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn serialize_key<T: ?Sized>(&mut self, key: &T) -> Result<(), Self::Error>$/;"	f
serialize_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impossible.rs	/^    fn serialize_key<T: ?Sized>(&mut self, key: &T) -> Result<(), Error>$/;"	f
serialize_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn serialize_key<T: ?Sized>(&mut self, key: &T) -> Result<(), Self::Error>$/;"	P	interface:SerializeMap
serialize_map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fn serialize_map(self, len: Option<usize>) -> Result<Self::SerializeMap, E> {$/;"	f	module:content
serialize_map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn serialize_map(self, _: Option<usize>) -> Result<Self::SerializeMap, Self::Error> {$/;"	f
serialize_map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn serialize_map(self, len: Option<usize>) -> Result<Self::SerializeMap, Self::Error> {$/;"	f
serialize_map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/fmt.rs	/^    fn serialize_map(self, _len: Option<usize>) -> Result<Self::SerializeMap, fmt::Error> {$/;"	P	implementation:Formatter
serialize_map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn serialize_map(self, len: Option<usize>) -> Result<Self::SerializeMap, Self::Error>;$/;"	P	interface:Serializer
serialize_name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn serialize_name(&self) -> String {$/;"	P	implementation:Name
serialize_newtype_struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fn serialize_newtype_struct<T: ?Sized>($/;"	f	module:content
serialize_newtype_struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn serialize_newtype_struct<T: ?Sized>($/;"	f
serialize_newtype_struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/fmt.rs	/^    fn serialize_newtype_struct<T: ?Sized>(self, _name: &'static str, value: &T) -> fmt::Result$/;"	P	implementation:Formatter
serialize_newtype_struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn serialize_newtype_struct<T: ?Sized>($/;"	P	interface:Serializer
serialize_newtype_struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^fn serialize_newtype_struct($/;"	f
serialize_newtype_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fn serialize_newtype_variant<T: ?Sized>($/;"	f	module:content
serialize_newtype_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn serialize_newtype_variant<T: ?Sized>($/;"	f
serialize_newtype_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/fmt.rs	/^    fn serialize_newtype_variant<T: ?Sized>($/;"	P	implementation:Formatter
serialize_newtype_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn serialize_newtype_variant<T: ?Sized>($/;"	P	interface:Serializer
serialize_none	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fn serialize_none(self) -> Result<Content, E> {$/;"	f	module:content
serialize_none	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn serialize_none(self) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_none	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/fmt.rs	/^    fn serialize_none(self) -> fmt::Result {$/;"	P	implementation:Formatter
serialize_none	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn serialize_none(self) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_renamed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    serialize_renamed: bool,$/;"	m	struct:Name
serialize_seq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fn serialize_seq(self, len: Option<usize>) -> Result<Self::SerializeSeq, E> {$/;"	f	module:content
serialize_seq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn serialize_seq(self, _: Option<usize>) -> Result<Self::SerializeSeq, Self::Error> {$/;"	f
serialize_seq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/fmt.rs	/^    fn serialize_seq(self, _len: Option<usize>) -> Result<Self::SerializeSeq, fmt::Error> {$/;"	P	implementation:Formatter
serialize_seq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn serialize_seq(self, len: Option<usize>) -> Result<Self::SerializeSeq, Self::Error>;$/;"	P	interface:Serializer
serialize_some	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fn serialize_some<T: ?Sized>(self, value: &T) -> Result<Content, E>$/;"	f	module:content
serialize_some	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn serialize_some<T: ?Sized>(self, _: &T) -> Result<Self::Ok, Self::Error>$/;"	f
serialize_some	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn serialize_some<T: ?Sized>(self, value: &T) -> Result<Self::Ok, Self::Error>$/;"	f
serialize_some	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/fmt.rs	/^    fn serialize_some<T: ?Sized>(self, _value: &T) -> fmt::Result$/;"	P	implementation:Formatter
serialize_some	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn serialize_some<T: ?Sized>(self, value: &T) -> Result<Self::Ok, Self::Error>$/;"	P	interface:Serializer
serialize_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fn serialize_str(self, value: &str) -> Result<Content, E> {$/;"	f	module:content
serialize_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn serialize_str(self, _: &str) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn serialize_str(self, v: &str) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fn serialize_struct($/;"	f	module:content
serialize_struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn serialize_struct($/;"	f
serialize_struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/fmt.rs	/^    fn serialize_struct($/;"	P	implementation:Formatter
serialize_struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn serialize_struct($/;"	P	interface:Serializer
serialize_struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^fn serialize_struct(params: &Parameters, fields: &[Field], cattrs: &attr::Container) -> Fragment/;"	f
serialize_struct_as_map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^fn serialize_struct_as_map($/;"	f
serialize_struct_as_struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^fn serialize_struct_as_struct($/;"	f
serialize_struct_tag_field	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^fn serialize_struct_tag_field(cattrs: &attr::Container, struct_trait: &StructTrait) -> TokenStre/;"	f
serialize_struct_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fn serialize_struct_variant($/;"	f	module:content
serialize_struct_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn serialize_struct_variant($/;"	f
serialize_struct_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/fmt.rs	/^    fn serialize_struct_variant($/;"	P	implementation:Formatter
serialize_struct_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn serialize_struct_variant($/;"	P	interface:Serializer
serialize_struct_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^fn serialize_struct_variant<'a>($/;"	f
serialize_struct_variant_with_flatten	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^fn serialize_struct_variant_with_flatten<'a>($/;"	f
serialize_struct_visitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^fn serialize_struct_visitor($/;"	f
serialize_tagged_newtype	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^pub fn serialize_tagged_newtype<S, T>($/;"	f
serialize_transparent	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^fn serialize_transparent(cont: &Container, params: &Parameters) -> Fragment {$/;"	f
serialize_tuple	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fn serialize_tuple(self, len: usize) -> Result<Self::SerializeTuple, E> {$/;"	f	module:content
serialize_tuple	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn serialize_tuple(self, _: usize) -> Result<Self::SerializeTuple, Self::Error> {$/;"	f
serialize_tuple	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/fmt.rs	/^    fn serialize_tuple(self, _len: usize) -> Result<Self::SerializeTuple, fmt::Error> {$/;"	P	implementation:Formatter
serialize_tuple	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn serialize_tuple(self, len: usize) -> Result<Self::SerializeTuple, Self::Error>;$/;"	P	interface:Serializer
serialize_tuple_struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fn serialize_tuple_struct($/;"	f	module:content
serialize_tuple_struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn serialize_tuple_struct($/;"	f
serialize_tuple_struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/fmt.rs	/^    fn serialize_tuple_struct($/;"	P	implementation:Formatter
serialize_tuple_struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn serialize_tuple_struct($/;"	P	interface:Serializer
serialize_tuple_struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^fn serialize_tuple_struct($/;"	f
serialize_tuple_struct_visitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^fn serialize_tuple_struct_visitor($/;"	f
serialize_tuple_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fn serialize_tuple_variant($/;"	f	module:content
serialize_tuple_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn serialize_tuple_variant($/;"	f
serialize_tuple_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/fmt.rs	/^    fn serialize_tuple_variant($/;"	P	implementation:Formatter
serialize_tuple_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn serialize_tuple_variant($/;"	P	interface:Serializer
serialize_tuple_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^fn serialize_tuple_variant($/;"	f
serialize_u16	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fn serialize_u16(self, v: u16) -> Result<Content, E> {$/;"	f	module:content
serialize_u16	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn serialize_u16(self, _: u16) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_u16	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn serialize_u16(self, v: u16) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_u32	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fn serialize_u32(self, v: u32) -> Result<Content, E> {$/;"	f	module:content
serialize_u32	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn serialize_u32(self, _: u32) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_u32	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn serialize_u32(self, v: u32) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_u64	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fn serialize_u64(self, v: u64) -> Result<Content, E> {$/;"	f	module:content
serialize_u64	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn serialize_u64(self, _: u64) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_u64	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn serialize_u64(self, v: u64) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_u8	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fn serialize_u8(self, v: u8) -> Result<Content, E> {$/;"	f	module:content
serialize_u8	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn serialize_u8(self, _: u8) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_u8	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn serialize_u8(self, v: u8) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_unit	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fn serialize_unit(self) -> Result<Content, E> {$/;"	f	module:content
serialize_unit	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn serialize_unit(self) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_unit	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/fmt.rs	/^    fn serialize_unit(self) -> fmt::Result {$/;"	P	implementation:Formatter
serialize_unit	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn serialize_unit(self) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_unit_struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fn serialize_unit_struct(self, name: &'static str) -> Result<Content, E> {$/;"	f	module:content
serialize_unit_struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn serialize_unit_struct(self, _: &'static str) -> Result<Self::Ok, Self::Error> {$/;"	f
serialize_unit_struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn serialize_unit_struct(self, name: &'static str) -> Result<Self::Ok, Self::Error>;$/;"	P	interface:Serializer
serialize_unit_struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^fn serialize_unit_struct(cattrs: &attr::Container) -> Fragment {$/;"	f
serialize_unit_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fn serialize_unit_variant($/;"	f	module:content
serialize_unit_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn serialize_unit_variant($/;"	f
serialize_unit_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/fmt.rs	/^    fn serialize_unit_variant($/;"	P	implementation:Formatter
serialize_unit_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn serialize_unit_variant($/;"	P	interface:Serializer
serialize_untagged_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^fn serialize_untagged_variant($/;"	f
serialize_value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        fn serialize_value<T: ?Sized>(&mut self, value: &T) -> Result<(), E>$/;"	f	module:content
serialize_value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    fn serialize_value<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>$/;"	f
serialize_value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impossible.rs	/^    fn serialize_value<T: ?Sized>(&mut self, value: &T) -> Result<(), Error>$/;"	f
serialize_value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn serialize_value<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>$/;"	P	interface:SerializeMap
serialize_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^fn serialize_variant($/;"	f
serialize_with	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn serialize_with(&self) -> Option<&syn::ExprPath> {$/;"	P	implementation:Field
serialize_with	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn serialize_with(&self) -> Option<&syn::ExprPath> {$/;"	P	implementation:Variant
serialize_with	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    serialize_with: Option<syn::ExprPath>,$/;"	m	struct:Field
serialize_with	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    serialize_with: Option<syn::ExprPath>,$/;"	m	struct:Variant
set	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    fn set(&mut self, _: ArgSettings) {$/;"	P	implementation:App
set	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn set(&mut self, s: AS) {$/;"	f
set	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn set(&mut self, ArgSettings);$/;"	P	interface:AnyArg
set	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn set(&mut self, _: ArgSettings) {$/;"	f
set	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn set(mut self, s: ArgSettings) -> Self {$/;"	P	implementation:Arg
set	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/base.rs	/^    pub fn set(&mut self, s: ArgSettings) {$/;"	P	implementation:Base
set	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^    fn set(&mut self, s: ArgSettings) {$/;"	P	implementation:FlagBuilder
set	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    fn set(&mut self, s: ArgSettings) {$/;"	P	implementation:OptBuilder
set	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    fn set(&mut self, s: ArgSettings) {$/;"	P	implementation:PosBuilder
set	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/mod.rs	/^pub mod set;$/;"	n
set	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/mod.rs	/^pub mod set;$/;"	n
set	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    pub fn set(&mut self, index: usize, value: A) -> Option<A> {$/;"	f
set	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn set(&mut self, index: usize, value: A) -> A {$/;"	P	implementation:Vector
set	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    fn set<A: ToTokens>(&mut self, obj: A, value: T) {$/;"	P	implementation:Attr
set_focus	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    fn set_focus(&mut self, index: usize) {$/;"	f
set_focus	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    fn set_focus(&mut self, pool: &RRBPool<A>, index: usize) {$/;"	f
set_if_none	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    fn set_if_none(&mut self, value: T) {$/;"	P	implementation:Attr
set_opt	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    fn set_opt<A: ToTokens>(&mut self, obj: A, value: Option<T>) {$/;"	P	implementation:Attr
set_term_width	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn set_term_width(mut self, width: usize) -> Self {$/;"	P	implementation:App
set_true	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    fn set_true<A: ToTokens>(&mut self, obj: A) {$/;"	P	implementation:BoolAttr
set_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/mod.rs	/^    pub fn set_variant(&mut self, v: crate::Variant) -> &mut Self {$/;"	P	implementation:Builder
set_version	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/mod.rs	/^    pub fn set_version(&mut self, v: crate::Version) -> &mut Self {$/;"	P	implementation:Builder
setb	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn setb(&mut self, s: ArgSettings) {$/;"	P	implementation:Arg
setting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn setting(mut self, setting: AppSettings) -> Self {$/;"	P	implementation:App
settings	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn settings(mut self, settings: &[AppSettings]) -> Self {$/;"	P	implementation:App
settings	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^mod settings;$/;"	n
settings	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    settings: AppFlags,$/;"	m	struct:Parser
settings	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/base.rs	/^    pub settings: ArgFlags,$/;"	m	struct:Base
settings	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/mod.rs	/^pub mod settings;$/;"	n
shell	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/mod.rs	/^mod shell;$/;"	n
shift	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/test.rs	/^    shift: usize,$/;"	m	struct:LolHasher
short	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^    fn short<'b, 'c>(&mut self, arg: &ArgWithDisplay<'b, 'c>) -> io::Result<()> {$/;"	P	implementation:Help
short	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    fn short(&self) -> Option<char> {$/;"	P	implementation:App
short	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn short(&self) -> Option<char> {$/;"	f
short	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn short(&self) -> Option<char>;$/;"	P	interface:AnyArg
short	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn short<S: AsRef<str>>(mut self, s: S) -> Self {$/;"	P	implementation:Arg
short	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^    fn short(&self) -> Option<char> {$/;"	P	implementation:FlagBuilder
short	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    fn short(&self) -> Option<char> {$/;"	P	implementation:OptBuilder
short	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    fn short(&self) -> Option<char> {$/;"	P	implementation:PosBuilder
short	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/switched.rs	/^    pub short: Option<char>,$/;"	m	struct:Switched
short	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn short(&mut self, arg: &mut Arg<'a, 'a>) {$/;"	P	implementation:UsageParser
short_or_long	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn short_or_long(&mut self, arg: &mut Arg<'a, 'a>) {$/;"	P	implementation:UsageParser
shorts	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs	/^macro_rules! shorts {$/;"	M
should_show_arg	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^fn should_show_arg(use_long: bool, arg: &ArgWithOrder) -> bool {$/;"	f
shrink	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/arbitrary.rs	/^    fn shrink(&self) -> Box<dyn Iterator<Item = Self>> {$/;"	P	implementation:OrdMap
shrink	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/arbitrary.rs	/^    fn shrink(&self) -> Box<dyn Iterator<Item = Self>> {$/;"	P	implementation:OrdSet
shrink	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/arbitrary.rs	/^    fn shrink(&self) -> Box<dyn Iterator<Item = Self>> {$/;"	P	implementation:Vector
shrink	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/arbitrary.rs	/^    fn shrink(&self) -> Box<dyn Iterator<Item = Self>> {$/;"	f
shrink_collection	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/arbitrary.rs	/^fn shrink_collection<T: Clone, A: Clone + Arbitrary>($/;"	f
simple_ref_too_small	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^    fn simple_ref_too_small() {$/;"	f	module:tests
simple_ref_trailing	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^    fn simple_ref_trailing() {$/;"	f	module:tests
simple_too_small	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^    fn simple_too_small() {$/;"	f	module:tests
simple_trailing	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^    fn simple_trailing() {$/;"	f	module:tests
single_child	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    pub(crate) fn single_child(pool: &Pool<Node<A>>, index: usize, node: Self) -> Self {$/;"	P	implementation:Node
single_parent	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    pub(crate) fn single_parent(pool: &RRBPool<A>, node: Self) -> Self {$/;"	P	implementation:Node
size	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    size: usize,$/;"	m	struct:HashMap
size	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    size: usize,$/;"	m	struct:HashSet
size	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    fn size(&self) -> usize {$/;"	P	implementation:Node
size	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    fn size(&self) -> usize {$/;"	P	implementation:Size
size	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    size: usize,$/;"	m	struct:OrdMap
size	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    size: usize,$/;"	m	struct:OrdSet
size	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/test.rs	/^    size: PhantomData<N>,$/;"	m	struct:LolHasher
size_hint	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:Indices
size_hint	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:OsValues
size_hint	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:Values
size_hint	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/arbitrary.rs	/^    fn size_hint(depth: usize) -> (usize, Option<usize>) {$/;"	P	implementation:OrdMap
size_hint	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/arbitrary.rs	/^    fn size_hint(depth: usize) -> (usize, Option<usize>) {$/;"	P	implementation:OrdSet
size_hint	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/arbitrary.rs	/^    fn size_hint(depth: usize) -> (usize, Option<usize>) {$/;"	P	implementation:Vector
size_hint	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/arbitrary.rs	/^    fn size_hint(depth: usize) -> (usize, Option<usize>) {$/;"	f
size_hint	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:Iter
size_hint	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:Keys
size_hint	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:Values
size_hint	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	f
size_hint	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	f
size_hint	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:Iter
size_hint	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	f
size_hint	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	f
size_hint	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	f
size_hint	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	f
size_hint	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:ConsumingIter
size_hint	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:Iter
size_hint	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	f
size_hint	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn size_hint(&self) -> Option<usize> {$/;"	P	interface:MapAccess
size_hint	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn size_hint(&self) -> Option<usize> {$/;"	P	interface:SeqAccess
size_hint	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn size_hint(&self) -> Option<usize> {$/;"	f
size_hint	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    fn size_hint(&self) -> Option<usize> {$/;"	f
size_hint	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn size_hint(&self) -> Option<usize> {$/;"	f	module:content
size_hint	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^pub mod size_hint {$/;"	n
size_table_pool_size	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/pool.rs	/^    pub fn size_table_pool_size(&self) -> usize {$/;"	P	implementation:RRBPool
size_up_to	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    fn size_up_to(&self, level: usize, index: usize) -> usize {$/;"	P	implementation:Node
skip	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn skip(&self, n: usize) -> Self {$/;"	f
skip	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    pub fn skip(&self, n: usize) -> Self {$/;"	f
skip	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn skip(&self, count: usize) -> Self {$/;"	P	implementation:Vector
skip_deserializing	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn skip_deserializing(&self) -> bool {$/;"	P	implementation:Field
skip_deserializing	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn skip_deserializing(&self) -> bool {$/;"	P	implementation:Variant
skip_deserializing	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    skip_deserializing: bool,$/;"	m	struct:Field
skip_deserializing	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    skip_deserializing: bool,$/;"	m	struct:Variant
skip_field	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn skip_field(&mut self, key: &'static str) -> Result<(), Self::Error> {$/;"	P	interface:SerializeStruct
skip_field	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/mod.rs	/^    fn skip_field(&mut self, key: &'static str) -> Result<(), Self::Error> {$/;"	P	interface:SerializeStructVariant
skip_field	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^    fn skip_field(&self, span: Span) -> Option<TokenStream> {$/;"	P	implementation:StructTrait
skip_serializing	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn skip_serializing(&self) -> bool {$/;"	P	implementation:Field
skip_serializing	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn skip_serializing(&self) -> bool {$/;"	P	implementation:Variant
skip_serializing	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    skip_serializing: bool,$/;"	m	struct:Field
skip_serializing	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    skip_serializing: bool,$/;"	m	struct:Variant
skip_serializing_if	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn skip_serializing_if(&self) -> Option<&syn::ExprPath> {$/;"	P	implementation:Field
skip_serializing_if	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    skip_serializing_if: Option<syn::ExprPath>,$/;"	m	struct:Field
slice	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn slice<R>(&mut self, range: R) -> Self$/;"	P	implementation:Vector
slog_support	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^mod slog_support;$/;"	n
sort	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/lib.rs	/^mod sort;$/;"	n
sort	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn sort(&mut self)$/;"	P	implementation:Vector
sort_by	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn sort_by<F>(&mut self, cmp: F)$/;"	P	implementation:Vector
source	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/std_error.rs	/^    fn source(&self) -> Option<&(Error + 'static)> {$/;"	P	interface:Error
source	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/error.rs	/^        fn source(&self) -> Option<&(dyn error::Error + 'static)> {$/;"	P	implementation:std_support::Error
spanned_tokens	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^fn spanned_tokens(s: &syn::LitStr) -> parse::Result<TokenStream> {$/;"	f
spec_vals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^    fn spec_vals(&self, a: &ArgWithDisplay) -> String {$/;"	P	implementation:Help
split	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/osstringext.rs	/^    fn split(&self, b: u8) -> OsSplit {$/;"	P	implementation:OsStr
split	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/osstringext.rs	/^    fn split(&self, b: u8) -> OsSplit;$/;"	P	interface:OsStrExt2
split	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    fn split($/;"	P	implementation:Node
split	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    pub(crate) fn split($/;"	P	implementation:Node
split	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn split<BK>(&self, split: &BK) -> (Self, Self)$/;"	f
split	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    pub fn split<BA>(self, split: &BA) -> (Self, Self)$/;"	f
split	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^        fn split(self) -> (A, B) {$/;"	P	implementation:private::B
split	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^        fn split(self) -> (Self::First, Self::Second);$/;"	P	interface:private::Pair
split_at	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/osstringext.rs	/^    fn split_at(&self, i: usize) -> (&OsStr, &OsStr) {$/;"	P	implementation:OsStr
split_at	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/osstringext.rs	/^    fn split_at(&self, i: usize) -> (&OsStr, &OsStr);$/;"	P	interface:OsStrExt2
split_at	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    fn split_at(self, index: usize) -> (Self, Self) {$/;"	f
split_at	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    pub fn split_at(self, index: usize) -> (Self, Self) {$/;"	f
split_at	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn split_at(mut self, index: usize) -> (Self, Self) {$/;"	P	implementation:Vector
split_at	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/rayon.rs	/^    fn split_at(self, index: usize) -> (Self, Self) {$/;"	f
split_at_byte	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/osstringext.rs	/^    fn split_at_byte(&self, b: u8) -> (&OsStr, &OsStr);$/;"	P	interface:OsStrExt2
split_at_byte	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/osstringext.rs	/^    fn split_at_byte(&self, byte: u8) -> (&OsStr, &OsStr) {$/;"	P	implementation:OsStr
split_lookup	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn split_lookup<BK>(&self, split: &BK) -> (Self, Option<V>, Self)$/;"	f
split_member	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    pub fn split_member<BA>(self, split: &BA) -> (Self, bool, Self)$/;"	f
split_off	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn split_off(&mut self, index: usize) -> Self {$/;"	P	implementation:Vector
split_with_de_lifetime	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn split_with_de_lifetime($/;"	f
stack	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    stack: Vec<ChunkIter<'a, Entry<A>, HashWidth>>,$/;"	m	struct:Iter
stack	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    stack: Vec<ChunkIterMut<'a, Entry<A>, HashWidth>>,$/;"	m	struct:IterMut
stack	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    stack: Vec<PoolRef<Node<A>>>,$/;"	m	struct:Drain
start	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    start: usize,$/;"	m	struct:UsageParser
starts	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^        fn starts(h: &str, n: &OsStr) -> bool {$/;"	f	function:possible_subcommand
starts_with	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/osstringext.rs	/^    fn starts_with(&self, s: &[u8]) -> bool {$/;"	P	implementation:OsStr
starts_with	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/osstringext.rs	/^    fn starts_with(&self, s: &[u8]) -> bool;$/;"	P	interface:OsStrExt2
state	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/test.rs	/^    state: u64,$/;"	m	struct:LolHasher
std_error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/lib.rs	/^mod std_error;$/;"	n
std_support	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/error.rs	/^mod std_support {$/;"	n
std_support	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/error.rs	/^mod std_support {$/;"	n
std_support	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/parser/error.rs	/^mod std_support {$/;"	n
step_back	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    fn step_back(path: &mut Vec<(&'a Node<A>, usize)>) -> Option<&'a A> {$/;"	P	implementation:Iter
step_forward	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    fn step_forward(path: &mut Vec<(&'a Node<A>, usize)>) -> Option<&'a A> {$/;"	P	implementation:Iter
stop_at	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    fn stop_at<F>(&mut self, f: F)$/;"	P	implementation:UsageParser
storage	/home/darrion/projects/ClearHeadToDo/src/main.rs	/^mod storage;$/;"	n
str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^const TAB: &'static str = "    ";$/;"	v
str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/lib.rs	/^const INTERNAL_ERROR_MSG: &'static str = "Fatal internal error. Please consider filing a bug \\$/;"	v
str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/lib.rs	/^const INVALID_UTF8: &'static str = "unexpected invalid UTF-8 code point";$/;"	v
str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/strext.rs	/^impl _StrExt for str {$/;"	c
str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^        const FIELDS: &'static [&'static str] = &["secs", "nanos"];$/;"	v	method:Duration::deserialize
str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^        const FIELDS: &'static [&'static str] = &["secs_since_epoch", "nanos_since_epoch"];$/;"	v	method:SystemTime::deserialize
str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^        const VARIANTS: &'static [&'static str] = &["Ok", "Err"];$/;"	v	function:deserialize
str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^        const VARIANTS: &'static [&'static str] = &["Unbounded", "Included", "Excluded"];$/;"	v	function:deserialize
str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    pub const FIELDS: &'static [&'static str] = &["start", "end"];$/;"	v	module:range
str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'de: 'a, 'a> Deserialize<'de> for &'a str {$/;"	c
str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^impl<'a> Expected for &'a str {$/;"	c
str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<'de, 'a, E> IntoDeserializer<'de, E> for &'a str$/;"	c
str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^impl<'a, E> IdentifierDeserializer<'a, E> for &'a str$/;"	c
str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^impl Serialize for str {$/;"	c
str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/parser/mod.rs	/^        const EXPECTED_CHARS: &'static str = "0123456789abcdefABCDEF-";$/;"	v	function:tests::test_parse_uuid_v4
str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v3.rs	/^    static FIXTURE: &'static [(&'static Uuid, &'static str, &'static str)] = &[$/;"	v	module:tests
str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v5.rs	/^    static FIXTURE: &'static [(&'static Uuid, &'static str, &'static str)] = &[$/;"	v	module:tests
str_width	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^fn str_width(s: &str) -> usize {$/;"	f
strext	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/lib.rs	/^mod strext;$/;"	n
string	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/export.rs	/^mod string {$/;"	n
struct_from_ast	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ast.rs	/^fn struct_from_ast<'a>($/;"	f
struct_pattern	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/pretend.rs	/^fn struct_pattern(fields: &[Field]) -> TokenStream {$/;"	f
struct_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn struct_variant<V>($/;"	P	interface:VariantAccess
struct_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^        fn struct_variant<V>($/;"	f	module:private
struct_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn struct_variant<V>($/;"	f	module:content
style	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ast.rs	/^    pub style: Style,$/;"	m	struct:Variant
subcommand	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn subcommand(mut self, subcmd: App<'a, 'b>) -> Self {$/;"	P	implementation:App
subcommand	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matcher.rs	/^    pub fn subcommand(&mut self, sc: SubCommand<'a>) {$/;"	P	implementation:ArgMatcher
subcommand	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    pub fn subcommand(&self) -> (&str, Option<&ArgMatches<'a>>) {$/;"	P	implementation:ArgMatches
subcommand	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    pub subcommand: Option<Box<SubCommand<'a>>>,$/;"	m	struct:ArgMatches
subcommand	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/mod.rs	/^mod subcommand;$/;"	n
subcommand_details	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/bash.rs	/^    fn subcommand_details(&self) -> String {$/;"	P	implementation:BashGen
subcommand_details	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/zsh.rs	/^fn subcommand_details(p: &Parser) -> String {$/;"	f
subcommand_matches	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    pub fn subcommand_matches<S: AsRef<str>>(&self, name: S) -> Option<&ArgMatches<'a>> {$/;"	P	implementation:ArgMatches
subcommand_name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matcher.rs	/^    pub fn subcommand_name(&self) -> Option<&str> {$/;"	P	implementation:ArgMatcher
subcommand_name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    pub fn subcommand_name(&self) -> Option<&str> {$/;"	P	implementation:ArgMatches
subcommands	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn subcommands<I>(mut self, subcmds: I) -> Self$/;"	P	implementation:App
subcommands	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn subcommands(&self) -> Iter<App> {$/;"	f
subcommands	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub subcommands: Vec<App<'a, 'b>>,$/;"	m	struct:Parser
subcommands_of	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/mod.rs	/^pub fn subcommands_of(p: &Parser) -> Vec<(String, String)> {$/;"	f
subcommands_of	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/zsh.rs	/^fn subcommands_of(p: &Parser) -> String {$/;"	f
successful_cli_rename_task_parse_test	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^    fn successful_cli_rename_task_parse_test() {$/;"	f	module:tests
successful_completion_test	/home/darrion/projects/ClearHeadToDo/src/task.rs	/^    fn successful_completion_test() -> Result<(), Box<dyn Error>> {$/;"	f	module:test
successful_reprioritize_test	/home/darrion/projects/ClearHeadToDo/src/task.rs	/^    fn successful_reprioritize_test() -> Result<(), Box<dyn Error>> {$/;"	f	module:test
successful_search_tasks_by_index_test	/home/darrion/projects/ClearHeadToDo/src/lib.rs	/^        fn successful_search_tasks_by_index_test() -> Result<(), Box<dyn Error>> {$/;"	f	module:tests::task_list
successful_task_completion_test	/home/darrion/projects/ClearHeadToDo/src/lib.rs	/^        fn successful_task_completion_test() {$/;"	f	module:tests::task_list
successful_task_removal_test	/home/darrion/projects/ClearHeadToDo/src/lib.rs	/^        fn successful_task_removal_test() {$/;"	f	module:tests::task_list
successful_task_rename_test	/home/darrion/projects/ClearHeadToDo/src/lib.rs	/^        fn successful_task_rename_test() {$/;"	f	module:tests::task_list
successful_task_reprioritize_test	/home/darrion/projects/ClearHeadToDo/src/lib.rs	/^        fn successful_task_reprioritize_test() {$/;"	f	module:tests::task_list
suffix_enum	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/suggestions.rs	/^    fn suffix_enum() {$/;"	f	module:test
suffix_long	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/suggestions.rs	/^    fn suffix_long() {$/;"	f	module:test
suggestions	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/lib.rs	/^mod suggestions;$/;"	n
sum	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn sum<I>(it: I) -> Self$/;"	f
sum	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    fn sum<I>(it: I) -> Self$/;"	f
sum	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    fn sum<I>(it: I) -> Self$/;"	f
sum	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    fn sum<I>(it: I) -> Self$/;"	P	implementation:OrdSet
sum	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    fn sum<I>(it: I) -> Self$/;"	P	implementation:Vector
swap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    pub fn swap(&mut self, a: usize, b: usize) {$/;"	f
swap	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn swap(&mut self, i: usize, j: usize) {$/;"	P	implementation:Vector
swap_indices	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/util.rs	/^pub(crate) fn swap_indices<V>(vector: &mut V, a: usize, b: usize)$/;"	f
switched	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/mod.rs	/^mod switched;$/;"	n
symbol	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/mod.rs	/^mod symbol;$/;"	n
symmetric_difference	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn symmetric_difference(self, other: Self) -> Self {$/;"	f
symmetric_difference	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    pub fn symmetric_difference(mut self, other: Self) -> Self {$/;"	f
symmetric_difference	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn symmetric_difference(self, other: Self) -> Self {$/;"	f
symmetric_difference	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    pub fn symmetric_difference(mut self, other: Self) -> Self {$/;"	f
symmetric_difference_with	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn symmetric_difference_with<F>(self, other: Self, mut f: F) -> Self$/;"	f
symmetric_difference_with	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn symmetric_difference_with<F>(self, other: Self, mut f: F) -> Self$/;"	f
symmetric_difference_with_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn symmetric_difference_with_key<F>(mut self, other: Self, mut f: F) -> Self$/;"	f
symmetric_difference_with_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn symmetric_difference_with_key<F>(mut self, other: Self, mut f: F) -> Self$/;"	f
syn_error	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ctxt.rs	/^    pub fn syn_error(&self, err: syn::Error) {$/;"	P	implementation:Ctxt
sync	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/lib.rs	/^mod sync;$/;"	n
table_from_size	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    fn table_from_size(pool: &Pool<Chunk<usize>>, level: usize, size: usize) -> Self {$/;"	P	implementation:Size
tag	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        pub tag: &'static str,$/;"	m	struct:content::TagContentOtherFieldVisitor
tag	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        pub tag: &'static str,$/;"	m	struct:content::TagOrContentFieldVisitor
tag	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        pub tag: T,$/;"	m	struct:content::TaggedContent
tag	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    tag: &'static str,$/;"	m	struct:TaggedSerializer
tag	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn tag(&self) -> &TagType {$/;"	P	implementation:Container
tag	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    tag: TagType,$/;"	m	struct:Container
tag_name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        tag_name: &'static str,$/;"	m	struct:content::TaggedContentVisitor
take	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn take(&self, n: usize) -> Self {$/;"	f
take	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    pub fn take(&self, n: usize) -> Self {$/;"	f
take	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn take(&self, count: usize) -> Self {$/;"	P	implementation:Vector
takes_value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    fn takes_value(&self) -> bool {$/;"	P	implementation:App
takes_value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn takes_value(&self) -> bool {$/;"	f
takes_value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn takes_value(&self) -> bool;$/;"	P	interface:AnyArg
takes_value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn takes_value(self, tv: bool) -> Self {$/;"	P	implementation:Arg
takes_value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^    fn takes_value(&self) -> bool {$/;"	P	implementation:FlagBuilder
takes_value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    fn takes_value(&self) -> bool {$/;"	P	implementation:OptBuilder
takes_value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    fn takes_value(&self) -> bool {$/;"	P	implementation:PosBuilder
target_ptr	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    target_ptr: *const Chunk<A>,$/;"	m	struct:TreeFocus
target_ptr	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    target_ptr: AtomicPtr<Chunk<A>>,$/;"	m	struct:TreeFocusMut
target_range	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    target_range: Range<usize>,$/;"	m	struct:TreeFocus
target_range	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    target_range: Range<usize>,$/;"	m	struct:TreeFocusMut
task	/home/darrion/projects/ClearHeadToDo/src/lib.rs	/^pub mod task;$/;"	n
task	/home/darrion/projects/ClearHeadToDo/src/main.rs	/^mod task;$/;"	n
task_creation_unique_id_test	/home/darrion/projects/ClearHeadToDo/src/task.rs	/^    fn task_creation_unique_id_test() {$/;"	f	module:test
task_failed_search_by_id_test	/home/darrion/projects/ClearHeadToDo/src/lib.rs	/^        fn task_failed_search_by_id_test() -> Result<(), Box<dyn Error>> {$/;"	f	module:tests::task_list
task_failed_search_by_index_test	/home/darrion/projects/ClearHeadToDo/src/lib.rs	/^        fn task_failed_search_by_index_test() -> Result<(), Box<dyn Error>> {$/;"	f	module:tests::task_list
task_list	/home/darrion/projects/ClearHeadToDo/src/lib.rs	/^    mod task_list {$/;"	n	module:tests
task_list_creation_test	/home/darrion/projects/ClearHeadToDo/src/lib.rs	/^        fn task_list_creation_test() {$/;"	f	module:tests::task_list
task_print_fail_test	/home/darrion/projects/ClearHeadToDo/src/lib.rs	/^        fn task_print_fail_test() {$/;"	f	module:tests::task_list
task_print_successful_test	/home/darrion/projects/ClearHeadToDo/src/lib.rs	/^        fn task_print_successful_test() -> Result<(), Box<dyn Error>> {$/;"	f	module:tests::task_list
task_successful_search_by_id_test	/home/darrion/projects/ClearHeadToDo/src/lib.rs	/^        fn task_successful_search_by_id_test() -> Result<(), Box<dyn Error>> {$/;"	f	module:tests::task_list
tasks	/home/darrion/projects/ClearHeadToDo/src/lib.rs	/^    pub tasks: im::Vector<Task>,$/;"	m	struct:TaskList
template	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/meta.rs	/^    pub template: Option<&'b str>,$/;"	m	struct:AppMeta
template	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn template<S: Into<&'b str>>(mut self, s: S) -> Self {$/;"	P	implementation:App
term_size	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^mod term_size {$/;"	n
term_w	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^    term_w: usize,$/;"	m	struct:Help
term_w	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/meta.rs	/^    pub term_w: Option<usize>,$/;"	m	struct:AppMeta
terminator	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/valued.rs	/^    pub terminator: Option<&'b str>,$/;"	m	struct:Valued
test	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^mod test {$/;"	n
test	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^mod test {$/;"	n
test	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^mod test {$/;"	n
test	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^mod test {$/;"	n
test	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^mod test {$/;"	n
test	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/group.rs	/^mod test {$/;"	n
test	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/settings.rs	/^mod test {$/;"	n
test	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/fmt.rs	/^mod test {$/;"	n
test	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/suggestions.rs	/^mod test {$/;"	n
test	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^mod test {$/;"	n
test	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^mod test {$/;"	n
test	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^mod test {$/;"	n
test	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/lib.rs	/^mod test;$/;"	n
test	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^mod test {$/;"	n
test	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^mod test {$/;"	n
test	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ser.rs	/^mod test {$/;"	n
test	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/sort.rs	/^mod test {$/;"	n
test	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^mod test {$/;"	n
test	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/rayon.rs	/^mod test {$/;"	n
test	/home/darrion/projects/ClearHeadToDo/src/task.rs	/^mod test {$/;"	n
test_as_bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    fn test_as_bytes() {$/;"	f	module:tests
test_as_fields	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    fn test_as_fields() {$/;"	f	module:tests
test_bytes_roundtrip	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    fn test_bytes_roundtrip() {$/;"	f	module:tests
test_de_failure	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/serde_support.rs	/^    fn test_de_failure() {$/;"	f	module:serde_tests
test_debug	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/group.rs	/^    fn test_debug() {$/;"	f	module:test
test_default_indices	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    fn test_default_indices() {$/;"	f	module:tests
test_default_indices_with_shorter_lifetime	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    fn test_default_indices_with_shorter_lifetime() {$/;"	f	module:tests
test_default_osvalues	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    fn test_default_osvalues() {$/;"	f	module:tests
test_default_osvalues_with_shorter_lifetime	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    fn test_default_osvalues_with_shorter_lifetime() {$/;"	f	module:tests
test_default_values	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    fn test_default_values() {$/;"	f	module:tests
test_default_values_with_shorter_lifetime	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    fn test_default_values_with_shorter_lifetime() {$/;"	f	module:tests
test_eq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    fn test_eq(&self, other: &Self) -> bool$/;"	f
test_eq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    fn test_eq(&self, other: &Self) -> bool {$/;"	f
test_fields_le_are_actually_le	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    fn test_fields_le_are_actually_le() {$/;"	f	module:tests
test_fields_le_roundtrip	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    fn test_fields_le_roundtrip() {$/;"	f	module:tests
test_fields_roundtrip	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    fn test_fields_roundtrip() {$/;"	f	module:tests
test_from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/group.rs	/^    fn test_from() {$/;"	f	module:test
test_from_bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    fn test_from_bytes() {$/;"	f	module:tests
test_from_fields	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    fn test_from_fields() {$/;"	f	module:tests
test_from_fields_le	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    fn test_from_fields_le() {$/;"	f	module:tests
test_from_guid	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/winapi_support.rs	/^    fn test_from_guid() {$/;"	f	module:tests
test_from_slice	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    fn test_from_slice() {$/;"	f	module:tests
test_from_u128	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    fn test_from_u128() {$/;"	f	module:tests
test_from_u128_le	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    fn test_from_u128_le() {$/;"	f	module:tests
test_get_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    fn test_get_variant() {$/;"	f	module:tests
test_get_version	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v4.rs	/^    fn test_get_version() {$/;"	f	module:tests
test_get_version	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v5.rs	/^    fn test_get_version() {$/;"	f	module:tests
test_get_version_v3	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    fn test_get_version_v3() {$/;"	f	module:tests
test_guid_roundtrip	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/winapi_support.rs	/^    fn test_guid_roundtrip() {$/;"	f	module:tests
test_hyphenated	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v5.rs	/^    fn test_hyphenated() {$/;"	f	module:tests
test_inserts	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/tests/vector.rs	/^fn test_inserts() {$/;"	f
test_iterbytes_impl_for_uuid	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    fn test_iterbytes_impl_for_uuid() {$/;"	f	module:tests
test_new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v3.rs	/^    fn test_new() {$/;"	f	module:tests
test_new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v4.rs	/^    fn test_new() {$/;"	f	module:tests
test_new	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v5.rs	/^    fn test_new() {$/;"	f	module:tests
test_new_v1	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v1.rs	/^    fn test_new_v1() {$/;"	f	module:tests
test_nil	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    fn test_nil() {$/;"	f	module:tests
test_parse_uuid_v4	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/parser/mod.rs	/^    fn test_parse_uuid_v4() {$/;"	f	module:tests
test_predefined_namespaces	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    fn test_predefined_namespaces() {$/;"	f	module:tests
test_serialize_compact	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/compact.rs	/^    fn test_serialize_compact() {$/;"	f	module:tests
test_serialize_compact	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/serde_support.rs	/^    fn test_serialize_compact() {$/;"	f	module:serde_tests
test_serialize_readable	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/serde_support.rs	/^    fn test_serialize_readable() {$/;"	f	module:serde_tests
test_slog_kv	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/slog_support.rs	/^    fn test_slog_kv() {$/;"	f	module:tests
test_string_roundtrip	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    fn test_string_roundtrip() {$/;"	f	module:tests
test_to_hyphenated_string	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    fn test_to_hyphenated_string() {$/;"	f	module:tests
test_to_hyphenated_string	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v3.rs	/^    fn test_to_hyphenated_string() {$/;"	f	module:tests
test_to_simple_string	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    fn test_to_simple_string() {$/;"	f	module:tests
test_to_simple_string_matching	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    fn test_to_simple_string_matching() {$/;"	f	module:tests
test_to_urn_string	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    fn test_to_urn_string() {$/;"	f	module:tests
test_u128_le_is_actually_le	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    fn test_u128_le_is_actually_le() {$/;"	f	module:tests
test_u128_le_roundtrip	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    fn test_u128_le_roundtrip() {$/;"	f	module:tests
test_u128_roundtrip	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    fn test_u128_roundtrip() {$/;"	f	module:tests
test_upper_lower_hex	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    fn test_upper_lower_hex() {$/;"	f	module:tests
test_util	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/error.rs	/^mod test_util {$/;"	n
test_util	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^mod test_util;$/;"	n
test_uuid_compare	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    fn test_uuid_compare() {$/;"	f	module:tests
test_uuid_default	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    fn test_uuid_default() {$/;"	f	module:tests
test_uuid_display	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    fn test_uuid_display() {$/;"	f	module:tests
test_uuid_lowerhex	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    fn test_uuid_lowerhex() {$/;"	f	module:tests
test_uuid_operator_eq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    fn test_uuid_operator_eq() {$/;"	f	module:tests
test_uuid_to_string	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    fn test_uuid_to_string() {$/;"	f	module:tests
test_uuid_upperhex	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    fn test_uuid_upperhex() {$/;"	f	module:tests
test_windows_osstr_starts_with	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/osstringext.rs	/^fn test_windows_osstr_starts_with() {$/;"	f
test_yaml	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/group.rs	/^    fn test_yaml() {$/;"	f	module:test
tests	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^mod tests {$/;"	n
tests	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/lib.rs	/^mod tests;$/;"	n
tests	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/compact.rs	/^mod tests {$/;"	n
tests	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^mod tests {$/;"	n
tests	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^mod tests {$/;"	n
tests	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/parser/mod.rs	/^mod tests {$/;"	n
tests	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/slog_support.rs	/^mod tests {$/;"	n
tests	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v1.rs	/^mod tests {$/;"	n
tests	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v3.rs	/^mod tests {$/;"	n
tests	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v4.rs	/^mod tests {$/;"	n
tests	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v5.rs	/^mod tests {$/;"	n
tests	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/winapi_support.rs	/^mod tests {$/;"	n
tests	/home/darrion/projects/ClearHeadToDo/src/cli.rs	/^mod tests {$/;"	n
tests	/home/darrion/projects/ClearHeadToDo/src/lib.rs	/^mod tests {$/;"	n
tests	/home/darrion/projects/ClearHeadToDo/src/storage.rs	/^mod tests {$/;"	n
this	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^    this: syn::Path,$/;"	m	struct:Parameters
this	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^    this: syn::Path,$/;"	m	struct:Parameters
ticks	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v1.rs	/^    ticks: u64,$/;"	m	struct:Timestamp
to_compile_errors	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/lib.rs	/^fn to_compile_errors(errors: Vec<syn::Error>) -> proc_macro2::TokenStream {$/;"	f
to_fields_le	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    pub fn to_fields_le(&self) -> (u32, u16, u16, &[u8; 8]) {$/;"	P	implementation:Uuid
to_guid	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/winapi_support.rs	/^    pub fn to_guid(&self) -> guiddef::GUID {$/;"	P	implementation:Uuid
to_hyphenated	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^    pub const fn to_hyphenated(self) -> Hyphenated {$/;"	P	implementation:Uuid
to_hyphenated_ref	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^    pub const fn to_hyphenated_ref(&self) -> HyphenatedRef<'_> {$/;"	P	implementation:Uuid
to_range	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/util.rs	/^pub(crate) fn to_range<R>(range: &R, right_unbounded: usize) -> Range<usize>$/;"	f
to_rfc4122	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v1.rs	/^    pub const fn to_rfc4122(&self) -> (u64, u16) {$/;"	P	implementation:Timestamp
to_simple	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^    pub const fn to_simple(self) -> Simple {$/;"	P	implementation:Uuid
to_simple_ref	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^    pub const fn to_simple_ref(&self) -> SimpleRef<'_> {$/;"	P	implementation:Uuid
to_str_slice	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^            fn to_str_slice(o: &OsString) -> &str {$/;"	f	method:ArgMatches::values_of
to_str_slice	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^        fn to_str_slice(_: &OsString) -> &OsStr {$/;"	f	method:OsValues::default
to_str_slice	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^        fn to_str_slice(_: &OsString) -> &str {$/;"	f	method:Values::default
to_str_slice	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^        fn to_str_slice(o: &OsString) -> &OsStr {$/;"	f	method:ArgMatches::values_of_os
to_timestamp	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v1.rs	/^    pub fn to_timestamp(&self) -> Option<Timestamp> {$/;"	P	implementation:Uuid
to_tokens	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^    fn to_tokens(&self, tokens: &mut TokenStream) {$/;"	P	implementation:DeImplGenerics
to_tokens	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^    fn to_tokens(&self, tokens: &mut TokenStream) {$/;"	P	implementation:DeTypeGenerics
to_tokens	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^    fn to_tokens(&self, tokens: &mut TokenStream) {$/;"	P	implementation:InPlaceImplGenerics
to_tokens	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^    fn to_tokens(&self, tokens: &mut TokenStream) {$/;"	P	implementation:InPlaceTypeGenerics
to_tokens	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/fragment.rs	/^    fn to_tokens(&self, out: &mut TokenStream) {$/;"	P	implementation:Expr
to_tokens	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/fragment.rs	/^    fn to_tokens(&self, out: &mut TokenStream) {$/;"	P	implementation:Match
to_tokens	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/fragment.rs	/^    fn to_tokens(&self, out: &mut TokenStream) {$/;"	P	implementation:Stmts
to_u128_le	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^    pub fn to_u128_le(&self) -> u128 {$/;"	P	implementation:Uuid
to_unix	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v1.rs	/^    pub const fn to_unix(&self) -> (u64, u32) {$/;"	P	implementation:Timestamp
to_unix_nanos	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/v1.rs	/^    pub const fn to_unix_nanos(&self) -> u64 {$/;"	P	implementation:Timestamp
to_urn	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^    pub const fn to_urn(self) -> Urn {$/;"	P	implementation:Uuid
to_urn_ref	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^    pub const fn to_urn_ref(&self) -> UrnRef<'_> {$/;"	P	implementation:Uuid
to_usize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^            fn to_usize(i: &usize) -> usize {$/;"	f	method:ArgMatches::indices_of
to_usize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^        fn to_usize(_: &usize) -> usize {$/;"	f	method:Indices::default
token	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^fn token(b: u8) -> bool {$/;"	f
tokens	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    tokens: TokenStream,$/;"	m	struct:Attr
too_few_values	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    pub fn too_few_values<U>($/;"	P	implementation:Error
too_many_values	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    pub fn too_many_values<V, U>(val: V, arg: &AnyArg, usage: U, color: ColorWhen) -> Self$/;"	P	implementation:Error
too_small	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    fn too_small(&self) -> bool {$/;"	P	implementation:Node
transparent	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn transparent(&self) -> bool {$/;"	P	implementation:Container
transparent	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn transparent(&self) -> bool {$/;"	P	implementation:Field
transparent	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    transparent: bool,$/;"	m	struct:Container
transparent	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    transparent: bool,$/;"	m	struct:Field
tree	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    tree: Lock<&'a mut RRB<A>>,$/;"	m	struct:TreeFocusMut
tree	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    tree: RRB<A>,$/;"	m	struct:TreeFocus
trim_left_matches	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/osstringext.rs	/^    fn trim_left_matches(&self, b: u8) -> &OsStr;$/;"	P	interface:OsStrExt2
trim_left_matches	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/osstringext.rs	/^    fn trim_left_matches(&self, byte: u8) -> &OsStr {$/;"	P	implementation:OsStr
triplet	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    pub fn triplet<F, B>(&mut self, a: usize, b: usize, c: usize, mut f: F) -> B$/;"	f
truncate	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn truncate(&mut self, len: usize) {$/;"	P	implementation:Vector
try	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/lib.rs	/^mod try;$/;"	n
try_from_argmatches	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/lib.rs	/^        fn try_from_argmatches<'a>(matches: clap::ArgMatches<'a>) -> Result<Self, clap::Error>;$/;"	P	interface:derive::FromArgMatches
try_parse	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/lib.rs	/^        fn try_parse() -> Result<Self, clap::Error> {$/;"	P	interface:derive::ClapApp
try_parse_from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/lib.rs	/^        fn try_parse_from<I, T>(argv: I) -> Result<Self, clap::Error>$/;"	P	interface:derive::ClapApp
tuple_impls	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^macro_rules! tuple_impls {$/;"	M
tuple_impls	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impls.rs	/^macro_rules! tuple_impls {$/;"	M
tuple_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn tuple_variant<V>(self, len: usize, visitor: V) -> Result<V::Value, Self::Error>$/;"	P	interface:VariantAccess
tuple_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^        fn tuple_variant<V>(mut self, len: usize, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:private
tuple_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^        fn tuple_variant<V>(self, _len: usize, _visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:private
tuple_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn tuple_variant<V>(self, _len: usize, visitor: V) -> Result<V::Value, Self::Error>$/;"	f	module:content
ty	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/ast.rs	/^    pub ty: &'a syn::Type,$/;"	m	struct:Field
type_from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn type_from(&self) -> Option<&syn::Type> {$/;"	P	implementation:Container
type_from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    type_from: Option<syn::Type>,$/;"	m	struct:Container
type_ident	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    type_ident: &'static str,$/;"	m	struct:TaggedSerializer
type_into	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn type_into(&self) -> Option<&syn::Type> {$/;"	P	implementation:Container
type_into	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    type_into: Option<syn::Type>,$/;"	m	struct:Container
type_name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        type_name: &'a str,$/;"	m	struct:content::InternallyTaggedUnitVisitor
type_name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        type_name: &'a str,$/;"	m	struct:content::UntaggedUnitVisitor
type_name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^    fn type_name(&self) -> String {$/;"	P	implementation:Parameters
type_name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^    fn type_name(&self) -> String {$/;"	P	implementation:Parameters
type_of_item	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/bound.rs	/^fn type_of_item(cont: &Container) -> syn::Type {$/;"	f
type_try_from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    pub fn type_try_from(&self) -> Option<&syn::Type> {$/;"	P	implementation:Container
type_try_from	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    type_try_from: Option<syn::Type>,$/;"	m	struct:Container
u	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/compact.rs	/^            u: crate::Uuid,$/;"	m	struct:tests::test_serialize_compact::UuidContainer
u32	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^impl<'de, E> IntoDeserializer<'de, E> for u32$/;"	c
u32	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^impl<'de, E> IdentifierDeserializer<'de, E> for u32$/;"	c
u8	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^impl<'de: 'a, 'a> Deserialize<'de> for &'a [u8] {$/;"	c
u8	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^impl<'a, E> IdentifierDeserializer<'a, E> for &'a [u8]$/;"	c
uint_to	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/from_primitive.rs	/^macro_rules! uint_to {$/;"	M
unexpected	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn unexpected(&self) -> Unexpected {$/;"	P	implementation:content::Content
unexpected_multiple_usage	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    pub fn unexpected_multiple_usage<U>(arg: &AnyArg, usage: U, color: ColorWhen) -> Self$/;"	P	implementation:Error
unfold	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/iter.rs	/^pub fn unfold<F, S, A>(value: S, f: F) -> impl Iterator<Item = A>$/;"	f
ungroup	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/mod.rs	/^pub fn ungroup(mut ty: &Type) -> &Type {$/;"	f
unified_ord	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/switched.rs	/^    pub unified_ord: usize,$/;"	m	struct:Switched
union	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn union(mut self, other: Self) -> Self {$/;"	f
union	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    pub fn union(mut self, other: Self) -> Self {$/;"	f
union	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn union(mut self, other: Self) -> Self {$/;"	f
union	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    pub fn union(mut self, other: Self) -> Self {$/;"	f
union_with	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn union_with<F>(self, other: Self, mut f: F) -> Self$/;"	f
union_with	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn union_with<F>(self, other: Self, mut f: F) -> Self$/;"	f
union_with_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn union_with_key<F>(mut self, other: Self, mut f: F) -> Self$/;"	f
union_with_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn union_with_key<F>(mut self, other: Self, mut f: F) -> Self$/;"	f
unions	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn unions<I>(i: I) -> Self$/;"	f
unions	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    pub fn unions<I>(i: I) -> Self$/;"	f
unions	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn unions<I>(i: I) -> Self$/;"	f
unions	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    pub fn unions<I>(i: I) -> Self$/;"	f
unions_with	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn unions_with<I, F>(i: I, f: F) -> Self$/;"	f
unions_with	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn unions_with<I, F>(i: I, f: F) -> Self$/;"	f
unions_with_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn unions_with_key<I, F>(i: I, f: F) -> Self$/;"	f
unions_with_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn unions_with_key<I, F>(i: I, f: F) -> Self$/;"	f
unit	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn unit(k: K, v: V) -> HashMap<K, V> {$/;"	f
unit	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    pub fn unit(a: A) -> Self {$/;"	f
unit	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/btree.rs	/^    pub(crate) fn unit(value: A) -> Self {$/;"	P	implementation:Node
unit	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    pub(crate) fn unit(index: usize, value: Entry<A>) -> Self {$/;"	P	implementation:Node
unit	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn unit(key: K, value: V) -> Self {$/;"	P	implementation:OrdMap
unit	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    pub fn unit(a: A) -> Self {$/;"	P	implementation:OrdSet
unit	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn unit(a: A) -> Self {$/;"	P	implementation:Vector
unit_only	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    pub fn unit_only<T, E>(t: T) -> (T, UnitOnly<E>) {$/;"	f	module:private
unit_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn unit_variant(self) -> Result<(), Self::Error>;$/;"	P	interface:VariantAccess
unit_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^        fn unit_variant(mut self) -> Result<(), Self::Error> {$/;"	f	module:private
unit_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^        fn unit_variant(self) -> Result<(), Self::Error> {$/;"	f	module:private
unit_variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn unit_variant(self) -> Result<(), E> {$/;"	f	module:content
unknown_argument	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    pub fn unknown_argument<A, U>(arg: A, did_you_mean: &str, usage: U, color: ColorWhen) -> Sel/;"	P	implementation:Error
unmut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    pub fn unmut(self) -> Focus<'a, A> {$/;"	f
unraw	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/dummy.rs	/^fn unraw(ident: &Ident) -> String {$/;"	f
unraw	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^fn unraw(ident: &Ident) -> String {$/;"	f
unrecognized_subcommand	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    pub fn unrecognized_subcommand<S, N>(subcmd: S, name: N, color: ColorWhen) -> Self$/;"	P	implementation:Error
unset	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn unset(&mut self, s: AS) {$/;"	f
unset	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn unset(mut self, s: ArgSettings) -> Self {$/;"	P	implementation:Arg
unset	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/base.rs	/^    pub fn unset(&mut self, s: ArgSettings) {$/;"	P	implementation:Base
unset_setting	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn unset_setting(mut self, setting: AppSettings) -> Self {$/;"	P	implementation:App
unset_settings	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn unset_settings(mut self, settings: &[AppSettings]) -> Self {$/;"	P	implementation:App
unsetb	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn unsetb(&mut self, s: ArgSettings) {$/;"	P	implementation:Arg
unwrap_nodes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    fn unwrap_nodes(&self) -> &Chunk<Node<A>> {$/;"	P	implementation:Entry
unwrap_nodes_mut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    fn unwrap_nodes_mut(&mut self, pool: &RRBPool<A>) -> &mut Chunk<Node<A>> {$/;"	P	implementation:Entry
unwrap_or_clone	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^    pub(crate) fn unwrap_or_clone(this: Self) -> A$/;"	P	implementation:Arc
unwrap_or_clone	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/fakepool.rs	/^    pub(crate) fn unwrap_or_clone(this: Self) -> A$/;"	P	implementation:Rc
unwrap_value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/hamt.rs	/^    fn unwrap_value(self) -> A {$/;"	P	implementation:Entry
unwrap_values	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    fn unwrap_values(&self) -> &Chunk<A> {$/;"	P	implementation:Entry
unwrap_values_mut	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    fn unwrap_values_mut(&mut self, pool: &RRBPool<A>) -> &mut Chunk<A> {$/;"	P	implementation:Entry
update	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn update(&self, k: K, v: V) -> Self {$/;"	f
update	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    pub fn update(&self, a: A) -> Self {$/;"	f
update	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    fn update(&mut self, pool: &Pool<Chunk<usize>>, index: usize, level: usize, value: isize) {$/;"	P	implementation:Size
update	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn update(&self, key: K, value: V) -> Self {$/;"	f
update	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    pub fn update(&self, a: A) -> Self {$/;"	f
update	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn update(&self, index: usize, value: A) -> Self {$/;"	P	implementation:Vector
update_in	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/lib.rs	/^    fn update_in() {$/;"	f	module:lib_test
update_in	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/lib.rs	/^macro_rules! update_in {$/;"	M
update_lookup_with_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn update_lookup_with_key<F>(&self, k: K, v: V, f: F) -> (Option<V>, Self)$/;"	f
update_lookup_with_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn update_lookup_with_key<F>(self, k: K, v: V, f: F) -> (Option<V>, Self)$/;"	f
update_size	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    fn update_size(&mut self, pool: &RRBPool<A>, index: usize, level: usize, value: isize) {$/;"	P	implementation:Node
update_with	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn update_with<F>(&self, k: K, v: V, f: F) -> Self$/;"	f
update_with	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn update_with<F>(self, k: K, v: V, f: F) -> Self$/;"	f
update_with_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn update_with_key<F>(&self, k: K, v: V, f: F) -> Self$/;"	f
update_with_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn update_with_key<F>(self, k: K, v: V, f: F) -> Self$/;"	f
urn_ref_too_small	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^    fn urn_ref_too_small() {$/;"	f	module:tests
urn_ref_trailing	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^    fn urn_ref_trailing() {$/;"	f	module:tests
urn_too_small	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^    fn urn_too_small() {$/;"	f	module:tests
urn_trailing	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs	/^    fn urn_trailing() {$/;"	f	module:tests
usage	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/meta.rs	/^    pub usage: Option<String>,$/;"	m	struct:AppMeta
usage	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn usage<S: Into<&'b str>>(mut self, usage: S) -> Self {$/;"	P	implementation:App
usage	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^mod usage;$/;"	n
usage	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matcher.rs	/^    pub fn usage(&mut self, usage: String) {$/;"	P	implementation:ArgMatcher
usage	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    pub fn usage(&self) -> &str {$/;"	P	implementation:ArgMatches
usage	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    pub usage: Option<String>,$/;"	m	struct:ArgMatches
usage	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/usage_parser.rs	/^    usage: &'a str,$/;"	m	struct:UsageParser
usage_parser	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/lib.rs	/^mod usage_parser;$/;"	n
usage_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/meta.rs	/^    pub usage_str: Option<&'b str>,$/;"	m	struct:AppMeta
use_delimiter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn use_delimiter(mut self, d: bool) -> Self {$/;"	P	implementation:Arg
use_long	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^    use_long: bool,$/;"	m	struct:Help
use_long_help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    fn use_long_help(&self) -> bool {$/;"	f
use_stderr	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    pub fn use_stderr(&self) -> bool {$/;"	P	implementation:Error
use_stderr	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/fmt.rs	/^    pub use_stderr: bool,$/;"	m	struct:ColorizerOption
utf8	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^mod utf8;$/;"	n
util	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/lib.rs	/^mod util;$/;"	n
v	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub v: Valued<'a, 'b>,$/;"	m	struct:Arg
v	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    pub v: Valued<'n, 'e>,$/;"	m	struct:OptBuilder
v	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    pub v: Valued<'n, 'e>,$/;"	m	struct:PosBuilder
v1	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^pub mod v1;$/;"	n
v3	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^mod v3;$/;"	n
v4	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^mod v4;$/;"	n
v5	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^mod v5;$/;"	n
val	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^    fn val<'b, 'c>(&mut self, arg: &ArgWithDisplay<'b, 'c>) -> Result<String, io::Error> {$/;"	P	implementation:Help
val	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/osstringext.rs	/^    val: &'a [u8],$/;"	m	struct:OsSplit
val_delim	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    fn val_delim(&self) -> Option<char> {$/;"	P	implementation:App
val_delim	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn val_delim(&self) -> Option<char> {$/;"	f
val_delim	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn val_delim(&self) -> Option<char>;$/;"	P	interface:AnyArg
val_delim	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^    fn val_delim(&self) -> Option<char> {$/;"	P	implementation:FlagBuilder
val_delim	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    fn val_delim(&self) -> Option<char> {$/;"	P	implementation:OptBuilder
val_delim	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    fn val_delim(&self) -> Option<char> {$/;"	P	implementation:PosBuilder
val_delim	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/valued.rs	/^    pub val_delim: Option<char>,$/;"	m	struct:Valued
val_names	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    fn val_names(&self) -> Option<&VecMap<&'e str>> {$/;"	P	implementation:App
val_names	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn val_names(&self) -> Option<&VecMap<&'e str>> {$/;"	f
val_names	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn val_names(&self) -> Option<&VecMap<&'e str>>;$/;"	P	interface:AnyArg
val_names	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^    fn val_names(&self) -> Option<&VecMap<&'e str>> {$/;"	P	implementation:FlagBuilder
val_names	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    fn val_names(&self) -> Option<&VecMap<&'e str>> {$/;"	P	implementation:OptBuilder
val_names	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    fn val_names(&self) -> Option<&VecMap<&'e str>> {$/;"	P	implementation:PosBuilder
val_names	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/valued.rs	/^    pub val_names: Option<VecMap<&'b str>>,$/;"	m	struct:Valued
val_terminator	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    fn val_terminator(&self) -> Option<&'e str> {$/;"	P	implementation:App
val_terminator	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn val_terminator(&self) -> Option<&'e str> {$/;"	f
val_terminator	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn val_terminator(&self) -> Option<&'e str>;$/;"	P	interface:AnyArg
val_terminator	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^    fn val_terminator(&self) -> Option<&'e str> {$/;"	P	implementation:FlagBuilder
val_terminator	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    fn val_terminator(&self) -> Option<&'e str> {$/;"	P	implementation:OptBuilder
val_terminator	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    fn val_terminator(&self) -> Option<&'e str> {$/;"	P	implementation:PosBuilder
validate	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/validator.rs	/^    pub fn validate($/;"	P	implementation:Validator
validate_arg_conflicts	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/validator.rs	/^    fn validate_arg_conflicts(&self, a: &AnyArg, matcher: &ArgMatcher) -> Option<bool> {$/;"	P	implementation:Validator
validate_arg_num_occurs	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/validator.rs	/^    fn validate_arg_num_occurs<A>($/;"	P	implementation:Validator
validate_arg_num_vals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/validator.rs	/^    fn validate_arg_num_vals<A>($/;"	P	implementation:Validator
validate_arg_requires	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/validator.rs	/^    fn validate_arg_requires<A>($/;"	P	implementation:Validator
validate_arg_values	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/validator.rs	/^    fn validate_arg_values<A>($/;"	P	implementation:Validator
validate_blacklist	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/validator.rs	/^    fn validate_blacklist(&self, matcher: &mut ArgMatcher) -> ClapResult<()> {$/;"	P	implementation:Validator
validate_matched_args	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/validator.rs	/^    fn validate_matched_args(&self, matcher: &mut ArgMatcher<'a>) -> ClapResult<()> {$/;"	P	implementation:Validator
validate_required	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/validator.rs	/^    fn validate_required(&mut self, matcher: &ArgMatcher) -> ClapResult<()> {$/;"	P	implementation:Validator
validate_required_unless	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/validator.rs	/^    fn validate_required_unless(&self, a: &AnyArg, matcher: &ArgMatcher) -> Option<bool> {$/;"	P	implementation:Validator
validator	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    fn validator(&self) -> Option<&Rc<Fn(String) -> StdResult<(), String>>> {$/;"	P	implementation:App
validator	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^mod validator;$/;"	n
validator	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn validator(&self) -> Option<&Rc<Fn(String) -> Result<(), String>>> {$/;"	f
validator	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn validator(&self) -> Option<&Rc<Fn(String) -> Result<(), String>>>;$/;"	P	interface:AnyArg
validator	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn validator<F>(mut self, f: F) -> Self$/;"	P	implementation:Arg
validator	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^    fn validator(&self) -> Option<&Rc<Fn(String) -> StdResult<(), String>>> {$/;"	P	implementation:FlagBuilder
validator	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    fn validator(&self) -> Option<&Rc<Fn(String) -> StdResult<(), String>>> {$/;"	P	implementation:OptBuilder
validator	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    fn validator(&self) -> Option<&Rc<Fn(String) -> StdResult<(), String>>> {$/;"	P	implementation:PosBuilder
validator	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/valued.rs	/^    pub validator: Option<Rc<Fn(String) -> Result<(), String>>>,$/;"	m	struct:Valued
validator_os	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    fn validator_os(&self) -> Option<&Rc<Fn(&OsStr) -> StdResult<(), OsString>>> {$/;"	P	implementation:App
validator_os	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn validator_os(&self) -> Option<&Rc<Fn(&OsStr) -> Result<(), OsString>>> {$/;"	f
validator_os	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/any_arg.rs	/^    fn validator_os(&self) -> Option<&Rc<Fn(&OsStr) -> Result<(), OsString>>>;$/;"	P	interface:AnyArg
validator_os	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn validator_os<F>(mut self, f: F) -> Self$/;"	P	implementation:Arg
validator_os	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/flag.rs	/^    fn validator_os(&self) -> Option<&Rc<Fn(&OsStr) -> StdResult<(), OsString>>> {$/;"	P	implementation:FlagBuilder
validator_os	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/option.rs	/^    fn validator_os(&self) -> Option<&Rc<Fn(&OsStr) -> StdResult<(), OsString>>> {$/;"	P	implementation:OptBuilder
validator_os	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/positional.rs	/^    fn validator_os(&self) -> Option<&Rc<Fn(&OsStr) -> StdResult<(), OsString>>> {$/;"	P	implementation:PosBuilder
validator_os	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/valued.rs	/^    pub validator_os: Option<Rc<Fn(&OsStr) -> Result<(), OsString>>>,$/;"	m	struct:Valued
vals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/matched_arg.rs	/^    pub vals: Vec<OsString>,$/;"	m	struct:MatchedArg
vals_for	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/bash.rs	/^    fn vals_for(&self, o: &OptBuilder) -> String {$/;"	P	implementation:BashGen
value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^pub mod value;$/;"	n
value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    value: &'a str,$/;"	m	struct:StrDeserializer
value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    value: &'de [u8],$/;"	m	struct:BorrowedBytesDeserializer
value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    value: &'de str,$/;"	m	struct:BorrowedStrDeserializer
value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    value: Cow<'a, str>,$/;"	m	struct:CowStrDeserializer
value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    value: Option<Second<I::Item>>,$/;"	m	struct:MapDeserializer
value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    value: String,$/;"	m	struct:StringDeserializer
value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    value: u32,$/;"	m	struct:U32Deserializer
value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        value: Option<&'a Content<'de>>,$/;"	m	struct:content::EnumRefDeserializer
value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        value: Option<&'a Content<'de>>,$/;"	m	struct:content::MapRefDeserializer
value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        value: Option<&'a Content<'de>>,$/;"	m	struct:content::VariantRefDeserializer
value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        value: Option<Content<'de>>,$/;"	m	struct:content::EnumDeserializer
value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        value: Option<Content<'de>>,$/;"	m	struct:content::MapDeserializer
value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        value: Option<Content<'de>>,$/;"	m	struct:content::VariantDeserializer
value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        value: PhantomData<Content<'de>>,$/;"	m	struct:content::ContentVisitor
value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        value: PhantomData<TagOrContent<'de>>,$/;"	m	struct:content::TagOrContentVisitor
value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        value: PhantomData<TaggedContent<'de, T>>,$/;"	m	struct:content::TaggedContentVisitor
value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    value: &'a [u8],$/;"	m	struct:BytesDeserializer
value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    value: &'a str,$/;"	m	struct:StrDeserializer
value	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    value: Option<T>,$/;"	m	struct:Attr
value_delimiter	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn value_delimiter(mut self, d: &str) -> Self {$/;"	P	implementation:Arg
value_name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn value_name(mut self, name: &'b str) -> Self {$/;"	P	implementation:Arg
value_names	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn value_names(mut self, names: &[&'b str]) -> Self {$/;"	P	implementation:Arg
value_of	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    pub fn value_of<S: AsRef<str>>(&self, name: S) -> Option<&str> {$/;"	P	implementation:ArgMatches
value_of_lossy	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    pub fn value_of_lossy<S: AsRef<str>>(&'a self, name: S) -> Option<Cow<'a, str>> {$/;"	P	implementation:ArgMatches
value_of_os	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    pub fn value_of_os<S: AsRef<str>>(&self, name: S) -> Option<&OsStr> {$/;"	P	implementation:ArgMatches
value_t	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs	/^macro_rules! value_t {$/;"	M
value_t_or_exit	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs	/^macro_rules! value_t_or_exit {$/;"	M
value_terminator	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn value_terminator(mut self, term: &'b str) -> Self {$/;"	P	implementation:Arg
value_validation	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    pub fn value_validation(arg: Option<&AnyArg>, err: String, color: ColorWhen) -> Self {$/;"	P	implementation:Error
value_validation_auto	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    pub fn value_validation_auto(err: String) -> Self {$/;"	P	implementation:Error
valued	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_builder/mod.rs	/^mod valued;$/;"	n
values	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/map.rs	/^        pub fn values(&self) -> Values<V> {$/;"	P	implementation:vec_map::VecMap
values	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn values(&self) -> Values<'_, K, V> {$/;"	P	implementation:HashMap
values	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/nodes/rrb.rs	/^    fn values(self) -> Chunk<A> {$/;"	P	implementation:Entry
values	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn values(&self) -> Values<'_, K, V> {$/;"	f
values	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/internals/attr.rs	/^    values: Vec<T>,$/;"	m	struct:VecAttr
values_of	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    pub fn values_of<S: AsRef<str>>(&'a self, name: S) -> Option<Values<'a>> {$/;"	P	implementation:ArgMatches
values_of_lossy	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    pub fn values_of_lossy<S: AsRef<str>>(&'a self, name: S) -> Option<Vec<String>> {$/;"	P	implementation:ArgMatches
values_of_os	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg_matches.rs	/^    pub fn values_of_os<S: AsRef<str>>(&'a self, name: S) -> Option<OsValues<'a>> {$/;"	P	implementation:ArgMatches
values_t	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs	/^macro_rules! values_t {$/;"	M
values_t_or_exit	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs	/^macro_rules! values_t_or_exit {$/;"	M
variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn variant<V>(self) -> Result<(V, Self::Variant), Self::Error>$/;"	P	interface:EnumAccess
variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        variant: &'a Content<'de>,$/;"	m	struct:content::EnumRefDeserializer
variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        variant: Content<'de>,$/;"	m	struct:content::EnumDeserializer
variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        variant: &'static str,$/;"	m	struct:content::SerializeStructVariant
variant	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        variant: &'static str,$/;"	m	struct:content::SerializeTupleVariant
variant_ident	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    variant_ident: &'static str,$/;"	m	struct:TaggedSerializer
variant_identifier	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^macro_rules! variant_identifier {$/;"	M
variant_index	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        variant_index: u32,$/;"	m	struct:content::SerializeStructVariant
variant_index	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^        variant_index: u32,$/;"	m	struct:content::SerializeTupleVariant
variant_name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        variant_name: &'a str,$/;"	m	struct:content::InternallyTaggedUnitVisitor
variant_name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        variant_name: &'a str,$/;"	m	struct:content::UntaggedUnitVisitor
variant_name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/ser.rs	/^    variant_name: &'static str,$/;"	m	struct:TaggedSerializer
variant_seed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn variant_seed<V>(self, seed: V) -> Result<(V::Value, Self::Variant), Self::Error>$/;"	P	interface:EnumAccess
variant_seed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    fn variant_seed<T>(mut self, seed: T) -> Result<(T::Value, Self::Variant), Self::Error>$/;"	f
variant_seed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^    fn variant_seed<T>(self, seed: T) -> Result<(T::Value, Self::Variant), Self::Error>$/;"	f
variant_seed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn variant_seed<V>(self, seed: V) -> Result<(V::Value, Self::Variant), E>$/;"	f	module:content
variant_seed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn variant_seed<V>(self, seed: V) -> Result<(V::Value, Self::Variant), Self::Error>$/;"	f	module:content
variants	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/shell.rs	/^    pub fn variants() -> [&'static str; 5] {$/;"	P	implementation:Shell
vec_map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/map.rs	/^mod vec_map {$/;"	n
vec_or_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^        macro_rules! vec_or_str {$/;"	M	method:App::from
vector	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/lib.rs	/^pub mod vector;$/;"	n
vector	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/proptest.rs	/^pub fn vector<A: Strategy + 'static>($/;"	f
vector	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/tests/mod.rs	/^mod vector;$/;"	n
vector	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    vector: Vector<A>,$/;"	m	struct:ConsumingIter
vector	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    vector: VectorInner<A>,$/;"	m	struct:Vector
vector	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^macro_rules! vector {$/;"	M
verify_positionals	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn verify_positionals(&self) -> bool {$/;"	f
version	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/meta.rs	/^    pub version: Option<&'b str>,$/;"	m	struct:AppMeta
version	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn version<S: Into<&'b str>>(mut self, ver: S) -> Self {$/;"	P	implementation:App
version_message	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn version_message<S: Into<&'a str>>(mut self, s: S) -> Self {$/;"	P	implementation:App
version_message	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub version_message: Option<&'a str>,$/;"	m	struct:Parser
version_short	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn version_short<S: AsRef<str>>(mut self, s: S) -> Self {$/;"	P	implementation:App
version_short	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn version_short(&mut self, s: &str) {$/;"	f
version_short	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    version_short: Option<char>,$/;"	m	struct:Parser
view	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    view: Range<usize>,$/;"	m	struct:TreeFocus
view	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/focus.rs	/^    view: Range<usize>,$/;"	m	struct:TreeFocusMut
visible_alias	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn visible_alias<S: Into<&'b str>>(mut self, name: S) -> Self {$/;"	P	implementation:App
visible_alias	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn visible_alias<S: Into<&'b str>>(mut self, name: S) -> Self {$/;"	P	implementation:Arg
visible_aliases	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn visible_aliases(mut self, names: &[&'b str]) -> Self {$/;"	P	implementation:App
visible_aliases	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn visible_aliases(mut self, names: &[&'b str]) -> Self {$/;"	P	implementation:Arg
visit_bool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/ignored_any.rs	/^    fn visit_bool<E>(self, x: bool) -> Result<Self::Value, E> {$/;"	P	implementation:IgnoredAny
visit_bool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn visit_bool<E>(self, v: bool) -> Result<Self::Value, E>$/;"	P	implementation:BoolVisitor
visit_bool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn visit_bool<E>(self, v: bool) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_bool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_bool<F>(self, value: bool) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_bool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_bool<F>(self, value: bool) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_borrowed_bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn visit_borrowed_bytes<E>(self, v: &'a [u8]) -> Result<Self::Value, E>$/;"	P	implementation:BytesVisitor
visit_borrowed_bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn visit_borrowed_bytes<E>(self, v: &'a [u8]) -> Result<Self::Value, E>$/;"	P	implementation:PathVisitor
visit_borrowed_bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn visit_borrowed_bytes<E>(self, v: &'a [u8]) -> Result<Self::Value, E>$/;"	P	implementation:StrVisitor
visit_borrowed_bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_borrowed_bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_borrowed_bytes<E>(self, v: &'a [u8]) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_bytes::CowBytesVisitor
visit_borrowed_bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_borrowed_bytes<E>(self, v: &'a [u8]) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_str::CowStrVisitor
visit_borrowed_bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_borrowed_bytes<F>(self, value: &'de [u8]) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_borrowed_bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_borrowed_bytes<F>(self, value: &'de [u8]) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_borrowed_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn visit_borrowed_str<E>(self, v: &'a str) -> Result<Self::Value, E>$/;"	P	implementation:BytesVisitor
visit_borrowed_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn visit_borrowed_str<E>(self, v: &'a str) -> Result<Self::Value, E>$/;"	P	implementation:PathVisitor
visit_borrowed_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn visit_borrowed_str<E>(self, v: &'a str) -> Result<Self::Value, E>$/;"	P	implementation:StrVisitor
visit_borrowed_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn visit_borrowed_str<E>(self, v: &'de str) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_borrowed_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_borrowed_str<E>(self, v: &'a str) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_bytes::CowBytesVisitor
visit_borrowed_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_borrowed_str<E>(self, v: &'a str) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_str::CowStrVisitor
visit_borrowed_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_borrowed_str<F>(self, value: &'de str) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_borrowed_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_borrowed_str<F>(self, value: &'de str) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_byte_buf	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>$/;"	P	implementation:CStringVisitor
visit_byte_buf	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>$/;"	P	implementation:PathBufVisitor
visit_byte_buf	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>$/;"	P	implementation:StringInPlaceVisitor
visit_byte_buf	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>$/;"	P	implementation:StringVisitor
visit_byte_buf	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_byte_buf	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_bytes::CowBytesVisitor
visit_byte_buf	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_str::CowStrVisitor
visit_byte_buf	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_byte_buf<F>(self, value: Vec<u8>) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_byte_buf	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_byte_buf<F>(self, value: Vec<u8>) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/ignored_any.rs	/^    fn visit_bytes<E>(self, bytes: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:IgnoredAny
visit_bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^                    fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:Duration::deserialize::Field::deserialize::FieldVisitor
visit_bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^                    fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:SystemTime::deserialize::Field::deserialize::FieldVisitor
visit_bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^                    fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:deserialize::Field::deserialize::FieldVisitor
visit_bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^                fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:range::Field::deserialize::FieldVisitor
visit_bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:CStringVisitor
visit_bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:PathBufVisitor
visit_bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:StringInPlaceVisitor
visit_bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:StringVisitor
visit_bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_bytes::CowBytesVisitor
visit_bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_str::CowStrVisitor
visit_bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_bytes<F>(self, value: &[u8]) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_bytes<F>(self, value: &[u8]) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/serde_support.rs	/^                fn visit_bytes<E: de::Error>($/;"	P	implementation:Uuid::deserialize::UuidBytesVisitor
visit_bytes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/serde_support.rs	/^                fn visit_bytes<E: de::Error>($/;"	P	implementation:Uuid::deserialize::UuidStringVisitor
visit_char	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn visit_char<E>(self, v: char) -> Result<Self::Value, E>$/;"	P	implementation:CharVisitor
visit_char	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn visit_char<E>(self, v: char) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_char	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_char<F>(self, value: char) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_char	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_char<F>(self, value: char) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_content_map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    fn visit_content_map<'de, V, E>($/;"	f	module:content
visit_content_map_ref	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    fn visit_content_map_ref<'a, 'de, V, E>($/;"	f	module:content
visit_content_seq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    fn visit_content_seq<'de, V, E>(content: Vec<Content<'de>>, visitor: V) -> Result<V::Value, /;"	f	module:content
visit_content_seq_ref	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^    fn visit_content_seq_ref<'a, 'de, V, E>($/;"	f	module:content
visit_enum	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/ignored_any.rs	/^    fn visit_enum<A>(self, data: A) -> Result<Self::Value, A::Error>$/;"	P	implementation:IgnoredAny
visit_enum	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^            fn visit_enum<A>(self, data: A) -> Result<Self::Value, A::Error>$/;"	f	function:deserialize
visit_enum	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn visit_enum<A>(self, data: A) -> Result<Self::Value, A::Error>$/;"	P	implementation:OsStringVisitor
visit_enum	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn visit_enum<A>(self, data: A) -> Result<Self::Value, A::Error>$/;"	P	interface:Visitor
visit_enum	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_enum<V>(self, _visitor: V) -> Result<Self::Value, V::Error>$/;"	P	implementation:content::ContentVisitor
visit_enum	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_enum<V>(self, visitor: V) -> Result<Self::Value, V::Error>$/;"	P	implementation:content::TagOrContentVisitor
visit_f32	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn visit_f32<E>(self, v: f32) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_f32	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_f32<F>(self, value: f32) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_f32	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_f32<F>(self, value: f32) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_f64	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/ignored_any.rs	/^    fn visit_f64<E>(self, x: f64) -> Result<Self::Value, E> {$/;"	P	implementation:IgnoredAny
visit_f64	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn visit_f64<E>(self, v: f64) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_f64	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_f64<F>(self, value: f64) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_f64	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_f64<F>(self, value: f64) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_field	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/bound.rs	/^        fn visit_field(&mut self, field: &'ast syn::Field) {$/;"	P	implementation:with_bound::FindTyParams
visit_float_method	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^macro_rules! visit_float_method {$/;"	M
visit_i16	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn visit_i16<E>(self, v: i16) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_i16	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_i16<F>(self, value: i16) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_i16	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_i16<F>(self, value: i16) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_i32	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn visit_i32<E>(self, v: i32) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_i32	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_i32<F>(self, value: i32) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_i32	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_i32<F>(self, value: i32) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_i64	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/ignored_any.rs	/^    fn visit_i64<E>(self, x: i64) -> Result<Self::Value, E> {$/;"	P	implementation:IgnoredAny
visit_i64	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn visit_i64<E>(self, v: i64) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_i64	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_i64<F>(self, value: i64) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_i64	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_i64<F>(self, value: i64) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_i8	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn visit_i8<E>(self, v: i8) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_i8	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_i8<F>(self, value: i8) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_i8	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_i8<F>(self, value: i8) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_integer_method	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^macro_rules! visit_integer_method {$/;"	M
visit_macro	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/bound.rs	/^        fn visit_macro(&mut self, _mac: &'ast syn::Macro) {}$/;"	P	implementation:with_bound::FindTyParams
visit_map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ser.rs	/^    fn visit_map<Access>(self, mut access: Access) -> Result<Self::Value, Access::Error>$/;"	f
visit_map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/ignored_any.rs	/^    fn visit_map<A>(self, mut map: A) -> Result<Self::Value, A::Error>$/;"	P	implementation:IgnoredAny
visit_map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^            fn visit_map<A>(self, mut map: A) -> Result<Self::Value, A::Error>$/;"	P	implementation:Duration::deserialize::DurationVisitor
visit_map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^            fn visit_map<A>(self, mut map: A) -> Result<Self::Value, A::Error>$/;"	P	implementation:SystemTime::deserialize::DurationVisitor
visit_map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^        fn visit_map<A>(self, mut map: A) -> Result<Self::Value, A::Error>$/;"	f	module:range
visit_map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn visit_map<A>(self, map: A) -> Result<Self::Value, A::Error>$/;"	P	interface:Visitor
visit_map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_map<M>(self, mut access: M) -> Result<(), M::Error>$/;"	P	implementation:content::InternallyTaggedUnitVisitor
visit_map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_map<M>(self, mut map: M) -> Result<Self::Value, M::Error>$/;"	f	module:content
visit_map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_map<V>(self, mut visitor: V) -> Result<Self::Value, V::Error>$/;"	P	implementation:content::ContentVisitor
visit_map	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_map<V>(self, visitor: V) -> Result<Self::Value, V::Error>$/;"	P	implementation:content::TagOrContentVisitor
visit_newtype_struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/ignored_any.rs	/^    fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:IgnoredAny
visit_newtype_struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	interface:Visitor
visit_newtype_struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:content::ContentVisitor
visit_newtype_struct	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:content::TagOrContentVisitor
visit_none	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/ignored_any.rs	/^    fn visit_none<E>(self) -> Result<Self::Value, E> {$/;"	P	implementation:IgnoredAny
visit_none	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn visit_none<E>(self) -> Result<Self::Value, E>$/;"	f
visit_none	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn visit_none<E>(self) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_none	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_none<E>(self) -> Result<(), E>$/;"	P	implementation:content::UntaggedUnitVisitor
visit_none	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_none<F>(self) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_none	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_none<F>(self) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_path	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/bound.rs	/^        fn visit_path(&mut self, path: &'ast syn::Path) {$/;"	P	implementation:with_bound::FindTyParams
visit_seq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ser.rs	/^    fn visit_seq<Access>(self, mut access: Access) -> Result<Self::Value, Access::Error>$/;"	f
visit_seq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/ignored_any.rs	/^    fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>$/;"	P	implementation:IgnoredAny
visit_seq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>$/;"	P	implementation:Duration::deserialize::DurationVisitor
visit_seq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>$/;"	P	implementation:SystemTime::deserialize::DurationVisitor
visit_seq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>$/;"	f	function:deserialize
visit_seq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>$/;"	f	function:deserialize_in_place
visit_seq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^        fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>$/;"	f	module:range
visit_seq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn visit_seq<A>(self, _: A) -> Result<Self::Value, A::Error>$/;"	P	implementation:ArrayVisitor
visit_seq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>$/;"	P	implementation:CStringVisitor
visit_seq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn visit_seq<A>(self, seq: A) -> Result<Self::Value, A::Error>$/;"	P	interface:Visitor
visit_seq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_seq<S>(self, _: S) -> Result<(), S::Error>$/;"	P	implementation:content::InternallyTaggedUnitVisitor
visit_seq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_seq<S>(self, mut seq: S) -> Result<Self::Value, S::Error>$/;"	f	module:content
visit_seq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_seq<V>(self, mut visitor: V) -> Result<Self::Value, V::Error>$/;"	P	implementation:content::ContentVisitor
visit_seq	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_seq<V>(self, visitor: V) -> Result<Self::Value, V::Error>$/;"	P	implementation:content::TagOrContentVisitor
visit_some	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/ignored_any.rs	/^    fn visit_some<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:IgnoredAny
visit_some	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn visit_some<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	f
visit_some	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn visit_some<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	interface:Visitor
visit_some	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_some<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:content::ContentVisitor
visit_some	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_some<D>(self, deserializer: D) -> Result<Self::Value, D::Error>$/;"	P	implementation:content::TagOrContentVisitor
visit_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/ignored_any.rs	/^    fn visit_str<E>(self, s: &str) -> Result<Self::Value, E>$/;"	P	implementation:IgnoredAny
visit_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^                    fn visit_str<E>(self, value: &str) -> Result<Self::Value, E>$/;"	P	implementation:Duration::deserialize::Field::deserialize::FieldVisitor
visit_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^                    fn visit_str<E>(self, value: &str) -> Result<Self::Value, E>$/;"	P	implementation:SystemTime::deserialize::Field::deserialize::FieldVisitor
visit_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^                    fn visit_str<E>(self, value: &str) -> Result<Self::Value, E>$/;"	P	implementation:deserialize::Field::deserialize::FieldVisitor
visit_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^                fn visit_str<E>(self, s: &str) -> Result<Self::Value, E>$/;"	P	implementation:IpAddr::deserialize::IpAddrVisitor
visit_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^                fn visit_str<E>(self, s: &str) -> Result<Self::Value, E>$/;"	P	implementation:SocketAddr::deserialize::SocketAddrVisitor
visit_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^                fn visit_str<E>(self, value: &str) -> Result<Self::Value, E>$/;"	P	implementation:range::Field::deserialize::FieldVisitor
visit_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>$/;"	P	implementation:CStringVisitor
visit_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>$/;"	P	implementation:CharVisitor
visit_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>$/;"	P	implementation:PathBufVisitor
visit_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>$/;"	P	implementation:StringInPlaceVisitor
visit_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>$/;"	P	implementation:StringVisitor
visit_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_str<E>(self, field: &str) -> Result<Self::Value, E>$/;"	P	implementation:content::TagContentOtherFieldVisitor
visit_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_str<E>(self, field: &str) -> Result<Self::Value, E>$/;"	P	implementation:content::TagOrContentFieldVisitor
visit_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_bytes::CowBytesVisitor
visit_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_str::CowStrVisitor
visit_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_str<F>(self, value: &str) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_str<F>(self, value: &str) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/serde_support.rs	/^                fn visit_str<E: de::Error>($/;"	P	implementation:Uuid::deserialize::UuidStringVisitor
visit_string	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn visit_string<E>(self, v: String) -> Result<Self::Value, E>$/;"	P	implementation:CStringVisitor
visit_string	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn visit_string<E>(self, v: String) -> Result<Self::Value, E>$/;"	P	implementation:PathBufVisitor
visit_string	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn visit_string<E>(self, v: String) -> Result<Self::Value, E>$/;"	P	implementation:StringInPlaceVisitor
visit_string	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn visit_string<E>(self, v: String) -> Result<Self::Value, E>$/;"	P	implementation:StringVisitor
visit_string	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn visit_string<E>(self, v: String) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_string	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_string<E>(self, v: String) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_bytes::CowBytesVisitor
visit_string	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_string<E>(self, v: String) -> Result<Self::Value, E>$/;"	P	implementation:borrow_cow_str::CowStrVisitor
visit_string	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_string<F>(self, value: String) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_string	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_string<F>(self, value: String) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_u16	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn visit_u16<E>(self, v: u16) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_u16	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_u16<F>(self, value: u16) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_u16	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_u16<F>(self, value: u16) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_u32	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn visit_u32<E>(self, v: u32) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_u32	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_u32<F>(self, value: u32) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_u32	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_u32<F>(self, value: u32) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_u64	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/ignored_any.rs	/^    fn visit_u64<E>(self, x: u64) -> Result<Self::Value, E> {$/;"	P	implementation:IgnoredAny
visit_u64	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^                    fn visit_u64<E>(self, value: u64) -> Result<Self::Value, E>$/;"	P	implementation:deserialize::Field::deserialize::FieldVisitor
visit_u64	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn visit_u64<E>(self, v: u64) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_u64	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_u64<F>(self, value: u64) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_u64	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_u64<F>(self, value: u64) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_u8	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn visit_u8<E>(self, v: u8) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_u8	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_u8<F>(self, value: u8) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_u8	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_u8<F>(self, value: u8) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visit_unit	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/ignored_any.rs	/^    fn visit_unit<E>(self) -> Result<Self::Value, E> {$/;"	P	implementation:IgnoredAny
visit_unit	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn visit_unit<E>(self) -> Result<Self::Value, E>$/;"	P	implementation:PhantomDataVisitor
visit_unit	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn visit_unit<E>(self) -> Result<Self::Value, E>$/;"	P	implementation:UnitVisitor
visit_unit	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/impls.rs	/^    fn visit_unit<E>(self) -> Result<Self::Value, E>$/;"	f
visit_unit	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/mod.rs	/^    fn visit_unit<E>(self) -> Result<Self::Value, E>$/;"	P	interface:Visitor
visit_unit	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_unit<E>(self) -> Result<(), E>$/;"	P	implementation:content::UntaggedUnitVisitor
visit_unit	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_unit<F>(self) -> Result<Self::Value, F>$/;"	P	implementation:content::ContentVisitor
visit_unit	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/private/de.rs	/^        fn visit_unit<F>(self) -> Result<Self::Value, F>$/;"	P	implementation:content::TagOrContentVisitor
visitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^        visitor: V,$/;"	m	struct:private::SeedStructVariant
visitor	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/de/value.rs	/^        visitor: V,$/;"	m	struct:private::SeedTupleVariant
void	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.116/src/ser/impossible.rs	/^    void: Void,$/;"	m	struct:Impossible
w	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/macros.rs	/^macro_rules! w {$/;"	M
warning	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/fmt.rs	/^    pub fn warning<T>(&self, msg: T) -> Format<T>$/;"	P	implementation:Colorizer
when	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/fmt.rs	/^    pub when: ColorWhen,$/;"	m	struct:ColorizerOption
when	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/fmt.rs	/^    when: ColorWhen,$/;"	m	struct:Colorizer
winapi_support	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs	/^mod winapi_support;$/;"	n
windows_osstr_starts_with	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/osstringext.rs	/^fn windows_osstr_starts_with(osstr: &OsStr, prefix: &[u8]) -> bool {$/;"	f
with_bound	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/bound.rs	/^pub fn with_bound($/;"	f
with_defaults	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn with_defaults<S: Into<String>>(n: S) -> Self {$/;"	P	implementation:App
with_description	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    pub fn with_description(description: &str, kind: ErrorKind) -> Self {$/;"	P	implementation:Error
with_hasher	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn with_hasher<RS>(hasher: RS) -> Self$/;"	P	implementation:HashMap
with_hasher	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    pub fn with_hasher<RS>(hasher: RS) -> Self$/;"	P	implementation:HashSet
with_lifetime_bound	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/bound.rs	/^pub fn with_lifetime_bound(generics: &syn::Generics, lifetime: &str) -> syn::Generics {$/;"	f
with_name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/meta.rs	/^    pub fn with_name(s: String) -> Self {$/;"	P	implementation:AppMeta
with_name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn with_name(n: String) -> Self {$/;"	f
with_name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/arg.rs	/^    pub fn with_name(n: &'a str) -> Self {$/;"	P	implementation:Arg
with_name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/group.rs	/^    pub fn with_name(n: &'a str) -> Self {$/;"	P	implementation:ArgGroup
with_name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/subcommand.rs	/^    pub fn with_name<'b>(name: &str) -> App<'a, 'b> {$/;"	P	implementation:SubCommand
with_pool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn with_pool(pool: &HashMapPool<K, V>) -> Self {$/;"	P	implementation:HashMap
with_pool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    pub fn with_pool(pool: &HashSetPool<A>) -> Self {$/;"	P	implementation:HashSet
with_pool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn with_pool(pool: &OrdMapPool<K, V>) -> Self {$/;"	P	implementation:OrdMap
with_pool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    pub fn with_pool(pool: &OrdSetPool<A>) -> Self {$/;"	P	implementation:OrdSet
with_pool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/mod.rs	/^    pub fn with_pool(pool: &RRBPool<A>) -> Self {$/;"	P	implementation:Vector
with_pool_hasher	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn with_pool_hasher<RS>(pool: &HashMapPool<K, V>, hasher: RS) -> Self$/;"	P	implementation:HashMap
with_pool_hasher	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    pub fn with_pool_hasher<RS>(pool: &HashSetPool<A>, hasher: RS) -> Self$/;"	P	implementation:HashSet
with_producer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/rayon.rs	/^    fn with_producer<CB>(self, callback: CB) -> CB::Output$/;"	f
with_self_bound	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/bound.rs	/^pub fn with_self_bound($/;"	f
with_sizes	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/vector/pool.rs	/^    pub fn with_sizes($/;"	P	implementation:RRBPool
with_where_predicates	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/bound.rs	/^pub fn with_where_predicates($/;"	f
with_where_predicates_from_fields	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/bound.rs	/^pub fn with_where_predicates_from_fields($/;"	f
with_where_predicates_from_variants	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/bound.rs	/^pub fn with_where_predicates_from_variants($/;"	f
without	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/map.rs	/^    pub fn without<BK>(&self, k: &BK) -> Self$/;"	f
without	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/hash/set.rs	/^    pub fn without<BA>(&self, a: &BA) -> Self$/;"	f
without	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn without<BK>(&self, k: &BK) -> Self$/;"	f
without	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    pub fn without<BA>(&self, a: &BA) -> Self$/;"	f
without_defaults	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/bound.rs	/^pub fn without_defaults(generics: &syn::Generics) -> syn::Generics {$/;"	f
without_max	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn without_max(&self) -> (Option<V>, Self) {$/;"	f
without_max	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    pub fn without_max(&self) -> (Option<A>, Self) {$/;"	f
without_max_with_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn without_max_with_key(&self) -> (Option<(K, V)>, Self) {$/;"	f
without_min	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn without_min(&self) -> (Option<V>, Self) {$/;"	f
without_min	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/set.rs	/^    pub fn without_min(&self) -> (Option<A>, Self) {$/;"	f
without_min_with_key	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/ord/map.rs	/^    pub fn without_min_with_key(&self) -> (Option<(K, V)>, Self) {$/;"	f
wlnerr	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs	/^macro_rules! wlnerr($/;"	M
wrap_deserialize_field_with	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn wrap_deserialize_field_with($/;"	f
wrap_deserialize_variant_with	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn wrap_deserialize_variant_with($/;"	f
wrap_deserialize_with	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/de.rs	/^fn wrap_deserialize_with($/;"	f
wrap_help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^fn wrap_help(help: &str, avail_chars: usize) -> String {$/;"	f
wrap_help_last_word	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^    fn wrap_help_last_word() {$/;"	f	module:test
wrap_in_const	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/dummy.rs	/^pub fn wrap_in_const($/;"	f
wrap_serialize_field_with	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^fn wrap_serialize_field_with($/;"	f
wrap_serialize_variant_with	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^fn wrap_serialize_variant_with($/;"	f
wrap_serialize_with	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.116/src/ser.rs	/^fn wrap_serialize_with($/;"	f
write	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/im-15.0.0/./src/test.rs	/^    fn write(&mut self, bytes: &[u8]) {$/;"	P	implementation:LolHasher
write_all_args	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^    pub fn write_all_args(&mut self, parser: &Parser) -> ClapResult<()> {$/;"	P	implementation:Help
write_app_help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^    pub fn write_app_help(w: &'a mut Write, app: &App, use_long: bool) -> ClapResult<()> {$/;"	P	implementation:Help
write_arg	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^    fn write_arg<'b, 'c>(&mut self, arg: &ArgWithDisplay<'b, 'c>) -> io::Result<()> {$/;"	P	implementation:Help
write_args	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^    fn write_args<'b: 'd, 'c: 'd, 'd, I: 'd>(&mut self, args: I) -> io::Result<()>$/;"	P	implementation:Help
write_args_unsorted	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^    fn write_args_unsorted<'b: 'd, 'c: 'd, 'd, I: 'd>(&mut self, args: I) -> io::Result<()>$/;"	P	implementation:Help
write_before_after_help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^    fn write_before_after_help(&mut self, h: &str) -> io::Result<()> {$/;"	P	implementation:Help
write_bin_name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^    fn write_bin_name(&mut self, parser: &Parser) -> io::Result<()> {$/;"	P	implementation:Help
write_default_help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^    pub fn write_default_help(&mut self, parser: &Parser) -> ClapResult<()> {$/;"	P	implementation:Help
write_help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^    pub fn write_help(&mut self, parser: &Parser) -> ClapResult<()> {$/;"	P	implementation:Help
write_help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn write_help<W: Write>(&self, w: &mut W) -> ClapResult<()> {$/;"	P	implementation:App
write_help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn write_help<W: Write>(&self, w: &mut W) -> ClapResult<()> {$/;"	f
write_help_err	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn write_help_err<W: Write>(&self, w: &mut W) -> ClapResult<()> {$/;"	f
write_long_help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn write_long_help<W: Write>(&mut self, w: &mut W) -> ClapResult<()> {$/;"	P	implementation:App
write_long_help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn write_long_help<W: Write>(&self, w: &mut W) -> ClapResult<()> {$/;"	f
write_long_version	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn write_long_version<W: Write>(&self, w: &mut W) -> ClapResult<()> {$/;"	P	implementation:App
write_name	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^        macro_rules! write_name {$/;"	M	method:Help::write_bin_name
write_nspaces	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/macros.rs	/^macro_rules! write_nspaces {$/;"	M
write_parser_help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^    pub fn write_parser_help(w: &'a mut Write, parser: &Parser, use_long: bool) -> ClapResult<()/;"	P	implementation:Help
write_parser_help_to_stderr	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^    pub fn write_parser_help_to_stderr(w: &'a mut Write, parser: &Parser) -> ClapResult<()> {$/;"	P	implementation:Help
write_subcommands	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^    fn write_subcommands(&mut self, parser: &Parser) -> io::Result<()> {$/;"	P	implementation:Help
write_templated_help	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^    fn write_templated_help(&mut self, parser: &Parser, template: &str) -> ClapResult<()> {$/;"	P	implementation:Help
write_thing	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^        macro_rules! write_thing {$/;"	M	method:Help::write_default_help
write_to	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    pub fn write_to<W: Write>(&self, w: &mut W) -> io::Result<()> {$/;"	P	implementation:Error
write_version	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^    fn write_version(&mut self, parser: &Parser) -> io::Result<()> {$/;"	P	implementation:Help
write_version	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^    pub fn write_version<W: Write>(&self, w: &mut W) -> ClapResult<()> {$/;"	P	implementation:App
write_version	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/parser.rs	/^    pub fn write_version<W: Write>(&self, w: &mut W, use_long: bool) -> io::Result<()> {$/;"	f
writer	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/help.rs	/^    writer: &'a mut Write,$/;"	m	struct:Help
wrong_number_of_values	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/errors.rs	/^    pub fn wrong_number_of_values<S, U>($/;"	P	implementation:Error
yaml_opt_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/macros.rs	/^macro_rules! yaml_opt_str {$/;"	M
yaml_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/mod.rs	/^        macro_rules! yaml_str {$/;"	M	method:App::from
yaml_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/macros.rs	/^macro_rules! yaml_str {$/;"	M
yaml_to_bool	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/macros.rs	/^macro_rules! yaml_to_bool {$/;"	M
yaml_to_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/macros.rs	/^macro_rules! yaml_to_str {$/;"	M
yaml_to_u64	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/macros.rs	/^macro_rules! yaml_to_u64 {$/;"	M
yaml_to_usize	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/macros.rs	/^macro_rules! yaml_to_usize {$/;"	M
yaml_tuple2	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/macros.rs	/^macro_rules! yaml_tuple2 {$/;"	M
yaml_tuple3	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/macros.rs	/^macro_rules! yaml_tuple3 {$/;"	M
yaml_vec_or_str	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/args/macros.rs	/^macro_rules! yaml_vec_or_str {$/;"	M
zeroed	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/app/settings.rs	/^    pub fn zeroed() -> Self {$/;"	P	implementation:AppFlags
zsh	/home/darrion/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.3/src/completions/mod.rs	/^mod zsh;$/;"	n
